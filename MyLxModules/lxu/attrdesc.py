'''Autogenerated dummy attrdesc module anabling code completion in Python editors
 MODO Build #621568
'''

class AttributeDesc:
    def __init__(self):
        self._need_ui = bool()
        self._byname = dict()
        self._cur = NoneType()
        self._val_S = lx.service.Value()
        self._attrs = list()

    def add(self, name, type):
        '''Add an attribute to the end of the attribute list.
        Takes a name and value type string.

        '''
        pass

    def arg_flag(self, flag):
        '''Set argument flags for a command argument attribute.'''
        pass

    def by_index(self, index):
        '''Get the name of an attribute by index.
        '''
        pass

    def by_name(self, name):
        '''Get the index of an attribute by name.
        '''
        pass

    def chan_add_dependency(self, channel, itemtype):
        pass

    def chan_dep_byindex(self, name, index):
        pass

    def chan_dep_count(self, name):
        pass

    def chan_enabled(self, name, item, read, msg):
        pass

    def chan_flags(self, fl):
        pass

    def chan_set_custom(self, cust):
        pass

    def chan_uihints(self, name, obj):
        pass

    def chan_uivalue(self, name):
        pass

    def chmod_array(self, flags):
        '''Set the attribute to be accessed from a channel modifier as a ValueArray.'''
        pass

    def chmod_bind(self, cmod):
        '''Bind the channel modifier to data object.'''
        pass

    def chmod_define(self, cmod):
        '''Define the inputs and outputs of a channel modifier.'''
        pass

    def chmod_matrix(self, flags):
        '''Set the attribute to be accessed from a channel modifier as a Matrix.'''
        pass

    def chmod_time(self):
        '''Add time as a channel modifier input.'''
        pass

    def chmod_value(self, flags):
        '''Set the attribute to be accessed from a channel modifier as a Value.'''
        pass

    def count(self):
        '''Get the number of attributes.
        '''
        pass

    def default_val(self, val):
        '''Set the default value for the attribute.'''
        pass

    def dialog_init(self, attr):
        '''Initialize command dialog.
        '''
        pass

    def eval_attach(self, eval, item):
        '''Attach channels to an Evaluation, returing base index.
        '''
        pass

    def eval_flag(self, flag):
        '''Set evaluation flags for a channel attribute.'''
        pass

    def eval_read(self, attr, base):
        '''Read eval channels from Attributes (already cast for speed) and base
           index, returing an object with named attributes. Types will match the
           intrinsic type for read, and will be value objects for write.
        '''
        pass

    def eval_time(self):
        '''Add time as an evaluation attribute.'''
        pass

    def need_chan_ui(self):
        pass

    def read_args(self, attr):
        '''Read command arguments into struct.
        '''
        pass

    def read_args_isset(self, attr, data):
        '''Read command argument "set" status into struct.
        '''
        pass

    def set_hint(self, hint):
        '''Set the optional hint vector for an attribute.'''
        pass

    def set_max(self, maxval):
        pass

    def set_min(self, minval):
        pass

    def setup_args(self, cmd):
        '''Set command arguments from attributes.
        '''
        pass

    def setup_channels(self, add_obj):
        '''Setup the channels for a package using the description.'''
        pass

    def vector_type(self, vtype):
        '''Set the optional vector type for an attribute.'''
        pass



class AttributeDescData:
    pass


class AttributeDescVector:
    def Set(self, vector):
        pass



class CustomChannelUI:
    def __init__(self):
        self.channel_name = NoneType()

    def enabled(self, item, read, msg):
        '''Implement this method to return false when the channel is disabled.
           The message can also be set.
        '''
        pass

    def hints(self, hints):
        '''Implement this method to set hints on the UIHints object. If this
           returns true then it overrides any other default hints.
        '''
        pass

    def uivalue(self):
        '''Implement this method to return a new UIValueHints object for
           the channel.
        '''
        pass



def _writable_attr_value(attr, index):
    '''Helper function to get a Value object from attr index.
    '''
    pass

