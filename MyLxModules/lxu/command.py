'''Autogenerated dummy command module anabling code completion in Python editors
 MODO Build #621568
'''

class BasicCommand:
    def __init__(self):
        self._hints = dict()
        self._index = dict()
        self._msg = lxu.object.Message()
        self._has_varg = bool()
        self.val_svc = lx.service.Value()
        self._flags = list()
        self._attrs = list()

    def arg_DisableMsg(self, index, message):
        '''Return true if the argument is disabled, and set the message if any.
        '''
        pass

    def arg_UIHints(self, index, hints):
        '''Set hints for the argument.
        '''
        pass

    def arg_UIValueHints(self, index):
        '''Return a UIValueHints object for the argument.
        '''
        pass

    def atrui_DisableMsg(self, index, message):
        pass

    def atrui_UIHints(self, index, hints):
        pass

    def atrui_UIValueHints(self, index):
        pass

    def attr_Count(self):
        '''Returns number of attributes.'''
        pass

    def attr_GetFlt(self, index):
        pass

    def attr_GetInt(self, index):
        pass

    def attr_GetString(self, index):
        pass

    def attr_Hints(self, index):
        '''Returns hint vector for an attribute by index.'''
        pass

    def attr_Lookup(self, name):
        '''Returns the index of an attribute given the name.'''
        pass

    def attr_Name(self, index):
        '''Returns name of an attribute by index.'''
        pass

    def attr_SetFlt(self, index, val):
        pass

    def attr_SetInt(self, index, val):
        pass

    def attr_SetString(self, index, val):
        pass

    def attr_Type(self, index):
        '''Returns basic type of an attribute by index.'''
        pass

    def attr_TypeName(self, index):
        '''Returns value type string of an attribute by index.'''
        pass

    def attr_Value(self, index, writeOK):
        '''Get value object for an attribute.
        If writeOK is true the value will be created if it doesn't exist.
        '''
        pass

    def basic_ArgType(self, index):
        '''Dynamic argument types can be supported with this method.'''
        pass

    def basic_ButtonName(self):
        '''Button name override.'''
        pass

    def basic_Enable(self, msg):
        '''basic_Enable() gives the enable state (true/false) and reason.
        It can also return None if the command is not available at all.
        '''
        pass

    def basic_Execute(self, msg, flags):
        '''Execution: failure is trapped by the message object.'''
        pass

    def basic_Icon(self):
        '''Icon name override.'''
        pass

    def basic_PreExecute(self, msg):
        '''Pre-Execution: failure is trapped by the message object.'''
        pass

    def basic_SetFlags(self, index, flags):
        '''Flags can be set by the client during initialization.'''
        pass

    def cmd_ArgClear(self, index):
        '''Clearing arguments has to deal with the vararg flags on all arguments.'''
        pass

    def cmd_ArgDesc(self, index):
        pass

    def cmd_ArgEnable(self, arg):
        pass

    def cmd_ArgExample(self, index):
        pass

    def cmd_ArgFlags(self, index):
        '''Get the flags, getting value_set from the dyna attrs.'''
        pass

    def cmd_ArgOptionDesc(self, index, optIndex):
        pass

    def cmd_ArgOptionUserName(self, index, optIndex):
        pass

    def cmd_ArgParseString(self, argIndex, argString):
        pass

    def cmd_ArgResetAll(self):
        pass

    def cmd_ArgSetDatatypes(self):
        pass

    def cmd_ArgType(self, index):
        '''The default retuns None, which means the argument type will be taken from it's definition.'''
        pass

    def cmd_ArgTypeDesc(self, index):
        pass

    def cmd_ArgTypeUserName(self, index):
        pass

    def cmd_ArgUserName(self, index):
        pass

    def cmd_ButtonName(self):
        pass

    def cmd_ContainedEnable(self):
        pass

    def cmd_Copy(self, sourceCommand):
        pass

    def cmd_Desc(self):
        pass

    def cmd_DialogArgChange(self, arg):
        pass

    def cmd_DialogFormatting(self):
        pass

    def cmd_DialogInit(self):
        pass

    def cmd_Enable(self, msg):
        pass

    def cmd_Example(self):
        pass

    def cmd_Execute(self, flags):
        pass

    def cmd_Flags(self):
        '''Required method, but should be overridden by the client.
        The default retuns zero, which means this is a side-effect command.

        '''
        pass

    def cmd_Help(self):
        pass

    def cmd_Icon(self):
        pass

    def cmd_IconImage(self, w, h):
        pass

    def cmd_Interact(self):
        pass

    def cmd_Message(self):
        '''Returns our message object.'''
        pass

    def cmd_Name(self):
        pass

    def cmd_NotifyAddClient(self, argument, object):
        pass

    def cmd_NotifyRemoveClient(self, object):
        pass

    def cmd_PostExecBehaviorFlags(self):
        pass

    def cmd_PostExecFlags(self):
        pass

    def cmd_PostExecHints(self):
        pass

    def cmd_PreExecute(self):
        pass

    def cmd_Query(self, index, vaQuery):
        pass

    def cmd_SandboxGUID(self):
        pass

    def cmd_Tag(self):
        pass

    def cmd_ToggleArg(self):
        pass

    def cmd_Tooltip(self):
        pass

    def cmd_UserName(self):
        pass

    def dyna_Add(self, name, type):
        '''We override dyna_Add() to expand our flags array.'''
        pass

    def dyna_Bool(self, index, value):
        pass

    def dyna_Float(self, index, value):
        pass

    def dyna_GetFlags(self, index):
        '''Returns flags for an attribute by index.'''
        pass

    def dyna_Int(self, index, value):
        pass

    def dyna_IsSet(self, index):
        '''Returns true if the attribute value is set.'''
        pass

    def dyna_SetFlags(self, index, flags):
        '''Set the optional flags int for an attribute.'''
        pass

    def dyna_SetHint(self, index, hint):
        '''Set the optional hint vector for an attribute.'''
        pass

    def dyna_SetType(self, index, type):
        '''Change the value type for an attribute by index.
        Setting it to None clears the stored value without changing the type.

        '''
        pass

    def dyna_String(self, index, value):
        pass



class BasicHints:
    def uiv_ColorPickerCommands(self, rgb, alpha, rgbAlt, alphaAlt, useAlt, bufLens):
        pass

    def uiv_CueText(self):
        pass

    def uiv_Flags(self):
        pass

    def uiv_FormCommandListByIndex(self, index):
        pass

    def uiv_FormCommandListCount(self):
        pass

    def uiv_ItemTest(self, item):
        pass

    def uiv_NotifierByIndex(self, index):
        pass

    def uiv_NotifierCount(self):
        pass

    def uiv_PopCategory(self):
        pass

    def uiv_PopCount(self):
        pass

    def uiv_PopFlags(self, index):
        pass

    def uiv_PopIconImage(self, index):
        pass

    def uiv_PopIconResource(self, index):
        pass

    def uiv_PopIconSize(self):
        pass

    def uiv_PopInternalName(self, index):
        pass

    def uiv_PopToolTip(self, index):
        pass

    def uiv_PopUserName(self, index):
        pass

    def uiv_TextValidate(self, value):
        pass



class NotifierHost:
    def __init__(self):
        self._has_arg = bool()
        self._note_S = lxu.service.NotifySys()
        self._notifiers = list()
        self._clients = dict()

    def add(self, name, args):
        '''Add a notifier by name and args. It's spawned and appended to the
           list, but only if there are no clients yet.
        '''
        pass

    def add_client(self, object):
        '''Add a client to all notifiers. It's placed into a dictionary to
           prevent adding more than once.
        '''
        pass

    def rem_client(self, object):
        '''Remove a client from all notifiers.
        '''
        pass

    def set_arg(self, dyna, index):
        '''Add the notifiers associated with an argument of the command. This can
           only be done before clients are added, and only once.
        '''
        pass



