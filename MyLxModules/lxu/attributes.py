'''Autogenerated dummy attributes module anabling code completion in Python editors
 MODO Build #621568
'''

class DynamicArguments:
    def __init__(self):
        self.val_svc = lx.service.Value()
        self._flags = dict()
        self._index = dict()
        self._hints = dict()
        self._attrs = list()

    def arg_DisableMsg(self, index, message):
        '''Return true if the argument is disabled, and set the message if any.
        '''
        pass

    def arg_UIHints(self, index, hints):
        '''Set hints for the argument.
        '''
        pass

    def arg_UIValueHints(self, index):
        '''Return a UIValueHints object for the argument.
        '''
        pass

    def atrui_DisableMsg(self, index, message):
        pass

    def atrui_UIHints(self, index, hints):
        pass

    def atrui_UIValueHints(self, index):
        pass

    def attr_Count(self):
        '''Returns number of attributes.'''
        pass

    def attr_GetFlt(self, index):
        pass

    def attr_GetInt(self, index):
        pass

    def attr_GetString(self, index):
        pass

    def attr_Hints(self, index):
        '''Returns hint vector for an attribute by index.'''
        pass

    def attr_Lookup(self, name):
        '''Returns the index of an attribute given the name.'''
        pass

    def attr_Name(self, index):
        '''Returns name of an attribute by index.'''
        pass

    def attr_SetFlt(self, index, val):
        pass

    def attr_SetInt(self, index, val):
        pass

    def attr_SetString(self, index, val):
        pass

    def attr_Type(self, index):
        '''Returns basic type of an attribute by index.'''
        pass

    def attr_TypeName(self, index):
        '''Returns value type string of an attribute by index.'''
        pass

    def attr_Value(self, index, writeOK):
        '''Get value object for an attribute.
        If writeOK is true the value will be created if it doesn't exist.
        '''
        pass

    def dyna_Add(self, name, type):
        '''Add an attribute to the end of the attribute list.
        Takes a name and value type string.

        '''
        pass

    def dyna_Bool(self, index, value):
        pass

    def dyna_Clear(self, index):
        '''Clear a single argument.'''
        pass

    def dyna_ClearAll(self):
        '''Clear all arguments.'''
        pass

    def dyna_Float(self, index, value):
        pass

    def dyna_GetFlags(self, index):
        '''Get the argument flags. This computes the VALUE_SET flag dynamically.'''
        pass

    def dyna_GetType(self):
        '''Return the type of variable type arguments (for override).'''
        pass

    def dyna_HasVariable(self):
        '''Test if any arguments have variable type.'''
        pass

    def dyna_Int(self, index, value):
        pass

    def dyna_IsSet(self, index):
        '''Returns true if the attribute value is set.'''
        pass

    def dyna_SetFlags(self, index, flags):
        '''Set the optional flags int for an attribute.'''
        pass

    def dyna_SetHint(self, index, hint):
        '''Set the optional hint vector for an attribute.'''
        pass

    def dyna_SetType(self, index, type):
        '''Change the value type for an attribute by index.
        Setting it to None clears the stored value without changing the type.

        '''
        pass

    def dyna_SetVariable(self):
        '''Set the type of all arguments that have variable type.'''
        pass

    def dyna_String(self, index, value):
        pass



class DynamicAttributes:
    def __init__(self):
        self.val_svc = lx.service.Value()
        self._flags = dict()
        self._index = dict()
        self._hints = dict()
        self._attrs = list()

    def arg_DisableMsg(self, index, message):
        '''Return true if the argument is disabled, and set the message if any.
        '''
        pass

    def arg_UIHints(self, index, hints):
        '''Set hints for the argument.
        '''
        pass

    def arg_UIValueHints(self, index):
        '''Return a UIValueHints object for the argument.
        '''
        pass

    def atrui_DisableMsg(self, index, message):
        pass

    def atrui_UIHints(self, index, hints):
        pass

    def atrui_UIValueHints(self, index):
        pass

    def attr_Count(self):
        '''Returns number of attributes.'''
        pass

    def attr_GetFlt(self, index):
        pass

    def attr_GetInt(self, index):
        pass

    def attr_GetString(self, index):
        pass

    def attr_Hints(self, index):
        '''Returns hint vector for an attribute by index.'''
        pass

    def attr_Lookup(self, name):
        '''Returns the index of an attribute given the name.'''
        pass

    def attr_Name(self, index):
        '''Returns name of an attribute by index.'''
        pass

    def attr_SetFlt(self, index, val):
        pass

    def attr_SetInt(self, index, val):
        pass

    def attr_SetString(self, index, val):
        pass

    def attr_Type(self, index):
        '''Returns basic type of an attribute by index.'''
        pass

    def attr_TypeName(self, index):
        '''Returns value type string of an attribute by index.'''
        pass

    def attr_Value(self, index, writeOK):
        '''Get value object for an attribute.
        If writeOK is true the value will be created if it doesn't exist.
        '''
        pass

    def dyna_Add(self, name, type):
        '''Add an attribute to the end of the attribute list.
        Takes a name and value type string.

        '''
        pass

    def dyna_Bool(self, index, value):
        pass

    def dyna_Float(self, index, value):
        pass

    def dyna_GetFlags(self, index):
        '''Returns flags for an attribute by index.'''
        pass

    def dyna_Int(self, index, value):
        pass

    def dyna_IsSet(self, index):
        '''Returns true if the attribute value is set.'''
        pass

    def dyna_SetFlags(self, index, flags):
        '''Set the optional flags int for an attribute.'''
        pass

    def dyna_SetHint(self, index, hint):
        '''Set the optional hint vector for an attribute.'''
        pass

    def dyna_SetType(self, index, type):
        '''Change the value type for an attribute by index.
        Setting it to None clears the stored value without changing the type.

        '''
        pass

    def dyna_String(self, index, value):
        pass



