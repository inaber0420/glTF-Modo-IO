'''Autogenerated dummy lxifc module anabling code completion in Python editors
 MODO Build #621568
'''

class ActionListener:
    def actl_ActionChannelConstantChange(self, item, channel):
        pass

    def actl_ActionChannelConstantPreChange(self, item, channel):
        pass

    def actl_ActionChannelSignal(self, item, channel):
        pass



class AnimListener:
    def animevent_EnterSetup(self):
        pass

    def animevent_LeaveSetup(self):
        pass

    def animevent_PlayEnd(self):
        pass

    def animevent_PlayStart(self):
        pass

    def animevent_ScrubEnd(self):
        pass

    def animevent_ScrubTime(self):
        pass

    def animevent_TimeChange(self):
        pass



class AppActiveListener:
    def activeevent_IsNowActive(self, isActive):
        pass



class AssemblyAlias:
    def alias_Flags(self):
        pass

    def alias_SuperType(self):
        pass

    def alias_Test(self, assembly, other):
        pass



class AsyncMonitorInfo:
    def amonsys_Abort(self):
        pass

    def amonsys_CanAbort(self):
        pass

    def amonsys_Child(self):
        pass

    def amonsys_Identifier(self):
        pass

    def amonsys_IsAborted(self):
        pass

    def amonsys_Parent(self):
        pass

    def amonsys_System(self):
        pass

    def amonsys_Title(self):
        pass



class Attributes:
    def attr_Count(self):
        pass

    def attr_GetFlt(self, index):
        pass

    def attr_GetInt(self, index):
        pass

    def attr_GetString(self, index):
        pass

    def attr_Hints(self, index):
        pass

    def attr_Lookup(self, name):
        pass

    def attr_Name(self, index):
        pass

    def attr_SetFlt(self, index, val):
        pass

    def attr_SetInt(self, index, val):
        pass

    def attr_SetString(self, index, val):
        pass

    def attr_Type(self, index):
        pass

    def attr_TypeName(self, index):
        pass

    def attr_Value(self, index, writeOK):
        pass



class AttributesUI:
    def atrui_DisableMsg(self, index, message):
        pass

    def atrui_UIHints(self, index, hints):
        pass

    def atrui_UIValueHints(self, index):
        pass



class Audio:
    def audio_Channels(self):
        pass

    def audio_Data(self):
        pass

    def audio_Duration(self):
        pass

    def audio_Filename(self):
        pass

    def audio_Frequency(self):
        pass

    def audio_Read(self, buff):
        pass

    def audio_Sample(self, time, type, value):
        pass

    def audio_Seek(self, frame):
        pass

    def audio_Size(self):
        pass

    def audio_Tell(self):
        pass

    def audio_TrimStart(self):
        pass

    def audio_Type(self):
        pass



class AudioWrite:
    def audiow_SetDuration(self, duration):
        pass

    def audiow_SetSample(self, time, type, value):
        pass

    def audiow_SetStart(self, start):
        pass

    def audiow_Write(self, data):
        pass

    def audiow_WriteEnd(self):
        pass



class AutoSaveListener:
    def asl_AutoSaveNow(self):
        pass



class Buffer:
    def buff_Clear(self, x, y):
        pass

    def buff_CreateImageTileTree(self):
        pass

    def buff_DataType(self):
        pass

    def buff_DecrementTileTreeSize(self):
        pass

    def buff_DestroyImageTileTree(self):
        pass

    def buff_Flags(self):
        pass

    def buff_GetImageTileTree(self):
        pass

    def buff_GetSize(self):
        pass

    def buff_IncrementTileTreeSize(self):
        pass

    def buff_Line(self, y):
        pass

    def buff_Name(self):
        pass

    def buff_Pixel(self, x, y):
        pass

    def buff_ResetImageTileTree(self):
        pass

    def buff_SetEyeSide(self, eyeSide):
        pass

    def buff_SetFlags(self, flags):
        pass

    def buff_SetSize(self, width, height, writeBucketsToDisk, isStereo):
        pass

    def buff_SetUserName(self, name):
        pass

    def buff_UserName(self):
        pass

    def buff_VectorType(self):
        pass



class CacheData:
    def cache_Size(self):
        pass



class ChannelDest:
    def chand_Channel(self):
        pass

    def chand_Location(self):
        pass



class ChannelDropPreview:
    def chandp_MarkChannel(self):
        pass



class ChannelModItem:
    def cmod_Cleanup(self, data):
        pass

    def cmod_Evaluate(self, cmod, attr, data):
        pass

    def cmod_Flags(self, item, index):
        pass



class ChannelModManager:
    def cman_Allocate(self, cmod):
        pass

    def cman_Define(self, cmod):
        pass



class ChannelModOperator:
    def cmop_Evaluate(self):
        pass



class ChannelUI:
    def cui_Cookie(self, channelName, requestedFor):
        pass

    def cui_DependencyByIndex(self, channelName, index):
        pass

    def cui_DependencyByIndexName(self, channelName, index):
        pass

    def cui_DependencyCount(self, channelName):
        pass

    def cui_Enabled(self, channelName, msg, item, chanRead):
        pass

    def cui_ItemEnabled(self, msg, item):
        pass

    def cui_ItemIcon(self, item):
        pass

    def cui_UIHints(self, channelName, hints):
        pass

    def cui_UIValueHints(self, channelName):
        pass



class ClipDest:
    def locd_Item(self):
        pass

    def locd_Location(self):
        pass

    def locd_Type(self):
        pass



class CmdSysListener:
    def cmdsysevent_AliasAdded(self, name, isOverride):
        pass

    def cmdsysevent_AliasRemoved(self, name, isOverride):
        pass

    def cmdsysevent_BlockBegin(self, block, isSandboxed):
        pass

    def cmdsysevent_BlockEnd(self, block, isSandboxed, wasDiscarded):
        pass

    def cmdsysevent_BlockEndedPostMode(self, name, isSandboxed):
        pass

    def cmdsysevent_CommandAdded(self, name):
        pass

    def cmdsysevent_ExecutePost(self, cmd, isSandboxed, isPostCmd):
        pass

    def cmdsysevent_ExecutePre(self, cmd, type, isSandboxed, isPostCmd):
        pass

    def cmdsysevent_ExecuteResult(self, cmd, type, isSandboxed, isPostCmd, wasSuccessful):
        pass

    def cmdsysevent_PostModeBegin(self):
        pass

    def cmdsysevent_PostModeEnd(self):
        pass

    def cmdsysevent_PostModeRestart(self):
        pass

    def cmdsysevent_PostModeUndoNext(self):
        pass

    def cmdsysevent_RefireBegin(self):
        pass

    def cmdsysevent_RefireEnd(self):
        pass

    def cmdsysevent_RefiringNext(self):
        pass

    def cmdsysevent_SystemReady(self):
        pass

    def cmdsysevent_UndoLockout(self, isLockedOut):
        pass

    def cmdsysevent_UserRedo(self):
        pass

    def cmdsysevent_UserUndo(self):
        pass



class Color:
    def color_Alpha(self):
        pass

    def color_Color(self):
        pass

    def color_ColorInModelSpace(self):
        pass

    def color_ColorModel(self):
        pass



class ColorDialog:
    def colordlg_DoDialog(self, title, stops, gamma):
        pass



class ColorMapping:
    def cmap_FromLinear(self, linearValues, length):
        pass

    def cmap_FromLinearFast(self, length):
        pass

    def cmap_GetCMServerName(self):
        pass

    def cmap_GetName(self):
        pass

    def cmap_Setup(self, toLinear):
        pass

    def cmap_ToLinear(self, sourceValues, length):
        pass

    def cmap_ToLinearFast(self, length):
        pass



class ColorMappingModule:
    def cmapmod_Flags(self):
        pass



class ColorModel:
    def colm_CanSliceBeReused(self, xAxis, yAxis, oldVec, newVec):
        pass

    def colm_ComponentRange(self, component):
        pass

    def colm_ComponentType(self, component):
        pass

    def colm_DrawSlice(self, image, xAxis, yAxis, vec):
        pass

    def colm_DrawSliceMarker(self, image, xAxis, yAxis, downVec, vec):
        pass

    def colm_FromRGB(self, rgb, vector):
        pass

    def colm_FromSlicePos(self, xAxis, yAxis, imgW, imgH, imgX, imgY, downVec, vec):
        pass

    def colm_NumComponents(self):
        pass

    def colm_StripBaseVector(self, axis, dynamic, vec):
        pass

    def colm_ToRGB(self, vector, rgb):
        pass

    def colm_ToSlicePos(self, xAxis, yAxis, imgW, imgH, vec):
        pass



class ColorPreDest:
    def colpd_Apply(self):
        pass

    def colpd_SetColor(self, rgb):
        pass

    def colpd_SetColorModel(self, name, vec):
        pass



class Command:
    def cmd_ArgClear(self, index):
        pass

    def cmd_ArgDesc(self, index):
        pass

    def cmd_ArgEnable(self, arg):
        pass

    def cmd_ArgExample(self, index):
        pass

    def cmd_ArgFlags(self, index):
        pass

    def cmd_ArgOptionDesc(self, index, optIndex):
        pass

    def cmd_ArgOptionUserName(self, index, optIndex):
        pass

    def cmd_ArgParseString(self, argIndex, argString):
        pass

    def cmd_ArgResetAll(self):
        pass

    def cmd_ArgSetDatatypes(self):
        pass

    def cmd_ArgType(self, index):
        pass

    def cmd_ArgTypeDesc(self, index):
        pass

    def cmd_ArgTypeUserName(self, index):
        pass

    def cmd_ArgUserName(self, index):
        pass

    def cmd_ButtonName(self):
        pass

    def cmd_ContainedEnable(self):
        pass

    def cmd_Copy(self, sourceCommand):
        pass

    def cmd_Desc(self):
        pass

    def cmd_DialogArgChange(self, arg):
        pass

    def cmd_DialogFormatting(self):
        pass

    def cmd_DialogInit(self):
        pass

    def cmd_Enable(self, msg):
        pass

    def cmd_Example(self):
        pass

    def cmd_Execute(self, flags):
        pass

    def cmd_Flags(self):
        pass

    def cmd_Help(self):
        pass

    def cmd_Icon(self):
        pass

    def cmd_IconImage(self, w, h):
        pass

    def cmd_Interact(self):
        pass

    def cmd_Message(self):
        pass

    def cmd_Name(self):
        pass

    def cmd_NotifyAddClient(self, argument, object):
        pass

    def cmd_NotifyRemoveClient(self, object):
        pass

    def cmd_PostExecBehaviorFlags(self):
        pass

    def cmd_PostExecFlags(self):
        pass

    def cmd_PostExecHints(self):
        pass

    def cmd_PreExecute(self):
        pass

    def cmd_Query(self, index, vaQuery):
        pass

    def cmd_SandboxGUID(self):
        pass

    def cmd_Tag(self):
        pass

    def cmd_ToggleArg(self):
        pass

    def cmd_Tooltip(self):
        pass

    def cmd_UserName(self):
        pass



class CommandEvent:
    def cevt_Event(self, flags):
        pass



class CompShader:
    def csh_Cleanup(self, data):
        pass

    def csh_CustomPacket(self):
        pass

    def csh_Flags(self):
        pass

    def csh_LinkChannels(self, eval, item):
        pass

    def csh_SetOpaque(self):
        pass

    def csh_SetupChannels(self, addChan):
        pass



class Curve:
    def curve_BendCount(self):
        pass

    def curve_Closest(self, probe):
        pass

    def curve_Curvature(self):
        pass

    def curve_GetBBox(self):
        pass

    def curve_GuideCurveNormal(self, other):
        pass

    def curve_IsClosed(self):
        pass

    def curve_LenFraction(self):
        pass

    def curve_Length(self):
        pass

    def curve_MeshNormal(self, meshObj):
        pass

    def curve_Normal(self):
        pass

    def curve_Param(self):
        pass

    def curve_Position(self):
        pass

    def curve_SetLenFraction(self, frac):
        pass

    def curve_SetParam(self, param):
        pass

    def curve_SplineByIndex(self, index):
        pass

    def curve_SplineCount(self):
        pass

    def curve_SplineLengthByIndex(self, index):
        pass

    def curve_Tangent(self):
        pass

    def curve_WalkByAngle(self, start, end, angle, visitor):
        pass



class CurveGroup:
    def cgrp_ByIndex(self, index):
        pass

    def cgrp_Count(self):
        pass

    def cgrp_GetBBox(self):
        pass



class CustomMaterial:
    def cmt_Cleanup(self, data):
        pass

    def cmt_CustomPacket(self):
        pass

    def cmt_Flags(self):
        pass

    def cmt_IsSampleDriven(self):
        pass

    def cmt_LinkChannels(self, eval, item):
        pass

    def cmt_LinkSampleChannels(self, nodalEtor, item):
        pass

    def cmt_MaterialEvaluate(self, etor, vector, data):
        pass

    def cmt_SetBump(self):
        pass

    def cmt_SetDisplacement(self):
        pass

    def cmt_SetOpaque(self):
        pass

    def cmt_SetSmoothing(self):
        pass

    def cmt_SetupChannels(self, addChan):
        pass

    def cmt_UpdatePreview(self, chanIdx):
        pass



class CustomView:
    def customview_Cleanup(self, pane):
        pass

    def customview_Init(self, pane):
        pass

    def customview_RestoreState(self, pane):
        pass

    def customview_StoreState(self, pane):
        pass



class DTBBadgeOverride:
    def dtbbo_BadgeAction(self, entry, badge):
        pass

    def dtbbo_BadgeIsAlwaysVisible(self, entry, badge):
        pass

    def dtbbo_BadgeOverride(self, entry, badge):
        pass

    def dtbbo_BadgeStarRatingAction(self, entry, rating):
        pass

    def dtbbo_BadgeStarRatingOverride(self, entry):
        pass

    def dtbbo_BadgeTooltip(self, entry, badge):
        pass

    def dtbbo_BadgesSupported(self, entry):
        pass



class DTBGroupSortOverride:
    def gso_SetArguments(self, args):
        pass

    def gso_Sort(self, string1, string2):
        pass



class Deformation:
    def deform_Flags(self):
        pass

    def deform_OBSOLETE(self):
        pass

    def deform_OffsetF(self, position, weight):
        pass

    def deform_Transform(self):
        pass



class Deformer:
    def dinf_Element(self):
        pass

    def dinf_EnumeratePartition(self, visitor, part):
        pass

    def dinf_Flags(self):
        pass

    def dinf_Offset(self, elt, weight, pos):
        pass

    def dinf_PartitionCount(self):
        pass

    def dinf_SetPartition(self, part):
        pass

    def dinf_Weight(self, elt, pos):
        pass



class DirCacheFileMetrics:
    def dcfilemetrics_Flags(self):
        pass

    def dcfilemetrics_Markup(self):
        pass

    def dcfilemetrics_Metadata(self):
        pass



class DirCacheSynthetic:
    def dcsyn_Lookup(self, path):
        pass

    def dcsyn_Root(self):
        pass



class DirCacheSyntheticEntry:
    def dcsyne_DirBuild(self):
        pass

    def dcsyne_DirByIndex(self, listMode, index):
        pass

    def dcsyne_DirCount(self, listMode):
        pass

    def dcsyne_DirUsername(self):
        pass

    def dcsyne_FileExtension(self):
        pass

    def dcsyne_IsFile(self):
        pass

    def dcsyne_ModTime(self):
        pass

    def dcsyne_Name(self):
        pass

    def dcsyne_Path(self):
        pass

    def dcsyne_Size(self):
        pass



class DirEntryThumbAsync:
    def detasync_Failed(self, dirCacheEntry):
        pass

    def detasync_Ident(self):
        pass

    def detasync_Ready(self, dirCacheEntry, idealW, idealH, image):
        pass



class DrawingOverride:
    def drov_AffectedItems(self, scene, collection):
        pass

    def drov_CleanupContext(self):
        pass

    def drov_DrawVisitor(self, scene, view):
        pass

    def drov_Flags(self):
        pass

    def drov_InitContext(self):
        pass

    def drov_SetItem(self, item):
        pass



class Drop:
    def drop_ActionList(self, source, dest, addDropAction):
        pass

    def drop_Drop(self, source, dest, action):
        pass

    def drop_Preview(self, source, dest, action, draw):
        pass

    def drop_Recognize(self, source):
        pass



class EvalModifier:
    def eval_Alloc(self, item, index, eval):
        pass

    def eval_Next(self):
        pass

    def eval_Reset(self, scene):
        pass



class ExternalRender:
    def rend_Pause(self):
        pass

    def rend_Reset(self):
        pass

    def rend_SetBufferQueue(self, bufferQueue):
        pass

    def rend_SetNotifier(self, notifier):
        pass

    def rend_Start(self):
        pass

    def rend_Stop(self):
        pass



class ExternalRenderNotifier:
    def ntf_SetStatusText(self, text):
        pass



class Factory:
    def fac_InfoTag(self, type):
        pass

    def fac_Module(self):
        pass

    def fac_Name(self):
        pass

    def fac_Spawn(self):
        pass

    def fac_TagByIndex(self, index):
        pass

    def fac_TagCount(self):
        pass

    def fac_UserName(self):
        pass



class Falloff:
    def fall_Bounds(self):
        pass

    def fall_SetMesh(self, mesh):
        pass

    def fall_WeightF(self, position, point, polygon):
        pass



class FileDialogClient:
    def filedlg_ContextString(self):
        pass

    def filedlg_FileClass(self):
        pass

    def filedlg_FileFormat(self):
        pass

    def filedlg_Flags(self):
        pass

    def filedlg_ResultFormat(self, format):
        pass

    def filedlg_ResultPath(self, filepath):
        pass

    def filedlg_StartPath(self):
        pass

    def filedlg_Title(self, message):
        pass



class Force:
    def force_Flags(self):
        pass

    def force_Force(self, pos):
        pass

    def force_ForceM(self, pos, mass):
        pass

    def force_ForceV(self, pos, velocity):
        pass

    def force_ForceVM(self, pos, velocity, mass):
        pass



class FrameBuffer:
    def fbuf_AddAttribute(self, name, type):
        pass

    def fbuf_Alpha(self, index):
        pass

    def fbuf_AlphaIndex(self, index):
        pass

    def fbuf_AreaProcessingActive(self, bufferIndex):
        pass

    def fbuf_BucketsOnDisk(self, index):
        pass

    def fbuf_ByIndex(self, index):
        pass

    def fbuf_Count(self):
        pass

    def fbuf_CreateFrameBufferTargetImage(self, type, w, h):
        pass

    def fbuf_GetBloomEnabled(self, bufferIndex):
        pass

    def fbuf_GetBloomRadius(self, bufferIndex):
        pass

    def fbuf_GetBloomThreshold(self, bufferIndex):
        pass

    def fbuf_GetColorization(self, bufferIndex):
        pass

    def fbuf_GetExpType(self, bufferIndex):
        pass

    def fbuf_GetHueOffset(self, bufferIndex):
        pass

    def fbuf_GetISO(self, bufferIndex):
        pass

    def fbuf_GetInputBlackLevel(self, bufferIndex):
        pass

    def fbuf_GetInputBlueGrayLevel(self, bufferIndex):
        pass

    def fbuf_GetInputGrayLevel(self, bufferIndex):
        pass

    def fbuf_GetInputGreenGrayLevel(self, bufferIndex):
        pass

    def fbuf_GetInputMaxBlueLevel(self, bufferIndex):
        pass

    def fbuf_GetInputMaxGreenLevel(self, bufferIndex):
        pass

    def fbuf_GetInputMaxRedLevel(self, bufferIndex):
        pass

    def fbuf_GetInputMinBlueLevel(self, bufferIndex):
        pass

    def fbuf_GetInputMinGreenLevel(self, bufferIndex):
        pass

    def fbuf_GetInputMinRedLevel(self, bufferIndex):
        pass

    def fbuf_GetInputRedGrayLevel(self, bufferIndex):
        pass

    def fbuf_GetInputWhiteLevel(self, bufferIndex):
        pass

    def fbuf_GetInvInputBlueGrayLevel(self, bufferIndex):
        pass

    def fbuf_GetInvInputGrayLevel(self, bufferIndex):
        pass

    def fbuf_GetInvInputGreenGrayLevel(self, bufferIndex):
        pass

    def fbuf_GetInvInputRedGrayLevel(self, bufferIndex):
        pass

    def fbuf_GetOutputBlackLevel(self, bufferIndex):
        pass

    def fbuf_GetOutputColorspace(self):
        pass

    def fbuf_GetOutputGamma(self, bufferIndex):
        pass

    def fbuf_GetOutputInvGamma(self, bufferIndex):
        pass

    def fbuf_GetOutputMaxBlueLevel(self, bufferIndex):
        pass

    def fbuf_GetOutputMaxGreenLevel(self, bufferIndex):
        pass

    def fbuf_GetOutputMaxRedLevel(self, bufferIndex):
        pass

    def fbuf_GetOutputMinBlueLevel(self, bufferIndex):
        pass

    def fbuf_GetOutputMinGreenLevel(self, bufferIndex):
        pass

    def fbuf_GetOutputMinRedLevel(self, bufferIndex):
        pass

    def fbuf_GetOutputWhiteLevel(self, bufferIndex):
        pass

    def fbuf_GetRenderPassName(self, name):
        pass

    def fbuf_GetSaturation(self, bufferIndex):
        pass

    def fbuf_GetSaveProcessed(self, bufferIndex):
        pass

    def fbuf_GetStereoComposite(self):
        pass

    def fbuf_GetStereoEyeDisplay(self):
        pass

    def fbuf_GetTargetColor(self, bufferIndex):
        pass

    def fbuf_GetToneAmt(self, bufferIndex):
        pass

    def fbuf_GetToneMap(self, bufferIndex):
        pass

    def fbuf_GetVignetteAmount(self, bufferIndex):
        pass

    def fbuf_IsStereo(self):
        pass

    def fbuf_Lookup(self, name, item):
        pass

    def fbuf_LookupByIdentity(self, identity):
        pass

    def fbuf_SetBloomEnabled(self, bufferIndex, enabled):
        pass

    def fbuf_SetBloomRadius(self, bufferIndex, radius):
        pass

    def fbuf_SetBloomThreshold(self, bufferIndex, threshold):
        pass

    def fbuf_SetColorization(self, bufferIndex, colorization):
        pass

    def fbuf_SetExpType(self, bufferIndex, expType):
        pass

    def fbuf_SetEyeSide(self, eyeSide):
        pass

    def fbuf_SetHueOffset(self, bufferIndex, hueOffset):
        pass

    def fbuf_SetISO(self, bufferIndex, iso):
        pass

    def fbuf_SetInputBlackLevel(self, bufferIndex, blackLevel):
        pass

    def fbuf_SetInputBlueGrayLevel(self, bufferIndex, gamma):
        pass

    def fbuf_SetInputGrayLevel(self, bufferIndex, gamma):
        pass

    def fbuf_SetInputGreenGrayLevel(self, bufferIndex, gamma):
        pass

    def fbuf_SetInputMaxBlueLevel(self, bufferIndex, level):
        pass

    def fbuf_SetInputMaxGreenLevel(self, bufferIndex, level):
        pass

    def fbuf_SetInputMaxRedLevel(self, bufferIndex, level):
        pass

    def fbuf_SetInputMinBlueLevel(self, bufferIndex, level):
        pass

    def fbuf_SetInputMinGreenLevel(self, bufferIndex, level):
        pass

    def fbuf_SetInputMinRedLevel(self, bufferIndex, level):
        pass

    def fbuf_SetInputRedGrayLevel(self, bufferIndex, gamma):
        pass

    def fbuf_SetInputWhiteLevel(self, bufferIndex, whiteLevel):
        pass

    def fbuf_SetOutputBlackLevel(self, bufferIndex, blackLevel):
        pass

    def fbuf_SetOutputColormapping(self, colormapping):
        pass

    def fbuf_SetOutputColorspace(self, colorspace):
        pass

    def fbuf_SetOutputGamma(self, bufferIndex, gamma):
        pass

    def fbuf_SetOutputMaxBlueLevel(self, bufferIndex, whiteLevel):
        pass

    def fbuf_SetOutputMaxGreenLevel(self, bufferIndex, whiteLevel):
        pass

    def fbuf_SetOutputMaxRedLevel(self, bufferIndex, whiteLevel):
        pass

    def fbuf_SetOutputMinBlueLevel(self, bufferIndex, blackLevel):
        pass

    def fbuf_SetOutputMinGreenLevel(self, bufferIndex, blackLevel):
        pass

    def fbuf_SetOutputMinRedLevel(self, bufferIndex, blackLevel):
        pass

    def fbuf_SetOutputWhiteLevel(self, bufferIndex, whiteLevel):
        pass

    def fbuf_SetRenderPassName(self, name):
        pass

    def fbuf_SetSaturation(self, bufferIndex, saturation):
        pass

    def fbuf_SetSaveProcessed(self, bufferIndex, enabled):
        pass

    def fbuf_SetStereoComposite(self, composite):
        pass

    def fbuf_SetStereoEyeDisplay(self, eyeDisplay):
        pass

    def fbuf_SetTargetColor(self, bufferIndex, color):
        pass

    def fbuf_SetToneAmt(self, bufferIndex, toneAmt):
        pass

    def fbuf_SetToneMap(self, bufferIndex, toneMap):
        pass

    def fbuf_SetVignetteAmount(self, bufferIndex, radius):
        pass

    def fbuf_Size(self, index):
        pass



class GLViewportClient:
    def glclient_Invalidate(self):
        pass

    def glclient_MouseButton(self):
        pass

    def glclient_MouseCount(self):
        pass

    def glclient_MousePosition(self):
        pass

    def glclient_TabletPressure(self):
        pass

    def glclient_TabletTilt(self):
        pass



class GradientFilter:
    def grfilt_Evaluate(self, time, value):
        pass

    def grfilt_Generate(self, time):
        pass

    def grfilt_MultiSample(self, time, other):
        pass

    def grfilt_Type(self):
        pass



class GroupDest:
    def grpd_Group(self):
        pass

    def grpd_Location(self):
        pass



class GroupMemberChanDest:
    def grpmcd_Channel(self):
        pass

    def grpmcd_Group(self):
        pass

    def grpmcd_Location(self):
        pass



class GroupMemberItemDest:
    def grpmid_Group(self):
        pass

    def grpmid_Item(self):
        pass

    def grpmid_Location(self):
        pass



class Image:
    def img_Format(self):
        pass

    def img_GetLine(self, y, type, buf):
        pass

    def img_GetPixel(self, x, y, type, pixel):
        pass

    def img_Size(self):
        pass



class ImageBlockCodec:
    pass


class ImageFilter:
    def imf_Generate(self, width, height, monitor):
        pass

    def imf_MultiSample(self, monitor, image):
        pass

    def imf_SingleSample(self, src):
        pass

    def imf_SingleSampleN(self, src, num):
        pass

    def imf_Type(self):
        pass



class ImageFilterMetrics:
    pass


class ImageLevelSample:
    def level_Count(self):
        pass

    def level_GetLevelSize(self, level):
        pass

    def level_GetLine(self, level, y, buf):
        pass

    def level_GetPixel(self, level, x, y, type, pixel):
        pass



class ImageMonitor:
    def imon_AspectRange(self):
        pass

    def imon_Draw(self, imageForDrawing):
        pass

    def imon_Image(self, imageToAnalyze, frameBufferToAnalyze, bufferIndex, x1, y1, x2, y2, imageProcessingRead, processedThumbnail):
        pass

    def imon_ImageProcChanged(self):
        pass

    def imon_ImageSource(self, source):
        pass

    def imon_MouseDown(self, startx, starty, w, h):
        pass

    def imon_MouseMove(self, startx, starty, cx, cy, w, h):
        pass

    def imon_MouseTrack(self, cx, cy, w, h):
        pass

    def imon_MouseTrackEnter(self):
        pass

    def imon_MouseTrackExit(self):
        pass

    def imon_MouseUp(self, startx, starty, cx, cy, w, h):
        pass

    def imon_ToolTip(self, cx, cy, w, h):
        pass



class ImageProcessingListener:
    def improl_Changed(self, identifier, eventCode):
        pass

    def improl_Reset(self, identifier):
        pass



class ImageSegment:
    def imgs_GetSegment(self, y, left, right, rgba):
        pass

    def imgs_SetSegment(self, y, left, right, type, line):
        pass



class ImageWrite:
    def imgw_AddAttribute(self, name, type):
        pass

    def imgw_Format(self):
        pass

    def imgw_SetLine(self, y, type, line):
        pass

    def imgw_SetPixel(self, x, y, type, pixel):
        pass

    def imgw_Size(self):
        pass



class InputDeviceInstance:
    def indevinst_AnalogCount(self):
        pass

    def indevinst_AnalogMetrics(self, index):
        pass

    def indevinst_AnalogName(self, index):
        pass

    def indevinst_AnalogUserName(self, index):
        pass

    def indevinst_AnalogValue(self, index):
        pass

    def indevinst_ButtonCount(self):
        pass

    def indevinst_ButtonIsDown(self, index):
        pass

    def indevinst_ButtonName(self, index):
        pass

    def indevinst_ButtonUserName(self, index):
        pass

    def indevinst_IsConnected(self):
        pass

    def indevinst_Name(self, name):
        pass



class InputDevices:
    def indev_DeviceCount(self):
        pass

    def indev_DeviceInstanceByIndex(self, index):
        pass

    def indev_DeviceNameByIndex(self, index, name):
        pass



class InstanceAssets:
    def instass_Category(self, index):
        pass

    def instass_Count(self):
        pass

    def instass_GetPath(self, ident):
        pass

    def instass_IdentByIndex(self, index):
        pass

    def instass_SetPath(self, ident, newPath):
        pass



class Instanceable:
    def instable_AddElements(self, tableau, instT0, instT1):
        pass

    def instable_Compare(self, other):
        pass

    def instable_GetSurface(self):
        pass



class ItemInfluence:
    def iinf_AllowTransform(self, index):
        pass

    def iinf_Enumerate(self, visitor):
        pass

    def iinf_GetItem(self):
        pass

    def iinf_HasItems(self):
        pass



class ItemListType:
    def ilt_GenerateList(self, scene, collection):
        pass

    def ilt_SetArgument(self, arg):
        pass

    def ilt_SetRootItem(self, item):
        pass



class ItemReplacement:
    def itemrep_NotifierByIndex(self, itemType, channelName, index):
        pass

    def itemrep_NotifierCount(self, itemType, channelName):
        pass

    def itemrep_ReplaceItems(self, current, replacement, targetType):
        pass

    def itemrep_Types(self, curType):
        pass



class ItemTypeDest:
    def ityped_Item(self):
        pass

    def ityped_Location(self):
        pass



class LayeredImage:
    def limg_Blend(self, index):
        pass

    def limg_ChannelName(self, layerIndex, channelIndex):
        pass

    def limg_Count(self):
        pass

    def limg_Image(self, index):
        pass

    def limg_IsGroup(self, layerIndex):
        pass

    def limg_Name(self, index):
        pass

    def limg_Offset(self, index):
        pass

    def limg_Parent(self, layerIndex):
        pass

    def limg_Size(self):
        pass

    def limg_Type(self, index):
        pass



class LayeredImageWrite:
    def limgw_AddAttribute(self, name, type):
        pass

    def limgw_AddLayer(self, image, name):
        pass

    def limgw_SetBlending(self, index, blend, mode):
        pass

    def limgw_SetOffset(self, index, x, y):
        pass

    def limgw_SetType(self, index, flags, type):
        pass



class LineExecution:
    def lin_CookedLine(self, text):
        pass

    def lin_Info(self, text):
        pass

    def lin_Message(self, message):
        pass

    def lin_ResultHints(self, hints):
        pass

    def lin_Results(self, valArray):
        pass



class LineInterpreter:
    def lin_Execute(self, line, execFlags, execution):
        pass

    def lin_Flags(self):
        pass

    def lin_Prompt(self, type):
        pass



class ListenerPort:
    def lport_AddListener(self, object):
        pass

    def lport_RemoveListener(self, object):
        pass



class Loader:
    def load_Cleanup(self):
        pass

    def load_LoadInstance(self, loadInfo, monitor):
        pass

    def load_LoadObject(self, loadInfo, monitor, dest):
        pass

    def load_Recognize(self, filename, loadInfo):
        pass

    def load_SpawnOptions(self):
        pass



class LoaderInfo:
    def linf_SetClass(self, clsGUID):
        pass

    def linf_SetFlags(self, flags):
        pass

    def linf_SetFormat(self, format):
        pass

    def linf_TestClass(self, clsGUID):
        pass



class LocatorDest:
    def locd_Item(self):
        pass

    def locd_Location(self):
        pass



class LogInfoBlock:
    def lb_FieldCount(self):
        pass

    def lb_FieldName(self, index):
        pass

    def lb_FieldType(self, index):
        pass

    def lb_Name(self):
        pass



class LogListener:
    def logevent_ChildEntryAdded(self, entry, parentEntry):
        pass

    def logevent_EntryAdded(self, system, entry):
        pass

    def logevent_EntryDropped(self, system, entry):
        pass

    def logevent_RollingChildEntryAdded(self, entry, parentEntry):
        pass

    def logevent_RollingEntryAdded(self, system, entry):
        pass

    def logevent_RollingEntryDropped(self, system, entry):
        pass

    def logevent_SystemAdded(self, system):
        pass



class MeshDest:
    def meshd_HitNormal(self):
        pass

    def meshd_HitPosition(self):
        pass

    def meshd_Item(self):
        pass



class MeshElementGroup:
    def eltgrp_GroupCount(self):
        pass

    def eltgrp_GroupName(self, index):
        pass

    def eltgrp_GroupUserName(self, index):
        pass

    def eltgrp_TestEdge(self, index, edge):
        pass

    def eltgrp_TestPoint(self, index, point):
        pass

    def eltgrp_TestPolygon(self, index, polygon):
        pass



class MeshFilter:
    def mfilt_Evaluate(self, mesh, tracker):
        pass

    def mfilt_Generate(self):
        pass

    def mfilt_Type(self):
        pass



class MeshFilterBBox:
    def mfbbox_Evaluate(self):
        pass



class MeshInfluence:
    def minf_MeshByIndex(self, index):
        pass

    def minf_MeshChange(self, index, change):
        pass

    def minf_MeshCount(self):
        pass

    def minf_PartitionIndex(self, index):
        pass

    def minf_SetMesh(self, index, mesh, item):
        pass

    def minf_SetTransform(self, index):
        pass



class MeshLayerPreDest:
    def mlpd_Mesh(self):
        pass

    def mlpd_ShaderDest(self):
        pass

    def mlpd_Transform(self):
        pass



class MeshListener:
    def ml_Changes(self, event):
        pass

    def ml_Destroy(self):
        pass



class MeshMetaData:
    def meta_FreePointData(self, data):
        pass

    def meta_FreePolygonData(self, data):
        pass

    def meta_Validate(self, mesh, xtra, change):
        pass



class MeshOpDest:
    def locd_Graph(self):
        pass

    def locd_Item(self):
        pass

    def locd_ItemDeformer(self):
        pass

    def locd_Location(self):
        pass



class MeshOperation:
    def mop_Blend(self, other, blend):
        pass

    def mop_Clone(self, target):
        pass

    def mop_Compare(self, other):
        pass

    def mop_Convert(self, other):
        pass

    def mop_Evaluate(self, mesh, type, mode):
        pass

    def mop_ReEvaluate(self, mesh, type):
        pass

    def mop_SetTransform(self, matrix):
        pass



class Message:
    def msg_Code(self):
        pass

    def msg_Name(self):
        pass

    def msg_Reset(self):
        pass

    def msg_SetArgumentFloat(self, arg, value):
        pass

    def msg_SetArgumentInt(self, arg, value):
        pass

    def msg_SetArgumentObject(self, arg, object):
        pass

    def msg_SetArgumentString(self, arg, string):
        pass

    def msg_SetCode(self, code):
        pass

    def msg_SetMessage(self, table, name, id):
        pass

    def msg_SetMessageResult(self, id):
        pass

    def msg_Table(self):
        pass



class Modifier:
    def mod_Evaluate(self):
        pass

    def mod_Free(self, cache):
        pass

    def mod_Invalidate(self, item, index):
        pass

    def mod_Required(self, index):
        pass

    def mod_RequiredCount(self):
        pass

    def mod_Test(self, item, index):
        pass

    def mod_Validate(self, item, index, rc):
        pass



class Module:
    def mod_Generate(self, name, iid):
        pass

    def mod_GetTags(self, name, iid):
        pass



class Monitor:
    def mon_Increment(self, count):
        pass

    def mon_Initialize(self, count):
        pass



class Movie:
    def mov_AddAudio(self, audio):
        pass

    def mov_AddImage(self, image):
        pass

    def mov_BeginMovie(self, fname, w, h, flags):
        pass

    def mov_EndMovie(self):
        pass

    def mov_SetFramerate(self, frate):
        pass



class NavigationListener:
    def nav_Delta(self, view, item, hot, pos, rot, zoom):
        pass

    def nav_Down(self, view, item):
        pass

    def nav_HotSyncPost(self, view, item):
        pass

    def nav_HotSyncPre(self, view, item):
        pass

    def nav_Move(self, view, item, hot, pos, rot, zoom):
        pass

    def nav_Up(self, view, item):
        pass

    def nav_Wheel(self, view, item):
        pass



class NeedContext:
    def need_SetContext(self, app):
        pass



class Notifier:
    def noti_AddClient(self, object):
        pass

    def noti_Args(self):
        pass

    def noti_Name(self):
        pass

    def noti_RemoveClient(self, object):
        pass

    def noti_SetArgs(self, args):
        pass



class Object:
    def obj_AddObserver(self, visitor):
        pass

    def obj_Identifier(self):
        pass

    def obj_InterfaceByIndex(self, index):
        pass

    def obj_InterfaceCount(self):
        pass

    def obj_RemoveObserver(self, visitor):
        pass



class Package:
    def pkg_Attach(self):
        pass

    def pkg_CollectItems(self, collection, mode):
        pass

    def pkg_PostLoad(self, scene):
        pass

    def pkg_SetupChannels(self, addChan):
        pass

    def pkg_TestInterface(self, guid):
        pass



class PackageInstance:
    def pins_Add(self):
        pass

    def pins_AfterLoad(self):
        pass

    def pins_Cleanup(self):
        pass

    def pins_Doomed(self):
        pass

    def pins_DupType(self):
        pass

    def pins_Initialize(self, item, super):
        pass

    def pins_Loading(self):
        pass

    def pins_Newborn(self, original, flags):
        pass

    def pins_Remove(self):
        pass

    def pins_SynthName(self):
        pass

    def pins_TestParent(self, item):
        pass



class PacketEffect:
    def pfx_ByIndex(self, index):
        pass

    def pfx_Count(self):
        pass

    def pfx_Get(self, index, packet, item):
        pass

    def pfx_Packet(self):
        pass

    def pfx_Set(self, index, packet, val, item):
        pass



class ParticleCoOperator:
    def pcoi_Cleanup(self):
        pass

    def pcoi_Initialize(self, eval):
        pass

    def pcoi_Particle(self):
        pass

    def pcoi_Step(self, dT):
        pass



class ParticleFilter:
    def pfilt_Cleanup(self):
        pass

    def pfilt_Flags(self):
        pass

    def pfilt_Frame(self, stage):
        pass

    def pfilt_Initialize(self, vertex, frame, time):
        pass

    def pfilt_Particle(self, stage, vertex):
        pass

    def pfilt_Step(self, other, dt):
        pass

    def pfilt_Vertex(self, full):
        pass



class ParticleGeneratorPacket:
    def partgen_Count(self, vts):
        pass



class ParticleItem:
    def prti_Evaluate(self, attr, index):
        pass

    def prti_Prepare(self, eval):
        pass



class PathGeneratorPacket:
    def pathgen_Bank(self, vts, t):
        pass

    def pathgen_Count(self, vts):
        pass

    def pathgen_Current(self, vts):
        pass

    def pathgen_KnotDataSet(self, gen):
        pass

    def pathgen_Length(self, vts, t0, t1):
        pass

    def pathgen_Tangent(self, vts, t):
        pass

    def pathgen_Value(self, vts, t):
        pass

    def pathgen_Walk(self, vts, pathStep, angle, ti, tf):
        pass



class PersistenceClient:
    def cc_Setup(self):
        pass

    def cc_SyncRead(self):
        pass

    def cc_SyncWrite(self):
        pass



class PointCacheItem:
    def pcache_Cleanup(self):
        pass

    def pcache_Initialize(self, vdesc, attr, index, time, sample):
        pass

    def pcache_Prepare(self, eval):
        pass

    def pcache_SaveFrame(self, pobj, time):
        pass



class PresetDo:
    def pdo_Do(self, path):
        pass

    def pdo_Test(self, path):
        pass



class PresetMetrics:
    def pmet_Flags(self):
        pass

    def pmet_Markup(self):
        pass

    def pmet_Metadata(self):
        pass

    def pmet_ThumbnailIdealSize(self):
        pass

    def pmet_ThumbnailImage(self):
        pass

    def pmet_ThumbnailResource(self):
        pass



class PresetType:
    def ptyp_Apply(self, path, destination):
        pass

    def ptyp_BaseAspect(self):
        pass

    def ptyp_DefaultThumbnail(self, path):
        pass

    def ptyp_Do(self, path):
        pass

    def ptyp_DoCommandFlags(self, path):
        pass

    def ptyp_GenericThumbnailResource(self, path):
        pass

    def ptyp_Metrics(self, path, flags, w, h, prevMetrics):
        pass

    def ptyp_Recognize(self, path):
        pass

    def ptyp_StoreMarkup(self, path, attr):
        pass

    def ptyp_StoreThumbnail(self, path, image):
        pass



class PreviewNotifier:
    pass


class Profile1DPreDest:
    def p1pd_Box(self):
        pass

    def p1pd_Count(self):
        pass

    def p1pd_CurveTo(self, x0, y0, x1, y1, x2, y2):
        pass

    def p1pd_Evaluate(self, t, flags, axis):
        pass

    def p1pd_LineTo(self, x, y):
        pass

    def p1pd_MoveTo(self, x, y):
        pass

    def p1pd_PathSteps(self, tol, flags, x, y, nstep):
        pass

    def p1pd_SelectByIndex(self, index):
        pass

    def p1pd_SelectByParameter(self, t):
        pass



class Profile2DPreDest:
    def p2pd_Box(self):
        pass

    def p2pd_Closed(self, closed):
        pass

    def p2pd_Count(self):
        pass

    def p2pd_CurveTo(self, x0, y0, x1, y1, x2, y2):
        pass

    def p2pd_LineTo(self, x, y):
        pass

    def p2pd_MoveTo(self, x, y):
        pass

    def p2pd_NewPath(self):
        pass

    def p2pd_SelectByIndex(self, index):
        pass



class ProjDirOverride:
    def pdo_OverrideWith(self, originalPath):
        pass



class Raymarch:
    def rmrch_GetOpacity(self, vector, dist):
        pass

    def rmrch_Jitter1D(self, vector):
        pass

    def rmrch_ShaderEvaluate(self, vector, shader):
        pass



class RenderCacheListener:
    def rli_GeoCacheSurfaceAdd(self, geoSrf):
        pass

    def rli_GeoCacheSurfaceGeoUpdate(self, geoSrf):
        pass

    def rli_GeoCacheSurfaceRemove(self, geoSrf):
        pass

    def rli_GeoCacheSurfaceShaderUpdate(self, geoSrf):
        pass

    def rli_GeoCacheSurfaceXformUpdate(self, geoSrf):
        pass

    def rli_RenderCacheClear(self):
        pass

    def rli_RenderCacheDestroy(self):
        pass

    def rli_UpdateBegin(self):
        pass

    def rli_UpdateEnd(self):
        pass



class RenderJob:
    def rjob_ActionName(self):
        pass

    def rjob_FrameBufferRegionBackgroundSlot(self):
        pass

    def rjob_FrameBufferSlot(self):
        pass

    def rjob_GroupName(self):
        pass

    def rjob_Options(self):
        pass

    def rjob_OutputFilename(self):
        pass

    def rjob_OutputFormat(self):
        pass

    def rjob_ProgressAborted(self):
        pass

    def rjob_ProgressBegin(self, renderStats):
        pass

    def rjob_ProgressBucketBegin(self, row, col):
        pass

    def rjob_ProgressBucketEnd(self, row, col, code):
        pass

    def rjob_ProgressEnd(self, finalFrameBuffer, finalStats):
        pass

    def rjob_ProgressFrameBegin(self, frame, w, h):
        pass

    def rjob_ProgressFrameEnd(self, frame, stats):
        pass

    def rjob_ProgressFramePassBegin(self, frame, renderPass, eye, pass_int):
        pass

    def rjob_ProgressFramePassEnd(self, frame, renderPass, eye, pass_int):
        pass

    def rjob_ProgressImage(self, img):
        pass

    def rjob_ProgressImageMetrics(self, resX, resH):
        pass

    def rjob_ProgressImageUpdated(self):
        pass

    def rjob_ProgressPercentDone(self, progressScene, progressFrame, progressRenderPass):
        pass

    def rjob_ProgressRenderPassBegin(self, frameIndex, renderPassIndex, renderPassName, eye):
        pass

    def rjob_ProgressRenderPassEnd(self, frame, renderPassIndex, renderPassName, eye, frameBuffer, stats):
        pass

    def rjob_ProgressString(self, infoString, userString):
        pass

    def rjob_ProgressTickle(self):
        pass

    def rjob_RenderAs(self):
        pass

    def rjob_RenderAtTime(self):
        pass

    def rjob_RenderBakeCageVMap(self):
        pass

    def rjob_RenderBakeEffect(self):
        pass

    def rjob_RenderBakeFromRGBA(self):
        pass

    def rjob_RenderBakeImage(self):
        pass

    def rjob_RenderBakeLookDistance(self):
        pass

    def rjob_RenderBakeToRGBA(self):
        pass

    def rjob_RenderBakeVMap(self):
        pass

    def rjob_RenderItem(self):
        pass

    def rjob_RenderTurntableFPS(self):
        pass

    def rjob_RenderTurntableNumFrames(self):
        pass

    def rjob_TestItem(self, item, eval):
        pass

    def rjob_UDIM(self):
        pass



class RenderProgressListener:
    def rndprog_Begin(self):
        pass

    def rndprog_End(self, stats):
        pass



class Saver:
    def sav_Save(self, source, filename, monitor):
        pass

    def sav_Verify(self, source, message):
        pass



class SceneEvalListener:
    def sel_ChannelPostValue(self):
        pass

    def sel_ChannelPreValue(self):
        pass

    def sel_ChannelValue(self, item, index):
        pass



class SceneItemListener:
    def sil_ChanLinkAdd(self, graph, itemFrom, chanFrom, itemTo, chanTo):
        pass

    def sil_ChanLinkRemAfter(self, graph, itemFrom, chanFrom, itemTo, chanTo):
        pass

    def sil_ChanLinkRemBefore(self, graph, itemFrom, chanFrom, itemTo, chanTo):
        pass

    def sil_ChanLinkSet(self, graph, itemFrom, chanFrom, itemTo, chanTo):
        pass

    def sil_ChannelValue(self, action, item, index):
        pass

    def sil_ItemAdd(self, item):
        pass

    def sil_ItemAddChannel(self, item):
        pass

    def sil_ItemChannelDefault(self, item, index):
        pass

    def sil_ItemChannelMinMax(self, item, index):
        pass

    def sil_ItemChannelName(self, item, index):
        pass

    def sil_ItemChannelType(self, item, index):
        pass

    def sil_ItemChild(self, item):
        pass

    def sil_ItemLocal(self, item):
        pass

    def sil_ItemName(self, item):
        pass

    def sil_ItemPackage(self, item):
        pass

    def sil_ItemParent(self, item):
        pass

    def sil_ItemPostDelete(self, scene):
        pass

    def sil_ItemPreChange(self, scene):
        pass

    def sil_ItemRemove(self, item):
        pass

    def sil_ItemRemoveChannel(self, item):
        pass

    def sil_ItemSource(self, item):
        pass

    def sil_ItemTag(self, item):
        pass

    def sil_LinkAdd(self, graph, itemFrom, itemTo):
        pass

    def sil_LinkRemAfter(self, graph, itemFrom, itemTo):
        pass

    def sil_LinkRemBefore(self, graph, itemFrom, itemTo):
        pass

    def sil_LinkSet(self, graph, itemFrom, itemTo):
        pass

    def sil_SceneClear(self, scene):
        pass

    def sil_SceneCreate(self, scene):
        pass

    def sil_SceneDestroy(self, scene):
        pass

    def sil_SceneFilename(self, scene, filename):
        pass



class SceneItemPreDest:
    def sipd_ContainerItem(self):
        pass

    def sipd_Item(self):
        pass

    def sipd_Orientation(self):
        pass

    def sipd_Position(self):
        pass

    def sipd_Scene(self):
        pass



class SceneSubset:
    def scnsub_GetCollection(self):
        pass

    def scnsub_GetScene(self):
        pass



class SchemaDest:
    def schmd_Channel(self):
        pass

    def schmd_Graph(self):
        pass

    def schmd_Group(self):
        pass

    def schmd_Item(self):
        pass

    def schmd_Link(self):
        pass

    def schmd_Node(self):
        pass

    def schmd_Position(self):
        pass

    def schmd_ViewType(self):
        pass



class SchematicConnection:
    def schm_AllowConnect(self, from_obj, to_obj):
        pass

    def schm_AllowConnectType(self, to_obj, type):
        pass

    def schm_BaseFlags(self):
        pass

    def schm_ByIndex(self, item, index):
        pass

    def schm_ChannelAllowConnect(self, from_obj, fromIndex, to_obj, toIndex):
        pass

    def schm_ChannelByIndex(self, xItem, fromIndex, index):
        pass

    def schm_ChannelConnect(self, from_obj, fromIndex, to_obj, toIndex):
        pass

    def schm_ChannelCount(self, xItem, fromIndex):
        pass

    def schm_ChannelDisconnect(self, from_obj, fromIndex, to_obj, toIndex):
        pass

    def schm_ChannelIOType(self):
        pass

    def schm_Connect(self, from_obj, to_obj, toIndex):
        pass

    def schm_Count(self, item):
        pass

    def schm_Disconnect(self, from_obj, to_obj):
        pass

    def schm_GraphName(self):
        pass

    def schm_ItemFlags(self, item):
        pass

    def schm_ItemFlagsValid(self):
        pass

    def schm_PerItemFlags(self, item):
        pass



class Script:
    def scr_Desc(self):
        pass

    def scr_GetBuffer(self):
        pass

    def scr_Hash(self):
        pass

    def scr_HelpKey(self, args):
        pass

    def scr_Icon(self):
        pass

    def scr_Manager(self):
        pass

    def scr_SetBuffer(self, buffer, bufferLength):
        pass

    def scr_SetDesc(self, desc):
        pass

    def scr_SetUserName(self, userName):
        pass

    def scr_UserName(self):
        pass



class ScriptLineEvent:
    def slev_Index(self):
        pass

    def slev_Script(self):
        pass



class ScriptManager:
    def scman_ByIndex(self, index, write):
        pass

    def scman_Count(self):
        pass

    def scman_Flags(self):
        pass

    def scman_Lookup(self, hash, write, tryAsUserName):
        pass

    def scman_Name(self):
        pass

    def scman_New(self, name):
        pass

    def scman_ReadWrite(self, hash, index):
        pass

    def scman_Remove(self, script):
        pass

    def scman_Run(self, script, execFlags, args, msg):
        pass

    def scman_Validate(self, script, msg):
        pass



class ScriptQuery:
    def sq_Query(self, attribute, query):
        pass

    def sq_Select(self, attribute, which):
        pass

    def sq_Type(self, attribute):
        pass

    def sq_TypeName(self, attribute):
        pass



class SelectionListener:
    def selevent_Add(self, type, subtType):
        pass

    def selevent_Current(self, type):
        pass

    def selevent_Remove(self, type, subtType):
        pass

    def selevent_Time(self, time):
        pass

    def selevent_TimeRange(self, type):
        pass



class SelectionOperation:
    def selop_Evaluate(self, type, state):
        pass

    def selop_SetMesh(self, mesh):
        pass

    def selop_SetTransform(self):
        pass

    def selop_TestEdge(self, edge):
        pass

    def selop_TestPoint(self, point):
        pass

    def selop_TestPolygon(self, polygon):
        pass



class SelectionType:
    def seltyp_Compare(self, pkey, pelt):
        pass

    def seltyp_Flags(self):
        pass

    def seltyp_MessageTable(self):
        pass

    def seltyp_Size(self):
        pass

    def seltyp_SubType(self, pkt):
        pass



class ServiceExtension:
    def ser_Dummy(self):
        pass



class SessionListener:
    def sesl_BeforeStartupCommands(self):
        pass

    def sesl_CheckQuitUI(self, quitWasAborted):
        pass

    def sesl_FirstWindowOpening(self):
        pass

    def sesl_LastWindowClosed(self):
        pass

    def sesl_QuittingUI(self):
        pass

    def sesl_ShuttingDown(self):
        pass

    def sesl_SystemReady(self):
        pass



class ShaderDest:
    def locd_Item(self):
        pass

    def locd_Location(self):
        pass

    def locd_Type(self):
        pass



class ShaderPreDest:
    def spd_ContainerItem(self):
        pass

    def spd_GetTag(self, type):
        pass

    def spd_HitItem(self):
        pass

    def spd_Item(self):
        pass

    def spd_Mode(self):
        pass

    def spd_Scene(self):
        pass



class SharedWork:
    def share_Evaluate(self):
        pass

    def share_Share(self, other, split):
        pass

    def share_Spawn(self):
        pass



class SimulationModifier:
    def sim_Bake(self, time):
        pass

    def sim_Cleanup(self):
        pass

    def sim_Enabled(self, chanRead):
        pass

    def sim_Initialize(self, time, sample):
        pass

    def sim_Step(self, dt):
        pass

    def sim_StepSize(self):
        pass



class StackFilter:
    def filt_Compare(self, other):
        pass

    def filt_Convert(self, other):
        pass

    def filt_Identifier(self):
        pass

    def filt_Type(self):
        pass



class StreamIO:
    def io_Read(self, stream):
        pass

    def io_Write(self, stream):
        pass



class StringConversion:
    def str_Decode(self, buf):
        pass

    def str_Encode(self):
        pass



class StringConversionNice:
    def nicestr_Decode(self, buf):
        pass

    def nicestr_Encode(self):
        pass



class StringTag:
    def stag_ByIndex(self, index):
        pass

    def stag_Count(self):
        pass

    def stag_Get(self, type):
        pass

    def stag_Set(self, type, tag):
        pass



class Subdivision:
    def subdiv_Adaptive(self):
        pass

    def subdiv_AddUVMap(self, name):
        pass

    def subdiv_Backend(self):
        pass

    def subdiv_BoundaryRule(self):
        pass

    def subdiv_ChildFace(self, faceIndex, vertOfFace):
        pass

    def subdiv_FaceDepth(self, faceIndex):
        pass

    def subdiv_FirstFaceOffset(self, level):
        pass

    def subdiv_FirstVertexOffset(self, level):
        pass

    def subdiv_GetUV(self, mapIndex, faceIndex, vertOfFace):
        pass

    def subdiv_InvalidatePosition(self):
        pass

    def subdiv_InvalidateTopology(self):
        pass

    def subdiv_LookupUVMap(self, name):
        pass

    def subdiv_MaxLevel(self):
        pass

    def subdiv_NumFaces(self):
        pass

    def subdiv_NumLevelFaces(self, level):
        pass

    def subdiv_NumLevelVertices(self, level):
        pass

    def subdiv_NumUVMap(self):
        pass

    def subdiv_NumVertices(self):
        pass

    def subdiv_NumVerticesOfFace(self, faceIndex):
        pass

    def subdiv_ParentFace(self, faceIndex):
        pass

    def subdiv_ParentVertex(self, vertIndex):
        pass

    def subdiv_Refine(self, mesh):
        pass

    def subdiv_Scheme(self):
        pass

    def subdiv_SetAdaptive(self, adaptive):
        pass

    def subdiv_SetBackend(self, backend):
        pass

    def subdiv_SetBoundaryRule(self, bound):
        pass

    def subdiv_SetMaxLevel(self, level):
        pass

    def subdiv_SetScheme(self, scheme):
        pass

    def subdiv_SetUVBoundaryRule(self, bound):
        pass

    def subdiv_Status(self):
        pass

    def subdiv_UVBoundaryRule(self):
        pass

    def subdiv_UVMapName(self, mapIndex):
        pass

    def subdiv_Validate(self, mesh):
        pass

    def subdiv_VertexNormal(self, vertIndex):
        pass

    def subdiv_VertexOfFace(self, faceIndex, vertofface):
        pass

    def subdiv_VertexPosition(self, vertIndex):
        pass



class Surface:
    def surf_BinByIndex(self, index):
        pass

    def surf_BinCount(self):
        pass

    def surf_FrontBBox(self, pos, dir):
        pass

    def surf_GLCount(self):
        pass

    def surf_GetBBox(self):
        pass

    def surf_TagByIndex(self, type, index):
        pass

    def surf_TagCount(self, type):
        pass



class SurfaceBin:
    def surfbin_FrontBBox(self, pos, dir):
        pass

    def surfbin_GetBBox(self):
        pass



class SurfaceItem:
    def isurf_Evaluate(self, attr, index):
        pass

    def isurf_GetSurface(self, chanRead, morph):
        pass

    def isurf_Prepare(self, eval):
        pass



class TableauInstance:
    def tins_GetDissolve(self):
        pass

    def tins_GetTransform(self, endPoint):
        pass

    def tins_ParticleArray(self):
        pass

    def tins_ParticleDescription(self):
        pass

    def tins_Properties(self, vecstack):
        pass



class TableauLight:
    def tlgt_Bound(self):
        pass

    def tlgt_FeatureByIndex(self, type, index):
        pass

    def tlgt_FeatureCount(self, type):
        pass

    def tlgt_Geometry(self, gc):
        pass

    def tlgt_Sample(self, u, v, dir, t):
        pass

    def tlgt_SetVertex(self, vdesc):
        pass

    def tlgt_ShadowMap(self):
        pass



class TableauListener:
    def tli_ChannelChange(self, tableau, item, channel):
        pass

    def tli_FlushElements(self, tableau):
        pass

    def tli_TableauDestroy(self, tableau):
        pass



class TableauProxy:
    def tpro_Bound(self):
        pass

    def tpro_FeatureByIndex(self, type, index):
        pass

    def tpro_FeatureCount(self, type):
        pass

    def tpro_Sample(self, bbox, tableau):
        pass

    def tpro_SetVertex(self, vdesc):
        pass



class TableauShader:
    def tsha_Select(self, teElt, tvDesc):
        pass

    def tsha_Slice(self, vtOutput, tvDesc):
        pass



class TableauSource:
    def tsrc_ElementType(self, type):
        pass

    def tsrc_Elements(self, tableau):
        pass

    def tsrc_GetCurves(self, tableau, tags):
        pass

    def tsrc_Instance(self, tableau, instance):
        pass

    def tsrc_Preview(self, tableau):
        pass

    def tsrc_PreviewUpdate(self, chanIndex):
        pass

    def tsrc_SubShader(self, tableau):
        pass



class TableauSurface:
    def tsrf_Bound(self):
        pass

    def tsrf_FeatureByIndex(self, type, index):
        pass

    def tsrf_FeatureCount(self, type):
        pass

    def tsrf_Padding(self):
        pass

    def tsrf_Sample(self, bbox, scale, trisoup):
        pass

    def tsrf_SegmentBox(self, segID):
        pass

    def tsrf_SetVertex(self, vdesc):
        pass



class TableauVolume:
    def tvol_Bound(self):
        pass

    def tvol_Density(self, densitySlice, sv, raycastObj, pos, worldPos):
        pass

    def tvol_FeatureByIndex(self, type, index):
        pass

    def tvol_FeatureCount(self, type):
        pass

    def tvol_RayCast(self, densitySlice, sv, raycastObj):
        pass

    def tvol_RaySample(self, densitySlice, shadingSlice, sv, raycastObj, raymarchObj):
        pass

    def tvol_RenderInit(self, sv):
        pass

    def tvol_SetVertex(self, vdesc):
        pass

    def tvol_Type(self):
        pass



class TagDescription:
    def tag_Count(self):
        pass



class TextScriptInterpreter:
    def tsi_Run(self, script, execFlags, args, msg):
        pass

    def tsi_Validate(self, script, msg):
        pass

    def tsi_ValidateFileType(self, script, firstLine):
        pass



class TextureEffect:
    def tfx_Get(self, sv, item):
        pass

    def tfx_Set(self, sv, val, item):
        pass

    def tfx_Type(self):
        pass

    def tfx_TypeName(self):
        pass



class ThreadJob:
    def job_Execute(self):
        pass



class ThreadRangeWorker:
    def rngw_Execute(self, index, sharedData):
        pass



class ThreadSlotClient:
    def tsc_Free(self, value):
        pass



class TileImage:
    def tileimg_DeterminePixel(self, level, x, y):
        pass

    def tileimg_DetermineTile(self, level, x, y):
        pass

    def tileimg_GetLevelSize(self, level):
        pass

    def tileimg_GetTile(self, level, tileX, tileY):
        pass

    def tileimg_GetTileSize(self, level, tileX, tileY):
        pass

    def tileimg_LevelCount(self):
        pass



class Tool:
    def tool_CompareOp(self, vts, toolop):
        pass

    def tool_Evaluate(self, vts):
        pass

    def tool_GetOp(self, flags):
        pass

    def tool_Order(self):
        pass

    def tool_Reset(self):
        pass

    def tool_Sequence(self, seq):
        pass

    def tool_ShouldBeAttribute(self, task):
        pass

    def tool_Task(self):
        pass

    def tool_UpdateOp(self, toolop):
        pass

    def tool_VectorType(self):
        pass



class ToolModel:
    def tmod_Down(self, vts, adjust):
        pass

    def tmod_Draw(self, vts, stroke, flags):
        pass

    def tmod_Drop(self):
        pass

    def tmod_Enable(self, msg):
        pass

    def tmod_Filter(self, vts, adjust):
        pass

    def tmod_Flags(self):
        pass

    def tmod_Haul(self, index):
        pass

    def tmod_Help(self, vts):
        pass

    def tmod_Initialize(self, vts, adjust, flags):
        pass

    def tmod_Move(self, vts, adjust):
        pass

    def tmod_Post(self, vts):
        pass

    def tmod_Test(self, vts, stroke, flags):
        pass

    def tmod_TestType(self, type):
        pass

    def tmod_Tooltip(self, vts, part):
        pass

    def tmod_Track(self, vts, eventType):
        pass

    def tmod_TrackFlags(self):
        pass

    def tmod_Up(self, vts, adjust):
        pass



class ToolOperation:
    def top_Blend(self, other, blend):
        pass

    def top_Evaluate(self, vts):
        pass

    def top_ReEvaluate(self, vts):
        pass



class Tree:
    def tree_ChildIsLeaf(self):
        pass

    def tree_Count(self):
        pass

    def tree_Current(self):
        pass

    def tree_IsRoot(self):
        pass

    def tree_ItemState(self, guid):
        pass

    def tree_SetCurrent(self, index):
        pass

    def tree_SetItemState(self, guid, state):
        pass

    def tree_Spawn(self, mode):
        pass

    def tree_ToChild(self):
        pass

    def tree_ToParent(self):
        pass

    def tree_ToRoot(self):
        pass



class TreeListener:
    def tlis_ClearAllCachedThumbnails(self):
        pass

    def tlis_ClearCachedThumbnail(self, ident):
        pass

    def tlis_NewAttributes(self):
        pass

    def tlis_NewShape(self):
        pass

    def tlis_NewShowDescriptionText(self):
        pass

    def tlis_NewSpaceForThumbnails(self):
        pass



class TreeView:
    def treeview_BadgeDetail(self, columnIndex, badgeIndex, badgeDetail):
        pass

    def treeview_BadgeType(self, columnIndex, badgeIndex):
        pass

    def treeview_BadgeType2(self, columnIndex, badgeIndex):
        pass

    def treeview_BatchCommand(self, columnIndex):
        pass

    def treeview_CanFilter(self):
        pass

    def treeview_CellCommand(self, columnIndex):
        pass

    def treeview_ColumnByIndex(self, columnIndex):
        pass

    def treeview_ColumnCount(self):
        pass

    def treeview_ColumnIconResource(self, columnIndex):
        pass

    def treeview_ColumnInternalName(self, columnIndex):
        pass

    def treeview_ColumnJustification(self, columnIndex):
        pass

    def treeview_DescriptionText(self, columnIndex):
        pass

    def treeview_Filter(self):
        pass

    def treeview_GetDragDropDestinationObject(self, columnIndex, location):
        pass

    def treeview_GetDragDropSourceObject(self, columnIndex, type):
        pass

    def treeview_IconResource(self, columnIndex, width, height):
        pass

    def treeview_IsDescendantSelected(self):
        pass

    def treeview_IsInputRegion(self, columnIndex, regionID):
        pass

    def treeview_IsSelected(self):
        pass

    def treeview_PrimaryColumnPosition(self):
        pass

    def treeview_ReservedSpaceForIcons(self):
        pass

    def treeview_ReservedSpaceForThumbnails(self):
        pass

    def treeview_RestoreState(self, uid):
        pass

    def treeview_Select(self, mode):
        pass

    def treeview_ShowDescriptionText(self):
        pass

    def treeview_StoreState(self, uid):
        pass

    def treeview_StyleHints(self):
        pass

    def treeview_SupportedDragDropSourceTypes(self, columnIndex):
        pass

    def treeview_Thumbnail(self, columnIndex, width, height):
        pass

    def treeview_ToPrimary(self):
        pass

    def treeview_ToolTip(self, columnIndex):
        pass



class TriangleSoup:
    def soup_Connect(self, type):
        pass

    def soup_Polygon(self, v0, v1, v2):
        pass

    def soup_Segment(self, segID, type):
        pass

    def soup_TestBox(self, bbox):
        pass

    def soup_Vertex(self, vertex):
        pass



class UIValueHints:
    def uiv_ColorPickerCommands(self, rgb, alpha, rgbAlt, alphaAlt, useAlt, bufLens):
        pass

    def uiv_CueText(self):
        pass

    def uiv_Flags(self):
        pass

    def uiv_FormCommandListByIndex(self, index):
        pass

    def uiv_FormCommandListCount(self):
        pass

    def uiv_ItemTest(self, item):
        pass

    def uiv_NotifierByIndex(self, index):
        pass

    def uiv_NotifierCount(self):
        pass

    def uiv_PopCategory(self):
        pass

    def uiv_PopCount(self):
        pass

    def uiv_PopFlags(self, index):
        pass

    def uiv_PopIconImage(self, index):
        pass

    def uiv_PopIconResource(self, index):
        pass

    def uiv_PopIconSize(self):
        pass

    def uiv_PopInternalName(self, index):
        pass

    def uiv_PopToolTip(self, index):
        pass

    def uiv_PopUserName(self, index):
        pass

    def uiv_TextValidate(self, value):
        pass



class Undo:
    def undo_Forward(self):
        pass

    def undo_Reverse(self):
        pass



class UserValueListener:
    def uvl_Added(self, userValue):
        pass

    def uvl_DefChanged(self, userValue):
        pass

    def uvl_Deleted(self, name):
        pass

    def uvl_ValueChanged(self, userValue):
        pass



class Value:
    def val_Clone(self):
        pass

    def val_Compare(self, other):
        pass

    def val_Copy(self, from_obj):
        pass

    def val_GetFlt(self):
        pass

    def val_GetInt(self):
        pass

    def val_GetString(self):
        pass

    def val_Intrinsic(self):
        pass

    def val_SetFlt(self, val):
        pass

    def val_SetInt(self, val):
        pass

    def val_SetString(self, val):
        pass

    def val_SubTypeName(self):
        pass

    def val_Type(self):
        pass

    def val_TypeName(self):
        pass



class ValueArray:
    def va_AddEmptyValue(self):
        pass

    def va_AddFloat(self, value):
        pass

    def va_AddInt(self, value):
        pass

    def va_AddString(self, value):
        pass

    def va_AddValue(self, value):
        pass

    def va_Count(self):
        pass

    def va_FirstUnique(self):
        pass

    def va_GetFloat(self, index):
        pass

    def va_GetInt(self, index):
        pass

    def va_GetString(self, index):
        pass

    def va_GetValue(self, index):
        pass

    def va_Remove(self, index):
        pass

    def va_Reset(self):
        pass

    def va_SetFloat(self, index, value):
        pass

    def va_SetInt(self, index, value):
        pass

    def va_SetString(self, index, value):
        pass

    def va_SetValue(self, index, value):
        pass

    def va_Type(self):
        pass

    def va_TypeName(self):
        pass



class ValueConversion:
    def conv_Convert(self, from_obj, fromType, to_obj, toType):
        pass

    def conv_Test(self, fromType, toType):
        pass



class ValueMath:
    def math_Add(self, delta):
        pass

    def math_Blend(self, other, blend):
        pass

    def math_Detent(self):
        pass

    def math_Multiply(self, factor):
        pass

    def math_Step(self, direction):
        pass



class ValueTexture:
    def vtx_Cleanup(self, data):
        pass

    def vtx_IsSampleDriven(self):
        pass

    def vtx_LinkChannels(self, eval, item):
        pass

    def vtx_LinkSampleChannels(self, nodalEtor, item):
        pass

    def vtx_Setup(self, data):
        pass

    def vtx_SetupChannels(self, addChan):
        pass



class Variation:
    def var_Do(self, x, y):
        pass

    def var_Initialize(self, item, chanRead):
        pass

    def var_RangeX(self):
        pass

    def var_RangeY(self):
        pass

    def var_TestItem(self, item, chanRead):
        pass

    def var_Thumb(self, x, y, size, chanRead):
        pass



class VectorCanvas:
    def canvas_BeginEditBatch(self):
        pass

    def canvas_EndEditBatch(self):
        pass

    def canvas_GetItem(self):
        pass



class VectorKnotPacketTranslation:
    def knottrans_Canvas(self, packet):
        pass

    def knottrans_Item(self, packet):
        pass

    def knottrans_Path(self, packet):
        pass

    def knottrans_Shape(self, packet):
        pass



class VectorListener:
    def vtl_Destroy(self):
        pass

    def vtl_KnotPosition(self, shape, path):
        pass

    def vtl_PathAdd(self, shape, path):
        pass

    def vtl_PathRemove(self, shape, path):
        pass

    def vtl_ShapeAdd(self, shape):
        pass

    def vtl_ShapeRemove(self, shape):
        pass

    def vtl_ShapeStyle(self, shape, name):
        pass



class VectorPacket:
    def vpkt_Blend(self, packet, p0, p1, t, mode):
        pass

    def vpkt_Cleanup(self, packet):
        pass

    def vpkt_Copy(self, packet, from_poi):
        pass

    def vpkt_Initialize(self, packet):
        pass

    def vpkt_Interface(self):
        pass

    def vpkt_Invert(self, packet):
        pass

    def vpkt_NodeCount(self):
        pass

    def vpkt_NodeName(self, index):
        pass

    def vpkt_Reset(self, packet):
        pass

    def vpkt_Size(self):
        pass



class VectorPath:
    def path_ID(self):
        pass

    def path_IsPathClosed(self):
        pass

    def path_KnotCount(self):
        pass

    def path_KnotEnumerate(self, visitor):
        pass

    def path_Pos(self):
        pass

    def path_SelectKnot(self, knot):
        pass

    def path_SelectKnotByIndex(self, index):
        pass

    def path_SetPathClosed(self, closed):
        pass



class VectorPathPacketTranslation:
    def pathtrans_Canvas(self, packet):
        pass

    def pathtrans_Item(self, packet):
        pass

    def pathtrans_Packet(self, path):
        pass

    def pathtrans_Path(self, packet):
        pass

    def pathtrans_Shape(self, packet):
        pass



class VectorShape:
    def shape_Parent(self):
        pass

    def shape_PathByIndex(self, index):
        pass

    def shape_PathCount(self):
        pass

    def shape_ShapeByIndex(self, index):
        pass

    def shape_ShapeCount(self):
        pass

    def shape_Transform(self, matrix):
        pass



class VectorShapePacketTranslation:
    def shapetrans_Canvas(self, packet):
        pass

    def shapetrans_Item(self, packet):
        pass

    def shapetrans_Packet(self, shape):
        pass

    def shapetrans_Shape(self, packet):
        pass



class VideoClipItem:
    def vclip_AllocFilter(self, attr, cache):
        pass

    def vclip_Cleanup(self, cache):
        pass



class ViewItem3D:
    def vitm_Draw(self, chanRead, strokeDraw, selectionFlags, itemColor):
        pass

    def vitm_DrawBackground(self, chanRead, strokeDraw, itemColor):
        pass

    def vitm_HandleChannel(self, handleIndex):
        pass

    def vitm_HandleCount(self):
        pass

    def vitm_HandleMotion(self, handleIndex):
        pass

    def vitm_HandlePositionToValue(self, handleIndex, position):
        pass

    def vitm_HandleValueToPosition(self, handleIndex, chanValue):
        pass

    def vitm_Test(self, chanRead, strokeDraw, selectionFlags, itemColor):
        pass

    def vitm_WorldSpace(self):
        pass



class ViewObject:
    def viewobj_ByIndex(self, type, index):
        pass

    def viewobj_ByView(self, view):
        pass

    def viewobj_Count(self, type):
        pass

    def viewobj_Flags(self):
        pass

    def viewobj_Generate(self, type):
        pass

    def viewobj_TestMode(self, type):
        pass



class VirtualDevice:
    def vdev_Date(self):
        pass

    def vdev_Extract(self, dest):
        pass

    def vdev_Initialize(self, path):
        pass

    def vdev_Name(self):
        pass

    def vdev_Scan(self, visitor):
        pass

    def vdev_Select(self, sub):
        pass

    def vdev_Size(self):
        pass

    def vdev_Type(self):
        pass



class VirtualModel:
    def vmodel_Down(self, vts):
        pass

    def vmodel_Draw(self, stroke):
        pass

    def vmodel_Flags(self):
        pass

    def vmodel_Move(self, vts):
        pass

    def vmodel_Test(self, stroke):
        pass

    def vmodel_Tooltip(self, part):
        pass

    def vmodel_Track(self, part):
        pass

    def vmodel_Up(self, vts):
        pass



class Visitor:
    def vis_Evaluate(self):
        pass



class Voxel:
    def voxel_BBox(self):
        pass

    def voxel_FeatureByIndex(self, index):
        pass

    def voxel_FeatureCount(self):
        pass

    def voxel_NextPos(self, currentPos, currentSegment, stride):
        pass

    def voxel_Sample(self, pos, index):
        pass

    def voxel_VDBData(self):
        pass



class Waterfall:
    def wfall_Advance(self):
        pass

    def wfall_GetWork(self):
        pass

    def wfall_ProcessWork(self):
        pass

    def wfall_Spawn(self):
        pass

    def wfall_State(self):
        pass



class WeightMapDeformerItem:
    def wmd_GetColor(self, chanRead):
        pass

    def wmd_GetMapName(self, chanRead):
        pass



class WorkList:
    def work_Clear(self):
        pass

    def work_IsEmpty(self):
        pass

    def work_Next(self):
        pass

    def work_Split(self, mode):
        pass



