'''Autogenerated dummy object module anabling code completion in Python editors
 MODO Build #621568
'''

class ActionClip:
    def Action(self, time):
        '''ChannelRead object = Action(float time)'''
        pass

    def Active(self):
        '''integer = Active()'''
        pass

    def Create(self):
        '''Create()'''
        pass

    def Enabled(self):
        '''integer = Enabled()'''
        pass

    def Extents(self, layers):
        '''(float timeS,float timeE) = Extents(integer layers)'''
        pass

    def SetActive(self, state):
        '''SetActive(integer state)'''
        pass

    def SetEnabled(self, state):
        '''SetEnabled(integer state)'''
        pass

    def SetParenting(self, group):
        '''SetParenting(object group)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ActionLayerPacketTranslation:
    def Index(self, packet):
        '''integer = Index(pointer packet)'''
        pass

    def Item(self, packet):
        '''Item object = Item(pointer packet)'''
        pass

    def Packet(self, item, index):
        '''pointer = Packet(object item,integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ActionListener:
    def ActionChannelConstantChange(self, item, channel):
        '''ActionChannelConstantChange(object item,integer channel)'''
        pass

    def ActionChannelConstantPreChange(self, item, channel):
        '''ActionChannelConstantPreChange(object item,integer channel)'''
        pass

    def ActionChannelSignal(self, item, channel):
        '''ActionChannelSignal(object item,integer channel)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AddChannel:
    def NewChannel(self, name, type):
        '''NewChannel(string name,string type)'''
        pass

    def SetDefault(self, defFlt, defInt):
        '''SetDefault(float defFlt,integer defInt)'''
        pass

    def SetDefaultObj(self):
        '''Unknown object = SetDefaultObj()'''
        pass

    def SetDefaultVec(self, defVec):
        '''SetDefaultVec(double[] defVec)'''
        pass

    def SetGradient(self, inType):
        '''SetGradient(string inType)'''
        pass

    def SetHint(self, hint):
        '''SetHint(hints hint)'''
        pass

    def SetInternal(self):
        '''SetInternal()'''
        pass

    def SetStorage(self, stType):
        '''SetStorage(string stType)'''
        pass

    def SetUserHint(self, hint):
        '''SetUserHint(hints hint)'''
        pass

    def SetVector(self, vecType):
        '''SetVector(string vecType)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AddDropAction:
    def AddAction(self, action, message):
        '''AddAction(integer action,string message)'''
        pass

    def Peek(self):
        '''Unknown object = Peek()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AdjustTool:
    def Invalidate(self):
        '''Invalidate()'''
        pass

    def Lock(self):
        '''Lock()'''
        pass

    def SetFlt(self, index, val):
        '''SetFlt(integer index,float val)'''
        pass

    def SetInt(self, index, val):
        '''SetInt(integer index,integer val)'''
        pass

    def SetString(self, index, val):
        '''SetString(integer index,string val)'''
        pass

    def Update(self):
        '''Update()'''
        pass

    def Value(self, index, val):
        '''Value(integer index,object val)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AnimListener:
    def EnterSetup(self):
        '''EnterSetup()'''
        pass

    def LeaveSetup(self):
        '''LeaveSetup()'''
        pass

    def PlayEnd(self):
        '''PlayEnd()'''
        pass

    def PlayStart(self):
        '''PlayStart()'''
        pass

    def ScrubEnd(self):
        '''ScrubEnd()'''
        pass

    def ScrubTime(self):
        '''ScrubTime()'''
        pass

    def TimeChange(self):
        '''TimeChange()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AppActiveListener:
    def IsNowActive(self, isActive):
        '''IsNowActive(integer isActive)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AsyncMonitorInfo:
    def Abort(self):
        '''Abort()'''
        pass

    def CanAbort(self):
        '''CanAbort()'''
        pass

    def Child(self):
        '''Unknown object = Child()'''
        pass

    def Identifier(self):
        '''string ident = Identifier()'''
        pass

    def IsAborted(self):
        '''IsAborted()'''
        pass

    def Parent(self):
        '''Unknown object = Parent()'''
        pass

    def System(self):
        '''string system = System()'''
        pass

    def Title(self):
        '''string title = Title()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AsyncMonitorSystem:
    def ByIndex(self, index):
        '''Unknown object = ByIndex(integer index)'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AttrSequence:
    def Float(self, name, value):
        '''Float(string name,float value)'''
        pass

    def Integer(self, name, value):
        '''Integer(string name,integer value)'''
        pass

    def String(self, name, value):
        '''String(string name,string value)'''
        pass

    def Value(self, name, value):
        '''Value(string name,object value)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Attributes:
    def Count(self):
        '''integer = Count()'''
        pass

    def GetFlt(self, index):
        '''float val = GetFlt(integer index)'''
        pass

    def GetInt(self, index):
        '''integer val = GetInt(integer index)'''
        pass

    def GetString(self, index):
        '''string = GetString(integer index)'''
        pass

    def Hints(self, index):
        '''hints = Hints(integer index)'''
        pass

    def Lookup(self, name):
        '''integer index = Lookup(string name)'''
        pass

    def Name(self, index):
        '''string name = Name(integer index)'''
        pass

    def SetFlt(self, index, val):
        '''SetFlt(integer index,float val)'''
        pass

    def SetInt(self, index, val):
        '''SetInt(integer index,integer val)'''
        pass

    def SetString(self, index, val):
        '''SetString(integer index,string val)'''
        pass

    def Type(self, index):
        '''integer type = Type(integer index)'''
        pass

    def TypeName(self, index):
        '''string tname = TypeName(integer index)'''
        pass

    def Value(self, index, writeOK):
        '''Unknown object = Value(integer index,integer writeOK)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AttributesUI:
    def DisableMsg(self, index, message):
        '''DisableMsg(integer index,object message)'''
        pass

    def UIHints(self, index, hints):
        '''UIHints(integer index,object hints)'''
        pass

    def UIValueHints(self, index):
        '''UIValueHints object = UIValueHints(integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Audio:
    def Channels(self):
        '''integer = Channels()'''
        pass

    def Data(self):
        '''data[] = Data()'''
        pass

    def Duration(self):
        '''float = Duration()'''
        pass

    def Filename(self):
        '''string = Filename()'''
        pass

    def Frequency(self):
        '''integer = Frequency()'''
        pass

    def Read(self, buff):
        '''(integer frames,integer eof) = Read(data[] buff)'''
        pass

    def Sample(self, time, type, value):
        '''Sample(float time,integer type,data[] value)'''
        pass

    def Seek(self, frame):
        '''Seek(integer frame)'''
        pass

    def Size(self):
        '''integer = Size()'''
        pass

    def Tell(self):
        '''integer = Tell()'''
        pass

    def TrimStart(self):
        '''float = TrimStart()'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AudioDevice:
    def Handle(self, audio):
        '''AudioHandle object = Handle(object audio)'''
        pass

    def PlayFile(self, filePath):
        '''PlayFile(string filePath)'''
        pass

    def PlayRange(self, audio, start, end, volume, pitch):
        '''PlayRange(object audio,float start,float end,float volume,float pitch)'''
        pass

    def Playing(self):
        '''integer = Playing()'''
        pass

    def StopAll(self):
        '''StopAll()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AudioHandle:
    def Audio(self):
        '''object = Audio()'''
        pass

    def Loop(self):
        '''Loop()'''
        pass

    def Offset(self):
        '''float = Offset()'''
        pass

    def Pause(self):
        '''Pause()'''
        pass

    def Pitch(self):
        '''float = Pitch()'''
        pass

    def Play(self, forward):
        '''Play(integer forward)'''
        pass

    def Resume(self):
        '''Resume()'''
        pass

    def SetLoop(self, loop):
        '''SetLoop(integer loop)'''
        pass

    def SetOffset(self, offset):
        '''SetOffset(float offset)'''
        pass

    def SetPitch(self, pitch):
        '''SetPitch(float pitch)'''
        pass

    def SetVolume(self, volume):
        '''SetVolume(float volume)'''
        pass

    def State(self):
        '''integer state = State()'''
        pass

    def Stop(self):
        '''Stop()'''
        pass

    def Volume(self):
        '''float = Volume()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AudioLoaderTarget:
    def SetChannels(self, channels):
        '''SetChannels(integer channels)'''
        pass

    def SetFrequency(self, frequency):
        '''SetFrequency(integer frequency)'''
        pass

    def SetSamples(self, samples):
        '''SetSamples(integer samples)'''
        pass

    def SetType(self, type):
        '''SetType(integer type)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AudioWrite:
    def SetDuration(self, duration):
        '''SetDuration(float duration)'''
        pass

    def SetSample(self, time, type, value):
        '''SetSample(float time,integer type,data[] value)'''
        pass

    def SetStart(self, start):
        '''SetStart(float start)'''
        pass

    def Write(self, data):
        '''integer frames = Write(data[] data)'''
        pass

    def WriteEnd(self):
        '''WriteEnd()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class AutoSaveListener:
    def AutoSaveNow(self):
        '''AutoSaveNow()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class BagGenerator:
    def Dispose(self, data):
        '''Dispose(pointer data)'''
        pass

    def Generate(self, data, cloneMe):
        '''pointer = Generate(pointer data,pointer cloneMe)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class BasePathAddDest:
    def AddBasePath(self, setName, path):
        '''AddBasePath(string setName,string path)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class BlockRead:
    def Depth(self):
        '''integer = Depth()'''
        pass

    def End(self):
        '''End()'''
        pass

    def FindBlock(self, head, flags):
        '''integer blkId = FindBlock(blocks head,integer flags)'''
        pass

    def ReadFP(self, count):
        '''(float data,integer ocount) = ReadFP(integer count)'''
        pass

    def ReadFP8(self, count):
        '''(float data,integer ocount) = ReadFP8(integer count)'''
        pass

    def ReadI1(self, data, count):
        '''integer ocount = ReadI1(byte[] data,integer count)'''
        pass

    def ReadI4(self, data, count):
        '''integer ocount = ReadI4(int[] data,integer count)'''
        pass

    def ReadIDCode(self, list):
        '''integer idCode = ReadIDCode(blocks list)'''
        pass

    def ReadString(self, buf, max, flags):
        '''integer ocount = ReadString(byte[] buf,integer max,integer flags)'''
        pass

    def ReadU2(self, count):
        '''(integer data,integer ocount) = ReadU2(integer count)'''
        pass

    def ReadU4(self, count):
        '''(integer data,integer ocount) = ReadU4(integer count)'''
        pass

    def ReadVX(self, count):
        '''(integer data,integer ocount) = ReadVX(integer count)'''
        pass

    def SetMiniBlockHeight(self, mini):
        '''SetMiniBlockHeight(integer mini)'''
        pass

    def SetSourceEncoding(self, encoding):
        '''SetSourceEncoding(integer encoding)'''
        pass

    def SetTargetEncoding(self, encoding):
        '''SetTargetEncoding(integer encoding)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class BlockStore:
    def AllocBookmark(self):
        '''id loc = AllocBookmark()'''
        pass

    def ByIndex(self, type, index, parent):
        '''ByIndex(integer type,integer index,id parent)'''
        pass

    def Count(self, type, parent):
        '''integer count = Count(integer type,id parent)'''
        pass

    def Delete(self):
        '''Delete()'''
        pass

    def Ident(self):
        '''string id = Ident()'''
        pass

    def Lookup(self, type, id, parent):
        '''Lookup(integer type,string id,id parent)'''
        pass

    def ReadBlock(self, buf, offset, size):
        '''ReadBlock(pointer buf,integer offset,integer size)'''
        pass

    def RestoreBookmark(self, loc):
        '''RestoreBookmark(id loc)'''
        pass

    def SaveBookmark(self, loc):
        '''SaveBookmark(id loc)'''
        pass

    def Stack(self, operation):
        '''Stack(integer operation)'''
        pass

    def Type(self):
        '''integer type = Type()'''
        pass

    def WriteBlock(self, buf, offset, size):
        '''WriteBlock(data[] buf,integer offset,integer size)'''
        pass

    def WriteSize(self, size):
        '''WriteSize(integer size)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class BlockWrite:
    def Depth(self):
        '''integer = Depth()'''
        pass

    def End(self):
        '''End()'''
        pass

    def SetSourceEncoding(self, encoding):
        '''SetSourceEncoding(integer encoding)'''
        pass

    def SetTargetEncoding(self, encoding):
        '''SetTargetEncoding(integer encoding)'''
        pass

    def WriteBlock(self, head, flags):
        '''WriteBlock(blocks head,integer flags)'''
        pass

    def WriteFP(self, data, count):
        '''WriteFP(float[] data,integer count)'''
        pass

    def WriteFP8(self, data, count):
        '''WriteFP8(double[] data,integer count)'''
        pass

    def WriteI1(self, data, count):
        '''WriteI1(string data,integer count)'''
        pass

    def WriteI4(self, data, count):
        '''WriteI4(int[] data,integer count)'''
        pass

    def WriteIDCode(self, ident):
        '''WriteIDCode(blocks ident)'''
        pass

    def WriteString(self, str):
        '''WriteString(string str)'''
        pass

    def WriteU4(self, data, count):
        '''WriteU4(unsigned[] data,integer count)'''
        pass

    def WriteVX(self, data, count):
        '''WriteVX(unsigned[] data,integer count)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Buffer:
    def Clear(self, x, y):
        '''Clear(integer x,integer y)'''
        pass

    def CreateImageTileTree(self):
        '''CreateImageTileTree()'''
        pass

    def DataType(self):
        '''integer = DataType()'''
        pass

    def DecrementTileTreeSize(self):
        '''DecrementTileTreeSize()'''
        pass

    def DestroyImageTileTree(self):
        '''DestroyImageTileTree()'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def GetImageTileTree(self):
        '''id = GetImageTileTree()'''
        pass

    def GetSize(self):
        '''(integer width,integer height) = GetSize()'''
        pass

    def IncrementTileTreeSize(self):
        '''IncrementTileTreeSize()'''
        pass

    def Line(self, y):
        '''pointer = Line(integer y)'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def Pixel(self, x, y):
        '''pointer = Pixel(integer x,integer y)'''
        pass

    def ResetImageTileTree(self):
        '''ResetImageTileTree()'''
        pass

    def SetEyeSide(self, eyeSide):
        '''SetEyeSide(integer eyeSide)'''
        pass

    def SetFlags(self, flags):
        '''SetFlags(integer flags)'''
        pass

    def SetSize(self, width, height, writeBucketsToDisk, isStereo):
        '''SetSize(integer width,integer height,integer writeBucketsToDisk,integer isStereo)'''
        pass

    def SetUserName(self, name):
        '''SetUserName(string name)'''
        pass

    def UserName(self):
        '''string name = UserName()'''
        pass

    def VectorType(self):
        '''object = VectorType()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class CacheData:
    def Size(self):
        '''integer = Size()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class CenterPacketTranslation:
    def Item(self, packet):
        '''Item object = Item(pointer packet)'''
        pass

    def Packet(self, item):
        '''pointer = Packet(object item)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ChannelDest:
    def Channel(self):
        '''Value object = Channel()'''
        pass

    def Location(self):
        '''integer = Location()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ChannelDropPreview:
    def MarkChannel(self):
        '''integer = MarkChannel()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ChannelGraph:
    def AddLink(self, from_obj, fromChan, to_obj, toChan):
        '''AddLink(object from_obj,integer fromChan,object to_obj,integer toChan)'''
        pass

    def DeleteLink(self, from_obj, fromChan, to_obj, toChan):
        '''DeleteLink(object from_obj,integer fromChan,object to_obj,integer toChan)'''
        pass

    def FwdByIndex(self, item, channel, index):
        '''(Item object,integer objChan) = FwdByIndex(object item,integer channel,integer index)'''
        pass

    def FwdCount(self, item, channel):
        '''integer count = FwdCount(object item,integer channel)'''
        pass

    def RevByIndex(self, item, channel, index):
        '''(Item object,integer objChan) = RevByIndex(object item,integer channel,integer index)'''
        pass

    def RevCount(self, item, channel):
        '''integer count = RevCount(object item,integer channel)'''
        pass

    def SetLink(self, from_obj, fromChan, fromIndex, to_obj, toChan, toIndex):
        '''SetLink(object from_obj,integer fromChan,integer fromIndex,object to_obj,integer toChan,integer toIndex)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ChannelModSetup:
    def AddChannel(self, name, flags):
        '''AddChannel(string name,integer flags)'''
        pass

    def AddTime(self):
        '''AddTime()'''
        pass

    def GetEvaluation(self):
        '''object = GetEvaluation()'''
        pass

    def ReadArray(self, name):
        '''ValueArray object = ReadArray(string name)'''
        pass

    def ReadTimeValue(self):
        '''Value object = ReadTimeValue()'''
        pass

    def ReadValue(self, name):
        '''Value object = ReadValue(string name)'''
        pass

    def WriteValue(self, name):
        '''Value object = WriteValue(string name)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ChannelModifier:
    def AddInput(self, item, index):
        '''AddInput(object item,integer index)'''
        pass

    def AddOutput(self, item, index):
        '''AddOutput(object item,integer index)'''
        pass

    def AddTime(self):
        '''AddTime()'''
        pass

    def InputCount(self, index):
        '''integer nInputs = InputCount(integer index)'''
        pass

    def OutputCount(self, index):
        '''integer nOutputs = OutputCount(integer index)'''
        pass

    def ReadInputAngle(self, attr, inputIndex):
        '''float dVal = ReadInputAngle(object attr,integer inputIndex)'''
        pass

    def ReadInputFloat(self, attr, inputIndex):
        '''float dVal = ReadInputFloat(object attr,integer inputIndex)'''
        pass

    def ReadInputFloatByIndex(self, attr, inputIndex, linkIndex):
        '''float dVal = ReadInputFloatByIndex(object attr,integer inputIndex,integer linkIndex)'''
        pass

    def ReadInputInt(self, attr, inputIndex):
        '''integer iVal = ReadInputInt(object attr,integer inputIndex)'''
        pass

    def ReadInputIntByIndex(self, attr, inputIndex, linkIndex):
        '''integer iVal = ReadInputIntByIndex(object attr,integer inputIndex,integer linkIndex)'''
        pass

    def WriteOutputFloat(self, attr, outputIndex, dVal):
        '''WriteOutputFloat(object attr,integer outputIndex,float dVal)'''
        pass

    def WriteOutputInt(self, attr, outputIndex, iVal):
        '''WriteOutputInt(object attr,integer outputIndex,integer iVal)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ChannelPacketTranslation:
    def Index(self, packet):
        '''integer = Index(pointer packet)'''
        pass

    def Item(self, packet):
        '''Item object = Item(pointer packet)'''
        pass

    def Packet(self, item, index):
        '''pointer = Packet(object item,integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ChannelRead:
    def BakedSamples(self, item, channel):
        '''(float firstSample,float spsRate,ValueArray object) = BakedSamples(object item,integer channel)'''
        pass

    def Double(self, item, channel):
        '''float value = Double(object item,integer channel)'''
        pass

    def EncodedInt(self, item, channel):
        '''string = EncodedInt(object item,integer channel)'''
        pass

    def Envelope(self, item, channel):
        '''Envelope object = Envelope(object item,integer channel)'''
        pass

    def Integer(self, item, channel):
        '''integer value = Integer(object item,integer channel)'''
        pass

    def IsAnimated(self, item, index):
        '''integer = IsAnimated(object item,integer index)'''
        pass

    def IsBaked(self, item, channel):
        '''boolean = IsBaked(object item,integer channel)'''
        pass

    def SetTime(self, time):
        '''SetTime(float time)'''
        pass

    def String(self, item, channel):
        '''string value = String(object item,integer channel)'''
        pass

    def Time(self):
        '''float = Time()'''
        pass

    def Type(self, item, channel):
        '''integer type = Type(object item,integer channel)'''
        pass

    def TypeName(self, item, channel):
        '''string typeName = TypeName(object item,integer channel)'''
        pass

    def ValueObj(self, item, channel):
        '''Unknown object = ValueObj(object item,integer channel)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ChannelUI:
    def Cookie(self, channelName, requestedFor):
        '''string cookie = Cookie(string channelName,string requestedFor)'''
        pass

    def DependencyByIndex(self, channelName, index):
        '''(integer depItemType,string depChannelName) = DependencyByIndex(string channelName,integer index)'''
        pass

    def DependencyByIndexName(self, channelName, index):
        '''(string depItemTypeName,string depChannelName) = DependencyByIndexName(string channelName,integer index)'''
        pass

    def DependencyCount(self, channelName):
        '''integer count = DependencyCount(string channelName)'''
        pass

    def Enabled(self, channelName, msg, item, chanRead):
        '''Enabled(string channelName,object msg,object item,object chanRead)'''
        pass

    def ItemEnabled(self, msg, item):
        '''ItemEnabled(object msg,object item)'''
        pass

    def ItemIcon(self, item):
        '''string icon = ItemIcon(object item)'''
        pass

    def UIHints(self, channelName, hints):
        '''UIHints(string channelName,object hints)'''
        pass

    def UIValueHints(self, channelName):
        '''UIValueHints object = UIValueHints(string channelName)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ChannelWrite:
    def BakeSamples(self, item, channel, firstSample, spsRate):
        '''ValueArray object = BakeSamples(object item,integer channel,float firstSample,float spsRate)'''
        pass

    def Double(self, item, channel, value):
        '''Double(object item,integer channel,float value)'''
        pass

    def DoubleKey(self, item, channel, value, create):
        '''DoubleKey(object item,integer channel,float value,integer create)'''
        pass

    def EncodedInt(self, item, channel, value):
        '''EncodedInt(object item,integer channel,string value)'''
        pass

    def EncodedIntKey(self, item, channel, value):
        '''EncodedIntKey(object item,integer channel,string value)'''
        pass

    def Envelope(self, item, channel):
        '''Envelope object = Envelope(object item,integer channel)'''
        pass

    def Integer(self, item, channel, value):
        '''Integer(object item,integer channel,integer value)'''
        pass

    def IntegerKey(self, item, channel, value, create):
        '''IntegerKey(object item,integer channel,integer value,integer create)'''
        pass

    def SetState(self, item, channel, state):
        '''SetState(object item,integer channel,integer state)'''
        pass

    def String(self, item, channel, value):
        '''String(object item,integer channel,string value)'''
        pass

    def Type(self, item, channel):
        '''integer type = Type(object item,integer channel)'''
        pass

    def TypeName(self, item, channel):
        '''string typeName = TypeName(object item,integer channel)'''
        pass

    def ValueObj(self, item, channel):
        '''Unknown object = ValueObj(object item,integer channel)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ClipDest:
    def Item(self):
        '''Unknown object = Item()'''
        pass

    def Location(self):
        '''integer = Location()'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class CmdSysListener:
    def AliasAdded(self, name, isOverride):
        '''AliasAdded(string name,integer isOverride)'''
        pass

    def AliasRemoved(self, name, isOverride):
        '''AliasRemoved(string name,integer isOverride)'''
        pass

    def BlockBegin(self, block, isSandboxed):
        '''BlockBegin(object block,integer isSandboxed)'''
        pass

    def BlockEnd(self, block, isSandboxed, wasDiscarded):
        '''BlockEnd(object block,integer isSandboxed,integer wasDiscarded)'''
        pass

    def BlockEndedPostMode(self, name, isSandboxed):
        '''BlockEndedPostMode(string name,integer isSandboxed)'''
        pass

    def CommandAdded(self, name):
        '''CommandAdded(string name)'''
        pass

    def ExecutePost(self, cmd, isSandboxed, isPostCmd):
        '''ExecutePost(object cmd,integer isSandboxed,integer isPostCmd)'''
        pass

    def ExecutePre(self, cmd, type, isSandboxed, isPostCmd):
        '''ExecutePre(object cmd,integer type,integer isSandboxed,integer isPostCmd)'''
        pass

    def ExecuteResult(self, cmd, type, isSandboxed, isPostCmd, wasSuccessful):
        '''ExecuteResult(object cmd,integer type,integer isSandboxed,integer isPostCmd,integer wasSuccessful)'''
        pass

    def PostModeBegin(self):
        '''PostModeBegin()'''
        pass

    def PostModeEnd(self):
        '''PostModeEnd()'''
        pass

    def PostModeRestart(self):
        '''PostModeRestart()'''
        pass

    def PostModeUndoNext(self):
        '''PostModeUndoNext()'''
        pass

    def RefireBegin(self):
        '''RefireBegin()'''
        pass

    def RefireEnd(self):
        '''RefireEnd()'''
        pass

    def RefiringNext(self):
        '''RefiringNext()'''
        pass

    def SystemReady(self):
        '''SystemReady()'''
        pass

    def UndoLockout(self, isLockedOut):
        '''UndoLockout(integer isLockedOut)'''
        pass

    def UserRedo(self):
        '''UserRedo()'''
        pass

    def UserUndo(self):
        '''UserUndo()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Color:
    def Alpha(self):
        '''float alpha = Alpha()'''
        pass

    def Color(self):
        '''float color = Color()'''
        pass

    def ColorInModelSpace(self):
        '''float vec = ColorInModelSpace()'''
        pass

    def ColorModel(self):
        '''string model = ColorModel()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ColorDialog:
    def DoDialog(self, title, stops, gamma):
        '''float rgb = DoDialog(string title,float stops,float gamma)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ColorMapping:
    def FromLinear(self, linearValues, length):
        '''vector targetValues = FromLinear(vector linearValues,integer length)'''
        pass

    def FromLinearFast(self, length):
        '''float buf = FromLinearFast(integer length)'''
        pass

    def GetCMServerName(self):
        '''string = GetCMServerName()'''
        pass

    def GetName(self):
        '''string = GetName()'''
        pass

    def Setup(self, toLinear):
        '''Setup(integer toLinear)'''
        pass

    def ToLinear(self, sourceValues, length):
        '''vector linearValues = ToLinear(vector sourceValues,integer length)'''
        pass

    def ToLinearFast(self, length):
        '''float buf = ToLinearFast(integer length)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ColorMappingModule:
    def Flags(self):
        '''integer = Flags()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ColorModel:
    def CanSliceBeReused(self, xAxis, yAxis, oldVec, newVec):
        '''boolean = CanSliceBeReused(integer xAxis,integer yAxis,float[] oldVec,float[] newVec)'''
        pass

    def ComponentRange(self, component):
        '''(float min,float max) = ComponentRange(integer component)'''
        pass

    def ComponentType(self, component):
        '''string type = ComponentType(integer component)'''
        pass

    def DrawSlice(self, image, xAxis, yAxis, vec):
        '''DrawSlice(object image,integer xAxis,integer yAxis,float[] vec)'''
        pass

    def DrawSliceMarker(self, image, xAxis, yAxis, downVec, vec):
        '''DrawSliceMarker(object image,integer xAxis,integer yAxis,float[] downVec,float[] vec)'''
        pass

    def FromRGB(self, rgb, vector):
        '''FromRGB(float[] rgb,float[] vector)'''
        pass

    def FromSlicePos(self, xAxis, yAxis, imgW, imgH, imgX, imgY, downVec, vec):
        '''FromSlicePos(integer xAxis,integer yAxis,integer imgW,integer imgH,integer imgX,integer imgY,float[] downVec,float[] vec)'''
        pass

    def NumComponents(self):
        '''integer = NumComponents()'''
        pass

    def StripBaseVector(self, axis, dynamic, vec):
        '''StripBaseVector(integer axis,integer dynamic,float[] vec)'''
        pass

    def ToRGB(self, vector, rgb):
        '''ToRGB(float[] vector,float[] rgb)'''
        pass

    def ToSlicePos(self, xAxis, yAxis, imgW, imgH, vec):
        '''(integer imgX,integer imgY) = ToSlicePos(integer xAxis,integer yAxis,integer imgW,integer imgH,float[] vec)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ColorPreDest:
    def Apply(self):
        '''Apply()'''
        pass

    def SetColor(self, rgb):
        '''SetColor(vector rgb)'''
        pass

    def SetColorModel(self, name, vec):
        '''SetColorModel(string name,double[] vec)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Command:
    def ArgClear(self, index):
        '''ArgClear(integer index)'''
        pass

    def ArgDesc(self, index):
        '''string desc = ArgDesc(integer index)'''
        pass

    def ArgEnable(self, arg):
        '''ArgEnable(integer arg)'''
        pass

    def ArgExample(self, index):
        '''string example = ArgExample(integer index)'''
        pass

    def ArgFlags(self, index):
        '''integer flags = ArgFlags(integer index)'''
        pass

    def ArgOptionDesc(self, index, optIndex):
        '''string desc = ArgOptionDesc(integer index,integer optIndex)'''
        pass

    def ArgOptionUserName(self, index, optIndex):
        '''string userName = ArgOptionUserName(integer index,integer optIndex)'''
        pass

    def ArgParseString(self, argIndex, argString):
        '''ArgParseString(integer argIndex,string argString)'''
        pass

    def ArgResetAll(self):
        '''ArgResetAll()'''
        pass

    def ArgSetDatatypes(self):
        '''ArgSetDatatypes()'''
        pass

    def ArgType(self, index):
        '''string type = ArgType(integer index)'''
        pass

    def ArgTypeDesc(self, index):
        '''string desc = ArgTypeDesc(integer index)'''
        pass

    def ArgTypeUserName(self, index):
        '''string userName = ArgTypeUserName(integer index)'''
        pass

    def ArgUserName(self, index):
        '''string userName = ArgUserName(integer index)'''
        pass

    def ButtonName(self):
        '''string buttonName = ButtonName()'''
        pass

    def ContainedEnable(self):
        '''integer types = ContainedEnable()'''
        pass

    def Copy(self, sourceCommand):
        '''Copy(object sourceCommand)'''
        pass

    def Desc(self):
        '''string desc = Desc()'''
        pass

    def DialogArgChange(self, arg):
        '''DialogArgChange(integer arg)'''
        pass

    def DialogFormatting(self):
        '''string formatting = DialogFormatting()'''
        pass

    def DialogInit(self):
        '''DialogInit()'''
        pass

    def Enable(self, msg):
        '''Enable(object msg)'''
        pass

    def Example(self):
        '''string example = Example()'''
        pass

    def Execute(self, flags):
        '''Execute(integer flags)'''
        pass

    def Flags(self):
        '''integer flags = Flags()'''
        pass

    def Help(self):
        '''string help = Help()'''
        pass

    def Icon(self):
        '''string iconNames = Icon()'''
        pass

    def IconImage(self, w, h):
        '''Image object = IconImage(integer w,integer h)'''
        pass

    def Interact(self):
        '''Interact()'''
        pass

    def Message(self):
        '''Message object = Message()'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def NotifyAddClient(self, argument, object):
        '''NotifyAddClient(integer argument,object object)'''
        pass

    def NotifyRemoveClient(self, object):
        '''NotifyRemoveClient(object object)'''
        pass

    def PostExecBehaviorFlags(self):
        '''integer flags = PostExecBehaviorFlags()'''
        pass

    def PostExecFlags(self):
        '''integer flags = PostExecFlags()'''
        pass

    def PostExecHints(self):
        '''integer hints = PostExecHints()'''
        pass

    def PreExecute(self):
        '''PreExecute()'''
        pass

    def Query(self, index, vaQuery):
        '''Query(integer index,object vaQuery)'''
        pass

    def SandboxGUID(self):
        '''string guid = SandboxGUID()'''
        pass

    def Tag(self):
        '''integer tag = Tag()'''
        pass

    def ToggleArg(self):
        '''(integer index,Value object,integer typeID,string typeName) = ToggleArg()'''
        pass

    def Tooltip(self):
        '''string tooltip = Tooltip()'''
        pass

    def UserName(self):
        '''string userName = UserName()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class CommandDBHelp:
    def DBHelp(self):
        '''string dbhelp = DBHelp()'''
        pass

    def DBTooltip(self):
        '''string dbtooltip = DBTooltip()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class CommandEvent:
    def Event(self, flags):
        '''Event(integer flags)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class CompShader:
    def Cleanup(self, data):
        '''Cleanup(pointer data)'''
        pass

    def CustomPacket(self):
        '''string packet = CustomPacket()'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def LinkChannels(self, eval, item):
        '''LinkChannels(object eval,object item)'''
        pass

    def SetOpaque(self):
        '''integer opaque = SetOpaque()'''
        pass

    def SetupChannels(self, addChan):
        '''SetupChannels(object addChan)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Curve:
    def BendCount(self):
        '''integer = BendCount()'''
        pass

    def Closest(self, probe):
        '''(float param,vector pos,vector norm) = Closest(vector probe)'''
        pass

    def Curvature(self):
        '''float curv = Curvature()'''
        pass

    def GetBBox(self):
        '''bounds bbox = GetBBox()'''
        pass

    def GuideCurveNormal(self, other):
        '''vector normal = GuideCurveNormal(object other)'''
        pass

    def IsClosed(self):
        '''boolean = IsClosed()'''
        pass

    def LenFraction(self):
        '''float = LenFraction()'''
        pass

    def Length(self):
        '''float = Length()'''
        pass

    def MeshNormal(self, meshObj):
        '''(matrix xfrm,vector normal) = MeshNormal(object meshObj)'''
        pass

    def Normal(self):
        '''vector normal = Normal()'''
        pass

    def Param(self):
        '''float = Param()'''
        pass

    def Position(self):
        '''vector pos = Position()'''
        pass

    def SetLenFraction(self, frac):
        '''SetLenFraction(float frac)'''
        pass

    def SetParam(self, param):
        '''SetParam(float param)'''
        pass

    def SplineByIndex(self, index):
        '''(vector b0,vector b1,vector b2,vector b3) = SplineByIndex(integer index)'''
        pass

    def SplineCount(self):
        '''integer count = SplineCount()'''
        pass

    def SplineLengthByIndex(self, index):
        '''float length = SplineLengthByIndex(integer index)'''
        pass

    def Tangent(self):
        '''vector tan = Tangent()'''
        pass

    def WalkByAngle(self, start, end, angle, visitor):
        '''WalkByAngle(float start,float end,float angle,object visitor)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class CurveGroup:
    def ByIndex(self, index):
        '''Curve object = ByIndex(integer index)'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def GetBBox(self):
        '''bounds bbox = GetBBox()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class CustomMaterial:
    def Cleanup(self, data):
        '''Cleanup(pointer data)'''
        pass

    def CustomPacket(self):
        '''string packet = CustomPacket()'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def IsSampleDriven(self):
        '''(integer,integer idx) = IsSampleDriven()'''
        pass

    def LinkChannels(self, eval, item):
        '''LinkChannels(object eval,object item)'''
        pass

    def LinkSampleChannels(self, nodalEtor, item):
        '''integer idx = LinkSampleChannels(object nodalEtor,object item)'''
        pass

    def MaterialEvaluate(self, etor, vector, data):
        '''integer idx = MaterialEvaluate(object etor,object vector,pointer data)'''
        pass

    def SetBump(self):
        '''(float bumpAmplitude,integer clearBump) = SetBump()'''
        pass

    def SetDisplacement(self):
        '''float dispDist = SetDisplacement()'''
        pass

    def SetOpaque(self):
        '''integer opaque = SetOpaque()'''
        pass

    def SetSmoothing(self):
        '''(float smooth,float angle,integer weighting,integer normalMethod,integer creasing) = SetSmoothing()'''
        pass

    def SetupChannels(self, addChan):
        '''SetupChannels(object addChan)'''
        pass

    def UpdatePreview(self, chanIdx):
        '''integer flags = UpdatePreview(integer chanIdx)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class CustomPane:
    def GetIdentifier(self):
        '''string ident = GetIdentifier()'''
        pass

    def GetParent(self):
        '''id handle = GetParent()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class CustomView:
    def Cleanup(self, pane):
        '''Cleanup(object pane)'''
        pass

    def Init(self, pane):
        '''Init(object pane)'''
        pass

    def RestoreState(self, pane):
        '''RestoreState(object pane)'''
        pass

    def StoreState(self, pane):
        '''StoreState(object pane)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DTBBadgeOverride:
    def BadgeAction(self, entry, badge):
        '''BadgeAction(object entry,integer badge)'''
        pass

    def BadgeIsAlwaysVisible(self, entry, badge):
        '''boolean = BadgeIsAlwaysVisible(object entry,integer badge)'''
        pass

    def BadgeOverride(self, entry, badge):
        '''string = BadgeOverride(object entry,integer badge)'''
        pass

    def BadgeStarRatingAction(self, entry, rating):
        '''BadgeStarRatingAction(object entry,integer rating)'''
        pass

    def BadgeStarRatingOverride(self, entry):
        '''(integer rating,string) = BadgeStarRatingOverride(object entry)'''
        pass

    def BadgeTooltip(self, entry, badge):
        '''string = BadgeTooltip(object entry,integer badge)'''
        pass

    def BadgesSupported(self, entry):
        '''integer badges = BadgesSupported(object entry)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DTBDropPreview:
    def MarkAnywhere(self, path):
        '''MarkAnywhere(string path)'''
        pass

    def MarkBetween(self, path, markBefore):
        '''MarkBetween(string path,integer markBefore)'''
        pass

    def MarkEntry(self, path):
        '''MarkEntry(string path)'''
        pass

    def MarkGridPos(self, path, x, y):
        '''MarkGridPos(string path,integer x,integer y)'''
        pass

    def MarkNone(self):
        '''MarkNone()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DTBGroupSortOverride:
    def SetArguments(self, args):
        '''SetArguments(string args)'''
        pass

    def Sort(self, string1, string2):
        '''integer = Sort(string string1,string string2)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Deformation:
    def Flags(self):
        '''integer = Flags()'''
        pass

    def OBSOLETE(self):
        '''OBSOLETE()'''
        pass

    def OffsetF(self, position, weight):
        '''vector offset = OffsetF(vector position,float weight)'''
        pass

    def Transform(self):
        '''matrix xfrm = Transform()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Deformer:
    def Element(self):
        '''(id,integer segment) = Element()'''
        pass

    def EnumeratePartition(self, visitor, part):
        '''EnumeratePartition(object visitor,integer part)'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def Offset(self, elt, weight, pos):
        '''vector offset = Offset(id elt,float weight,vector pos)'''
        pass

    def PartitionCount(self):
        '''integer = PartitionCount()'''
        pass

    def SetPartition(self, part):
        '''SetPartition(integer part)'''
        pass

    def Weight(self, elt, pos):
        '''float = Weight(id elt,vector pos)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DirBrowserBasePathEntryDest:
    def OrdinalAfter(self):
        '''string ordinal = OrdinalAfter()'''
        pass

    def OrdinalBefore(self):
        '''string ordinal = OrdinalBefore()'''
        pass

    def SetPath(self):
        '''string path = SetPath()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DirCacheEntry:
    def CachedThumbnail(self, size):
        '''(integer idealW,integer idealH,Image object) = CachedThumbnail(integer size)'''
        pass

    def CachedThumbnailAsync(self, size, asyncHandler):
        '''(integer idealW,integer idealH,Image object) = CachedThumbnailAsync(integer size,object asyncHandler)'''
        pass

    def CachedThumbnailCustom(self, w, h):
        '''(integer idealW,integer idealH,Image object) = CachedThumbnailCustom(integer w,integer h)'''
        pass

    def CachedThumbnailCustomAsync(self, w, h, asyncHandler):
        '''(integer idealW,integer idealH,Image object) = CachedThumbnailCustomAsync(integer w,integer h,object asyncHandler)'''
        pass

    def ChildGridPositionLookup(self, childPath):
        '''(integer x,integer y) = ChildGridPositionLookup(string childPath)'''
        pass

    def ChildGridPositionSet(self, childPath, x, y):
        '''ChildGridPositionSet(string childPath,integer x,integer y)'''
        pass

    def ChildManualOrderLookup(self, childPath):
        '''integer pos = ChildManualOrderLookup(string childPath)'''
        pass

    def ChildManualOrderSet(self, childPath, pos):
        '''ChildManualOrderSet(string childPath,integer pos)'''
        pass

    def CommitSharedMarkup(self, sharedMarkup):
        '''CommitSharedMarkup(object sharedMarkup)'''
        pass

    def CommitUserMarkup(self, userMarkup):
        '''CommitUserMarkup(object userMarkup)'''
        pass

    def Desc(self):
        '''string = Desc()'''
        pass

    def DirCount(self, listMode):
        '''integer = DirCount(integer listMode)'''
        pass

    def DirList(self, listMode, asCopy):
        '''Array object = DirList(integer listMode,integer asCopy)'''
        pass

    def Extension(self):
        '''string = Extension()'''
        pass

    def GridExtents(self):
        '''(integer bottom,integer right) = GridExtents()'''
        pass

    def GridInsert(self, doRows, x, y, count):
        '''GridInsert(integer doRows,integer x,integer y,integer count)'''
        pass

    def GridIsEmpty(self, doRows, x, y):
        '''boolean = GridIsEmpty(integer doRows,integer x,integer y)'''
        pass

    def GridIsEmptyCell(self, x, y):
        '''(boolean,DirCacheEntry object) = GridIsEmptyCell(integer x,integer y)'''
        pass

    def GridRemove(self, doRows, x, y, count, force):
        '''GridRemove(integer doRows,integer x,integer y,integer count,integer force)'''
        pass

    def GridSetExtents(self, bottom, right):
        '''GridSetExtents(integer bottom,integer right)'''
        pass

    def Label(self):
        '''string = Label()'''
        pass

    def Metadata(self):
        '''Attributes object = Metadata()'''
        pass

    def ModTime(self):
        '''string = ModTime()'''
        pass

    def Name(self):
        '''string = Name()'''
        pass

    def Parent(self):
        '''DirCacheEntry object = Parent()'''
        pass

    def Path(self):
        '''string = Path()'''
        pass

    def ReferenceSource(self):
        '''DirCacheEntry object = ReferenceSource()'''
        pass

    def ReferencedCount(self):
        '''integer = ReferencedCount()'''
        pass

    def ReferencedList(self, asCopy):
        '''Array object = ReferencedList(integer asCopy)'''
        pass

    def SharedMarkup(self, asWritable):
        '''Unknown object = SharedMarkup(integer asWritable)'''
        pass

    def Size(self):
        '''float size = Size()'''
        pass

    def Thumbnail(self, w, h):
        '''(integer idealW,integer idealH,Image object) = Thumbnail(integer w,integer h)'''
        pass

    def ToolTip(self):
        '''string = ToolTip()'''
        pass

    def Type(self):
        '''integer type = Type()'''
        pass

    def UserMarkup(self, asWritable):
        '''Unknown object = UserMarkup(integer asWritable)'''
        pass

    def Username(self):
        '''string = Username()'''
        pass

    def WasRecognized(self):
        '''WasRecognized()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DirCacheFileMetrics:
    def Flags(self):
        '''integer flags = Flags()'''
        pass

    def Markup(self):
        '''Attributes object = Markup()'''
        pass

    def Metadata(self):
        '''Attributes object = Metadata()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DirCacheGridPosDest:
    def GridPos(self):
        '''(DirCacheEntry object,integer x,integer y) = GridPos()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DirCacheManualOrderDest:
    def BetweenPaths(self, asPaths):
        '''(DirCacheEntry object,string nameBefore,string nameAfter) = BetweenPaths(integer asPaths)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DirCacheSynthetic:
    def Lookup(self, path):
        '''DirCacheSyntheticEntry object = Lookup(string path)'''
        pass

    def Root(self):
        '''DirCacheSyntheticEntry object = Root()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DirCacheSyntheticEntry:
    def DirBuild(self):
        '''DirBuild()'''
        pass

    def DirByIndex(self, listMode, index):
        '''DirCacheSyntheticEntry object = DirByIndex(integer listMode,integer index)'''
        pass

    def DirCount(self, listMode):
        '''integer = DirCount(integer listMode)'''
        pass

    def DirUsername(self):
        '''string = DirUsername()'''
        pass

    def FileExtension(self):
        '''string = FileExtension()'''
        pass

    def IsFile(self):
        '''boolean = IsFile()'''
        pass

    def ModTime(self):
        '''string = ModTime()'''
        pass

    def Name(self):
        '''string = Name()'''
        pass

    def Path(self):
        '''string = Path()'''
        pass

    def Size(self):
        '''float = Size()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DirEntryThumbAsync:
    def Failed(self, dirCacheEntry):
        '''Failed(object dirCacheEntry)'''
        pass

    def Ident(self):
        '''string ident = Ident()'''
        pass

    def Ready(self, dirCacheEntry, idealW, idealH, image):
        '''Ready(object dirCacheEntry,integer idealW,integer idealH,object image)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DrawingOverride:
    def AffectedItems(self, scene, collection):
        '''AffectedItems(object scene,object collection)'''
        pass

    def CleanupContext(self):
        '''CleanupContext()'''
        pass

    def DrawVisitor(self, scene, view):
        '''Unknown object = DrawVisitor(object scene,object view)'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def InitContext(self):
        '''InitContext()'''
        pass

    def SetItem(self, item):
        '''integer styles = SetItem(object item)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Drop:
    def ActionList(self, source, dest, addDropAction):
        '''ActionList(object source,object dest,object addDropAction)'''
        pass

    def Drop(self, source, dest, action):
        '''Drop(object source,object dest,integer action)'''
        pass

    def Preview(self, source, dest, action, draw):
        '''Preview(object source,object dest,integer action,object draw)'''
        pass

    def Recognize(self, source):
        '''Recognize(object source)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class DropPreviewDefault:
    def Draw(self):
        '''Draw()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Edge:
    def ClearMapValue(self, map):
        '''ClearMapValue(id map)'''
        pass

    def Endpoints(self):
        '''(id point0,id point1) = Endpoints()'''
        pass

    def Enumerate(self, mode, visitor, monitor):
        '''Enumerate(integer mode,object visitor,object monitor)'''
        pass

    def ID(self):
        '''id = ID()'''
        pass

    def Index(self):
        '''integer index = Index()'''
        pass

    def IsBorder(self):
        '''boolean = IsBorder()'''
        pass

    def MapEvaluate(self, map, value):
        '''boolean = MapEvaluate(id map,float[] value)'''
        pass

    def MapValue(self, map, value):
        '''boolean = MapValue(id map,float[] value)'''
        pass

    def Mesh(self):
        '''Unknown object = Mesh()'''
        pass

    def OnSymmetryCenter(self):
        '''OnSymmetryCenter()'''
        pass

    def PolygonByIndex(self, index):
        '''id polygonID = PolygonByIndex(integer index)'''
        pass

    def PolygonCount(self):
        '''integer count = PolygonCount()'''
        pass

    def RepresentativePolygon(self):
        '''(id polygonID,integer index) = RepresentativePolygon()'''
        pass

    def Select(self, edge):
        '''Select(id edge)'''
        pass

    def SelectByIndex(self, index):
        '''SelectByIndex(integer index)'''
        pass

    def SelectEndpoints(self, v0, v1):
        '''SelectEndpoints(id v0,id v1)'''
        pass

    def SetMapValue(self, map, value):
        '''SetMapValue(id map,float[] value)'''
        pass

    def SetMarks(self, set):
        '''SetMarks(integer set)'''
        pass

    def SharedPolygon(self, edgeID):
        '''id polygonID = SharedPolygon(id edgeID)'''
        pass

    def Spawn(self):
        '''Edge object = Spawn()'''
        pass

    def Symmetry(self):
        '''id edgeID = Symmetry()'''
        pass

    def TestMarks(self, mode):
        '''boolean = TestMarks(integer mode)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class EdgePacketTranslation:
    def Item(self, packet):
        '''Item object = Item(pointer packet)'''
        pass

    def Mesh(self, packet):
        '''Mesh object = Mesh(pointer packet)'''
        pass

    def Packet(self, vertexA, vertexB, polygon, mesh):
        '''pointer = Packet(id vertexA,id vertexB,id polygon,object mesh)'''
        pass

    def Polygon(self, packet):
        '''id polygon = Polygon(pointer packet)'''
        pass

    def Vertices(self, packet):
        '''(id vertexA,id vertexB) = Vertices(pointer packet)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ElementAxisPacket:
    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ElementCenterPacket:
    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Envelope:
    def Clear(self):
        '''Clear()'''
        pass

    def EndBehavior(self, side):
        '''integer = EndBehavior(integer side)'''
        pass

    def Enumerator(self):
        '''Keyframe object = Enumerator()'''
        pass

    def EvaluateF(self, time):
        '''float value = EvaluateF(float time)'''
        pass

    def EvaluateI(self, time):
        '''integer value = EvaluateI(float time)'''
        pass

    def Interpolation(self):
        '''integer = Interpolation()'''
        pass

    def IsInt(self):
        '''integer = IsInt()'''
        pass

    def SetEndBehavior(self, behavior, side):
        '''SetEndBehavior(integer behavior,integer side)'''
        pass

    def SetInterpolation(self, type):
        '''SetInterpolation(integer type)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class EvalModifier:
    def Alloc(self, item, index, eval):
        '''Unknown object = Alloc(object item,integer index,object eval)'''
        pass

    def Next(self):
        '''(object,integer index) = Next()'''
        pass

    def Reset(self, scene):
        '''Reset(object scene)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Evaluation:
    def AddChannel(self, item, index, type):
        '''integer attr = AddChannel(object item,integer index,integer type)'''
        pass

    def AddChannelName(self, item, name, type):
        '''integer attr = AddChannelName(object item,string name,integer type)'''
        pass

    def ClearAlternate(self):
        '''ClearAlternate()'''
        pass

    def GetBakedSample(self, index, bracket):
        '''(float fraction,Unknown object) = GetBakedSample(integer index,integer bracket)'''
        pass

    def GetCache(self):
        '''pointer = GetCache()'''
        pass

    def GetDT(self):
        '''float = GetDT()'''
        pass

    def ReadTime(self):
        '''integer attr = ReadTime()'''
        pass

    def SetAlternate(self):
        '''ChannelWrite object = SetAlternate()'''
        pass

    def SetAlternateSetup(self):
        '''SetAlternateSetup()'''
        pass

    def SetAlternateTime(self, time):
        '''SetAlternateTime(float time)'''
        pass

    def SetCache(self, cache):
        '''SetCache(pointer cache)'''
        pass

    def SimulationRange(self):
        '''(float start,float end) = SimulationRange()'''
        pass

    def SimulationState(self):
        '''integer flags = SimulationState()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class EvaluationStack:
    def AddFilter(self, filter):
        '''AddFilter(object filter)'''
        pass

    def Branch(self):
        '''EvaluationStack object = Branch()'''
        pass

    def Type(self):
        '''string = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class EventGuide:
    def Flags(self):
        '''integer = Flags()'''
        pass

    def Limits(self, inner, outer):
        '''integer = Limits(float inner,float outer)'''
        pass

    def Proximity(self, toolVector, element):
        '''(integer,vector pos,float dist,integer priority) = Proximity(object toolVector,pointer element)'''
        pass

    def SetDrawState(self, flags):
        '''integer = SetDrawState(integer flags)'''
        pass

    def SetFlags(self, flags):
        '''SetFlags(integer flags)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class EventTranslatePacket:
    def AddGuide(self, guide, client):
        '''AddGuide(object guide,pointer client)'''
        pass

    def GetConstraint(self, toolVector):
        '''(integer,vector center,vector vector) = GetConstraint(object toolVector)'''
        pass

    def GetNewPosition(self, toolVector):
        '''vector pos = GetNewPosition(object toolVector)'''
        pass

    def HitHandle(self, toolVector, handle):
        '''HitHandle(object toolVector,vector handle)'''
        pass

    def ModelDelta(self, toolVector, handle):
        '''vector delta = ModelDelta(object toolVector,vector handle)'''
        pass

    def ModelLineDelta(self, toolVector, center, dir, handle):
        '''vector delta = ModelLineDelta(object toolVector,vector center,vector dir,vector handle)'''
        pass

    def ModelPlaneDelta(self, toolVector, center, normal, handle):
        '''vector delta = ModelPlaneDelta(object toolVector,vector center,vector normal,vector handle)'''
        pass

    def RemoveGuide(self, guide, client):
        '''integer = RemoveGuide(object guide,pointer client)'''
        pass

    def ScreenToRay(self, toolVector, x, y):
        '''(vector pos,vector dir) = ScreenToRay(object toolVector,float x,float y)'''
        pass

    def SetLinearConstraint(self, toolVector, center, dir):
        '''SetLinearConstraint(object toolVector,vector center,vector dir)'''
        pass

    def SetLinearSnapConstraint(self, toolVector, center, dir):
        '''SetLinearSnapConstraint(object toolVector,vector center,vector dir)'''
        pass

    def SetPlanarConstraint(self, toolVector, center, normal):
        '''SetPlanarConstraint(object toolVector,vector center,vector normal)'''
        pass

    def SetPlanarSnapConstraint(self, toolVector, center, dir):
        '''SetPlanarSnapConstraint(object toolVector,vector center,vector dir)'''
        pass

    def SetSnapRange(self, inner, outer):
        '''SetSnapRange(float inner,float outer)'''
        pass

    def SnapPosition(self, toolVector, pos):
        '''(integer,vector snapPos) = SnapPosition(object toolVector,vector pos)'''
        pass

    def ToModel(self, toolVector):
        '''(integer,vector pos,vector axis) = ToModel(object toolVector)'''
        pass

    def ToModelLine(self, toolVector, center, dir):
        '''vector pos = ToModelLine(object toolVector,vector center,vector dir)'''
        pass

    def ToModelPlane(self, toolVector, center, normal):
        '''vector pos = ToModelPlane(object toolVector,vector center,vector normal)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ExternalRender:
    def Pause(self):
        '''Pause()'''
        pass

    def Reset(self):
        '''Reset()'''
        pass

    def SetBufferQueue(self, bufferQueue):
        '''SetBufferQueue(object bufferQueue)'''
        pass

    def SetNotifier(self, notifier):
        '''SetNotifier(object notifier)'''
        pass

    def Start(self):
        '''Start()'''
        pass

    def Stop(self):
        '''Stop()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ExternalRenderBufferQueue:
    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ExternalRenderNotifier:
    def SetStatusText(self, text):
        '''SetStatusText(string text)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Factory:
    def InfoTag(self, type):
        '''string value = InfoTag(string type)'''
        pass

    def Module(self):
        '''string module = Module()'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def Spawn(self):
        '''Unknown object = Spawn()'''
        pass

    def TagByIndex(self, index):
        '''(string type,string value) = TagByIndex(integer index)'''
        pass

    def TagCount(self):
        '''integer count = TagCount()'''
        pass

    def UserName(self):
        '''string userName = UserName()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Falloff:
    def Bounds(self):
        '''bounds box = Bounds()'''
        pass

    def SetMesh(self, mesh):
        '''matrix xfrm = SetMesh(object mesh)'''
        pass

    def WeightF(self, position, point, polygon):
        '''float = WeightF(vector position,id point,id polygon)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class FalloffPacket:
    def Screen(self, vts, x, y):
        '''float = Screen(object vts,integer x,integer y)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class FileRedirect:
    def AddSearchPath(self, path):
        '''AddSearchPath(string path)'''
        pass

    def Locate(self, path, type):
        '''string = Locate(string path,string type)'''
        pass

    def LocateSequence(self, pattern, type):
        '''(integer first,integer last,string) = LocateSequence(string pattern,string type)'''
        pass

    def NeutralFormat(self, allow):
        '''NeutralFormat(integer allow)'''
        pass

    def Reference(self, path):
        '''string = Reference(string path)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class FileReference:
    def Mode(self):
        '''integer mode = Mode()'''
        pass

    def NiceName(self):
        '''string = NiceName()'''
        pass

    def Path(self):
        '''string path = Path()'''
        pass

    def SubByIndex(self, index):
        '''FileReference object = SubByIndex(integer index)'''
        pass

    def SubCount(self):
        '''integer count = SubCount()'''
        pass

    def Type(self):
        '''integer type = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class FileSysDest:
    def AsDir(self):
        '''string dir = AsDir()'''
        pass

    def IsDir(self):
        '''boolean = IsDir()'''
        pass

    def Path(self):
        '''string path = Path()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Force:
    def Flags(self):
        '''integer = Flags()'''
        pass

    def Force(self, pos):
        '''vector force = Force(vector pos)'''
        pass

    def ForceM(self, pos, mass):
        '''vector force = ForceM(vector pos,float mass)'''
        pass

    def ForceV(self, pos, velocity):
        '''vector force = ForceV(vector pos,vector velocity)'''
        pass

    def ForceVM(self, pos, velocity, mass):
        '''vector force = ForceVM(vector pos,vector velocity,float mass)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class FormDeleteEntryDest:
    def Delete(self, hash):
        '''Delete(string hash)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class FormEntryDest:
    def ControlHash(self):
        '''string hash = ControlHash()'''
        pass

    def FormHash(self):
        '''string hash = FormHash()'''
        pass

    def Position(self):
        '''integer pos = Position()'''
        pass

    def SyntheticIndex(self):
        '''integer index = SyntheticIndex()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class FormEntryDropPreview:
    def MarkControl(self, hash, syntheticIndex, pos):
        '''MarkControl(string hash,integer syntheticIndex,integer pos)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class FrameBuffer:
    def AddAttribute(self, name, type):
        '''integer index = AddAttribute(string name,string type)'''
        pass

    def Alpha(self, index):
        '''object = Alpha(integer index)'''
        pass

    def AlphaIndex(self, index):
        '''integer = AlphaIndex(integer index)'''
        pass

    def AreaProcessingActive(self, bufferIndex):
        '''integer active = AreaProcessingActive(integer bufferIndex)'''
        pass

    def BucketsOnDisk(self, index):
        '''integer = BucketsOnDisk(integer index)'''
        pass

    def ByIndex(self, index):
        '''object = ByIndex(integer index)'''
        pass

    def Count(self):
        '''integer = Count()'''
        pass

    def CreateFrameBufferTargetImage(self, type, w, h):
        '''Unknown object = CreateFrameBufferTargetImage(integer type,integer w,integer h)'''
        pass

    def GetBloomEnabled(self, bufferIndex):
        '''integer = GetBloomEnabled(integer bufferIndex)'''
        pass

    def GetBloomRadius(self, bufferIndex):
        '''float = GetBloomRadius(integer bufferIndex)'''
        pass

    def GetBloomThreshold(self, bufferIndex):
        '''float = GetBloomThreshold(integer bufferIndex)'''
        pass

    def GetColorization(self, bufferIndex):
        '''float = GetColorization(integer bufferIndex)'''
        pass

    def GetExpType(self, bufferIndex):
        '''integer = GetExpType(integer bufferIndex)'''
        pass

    def GetHueOffset(self, bufferIndex):
        '''float = GetHueOffset(integer bufferIndex)'''
        pass

    def GetISO(self, bufferIndex):
        '''float = GetISO(integer bufferIndex)'''
        pass

    def GetInputBlackLevel(self, bufferIndex):
        '''float = GetInputBlackLevel(integer bufferIndex)'''
        pass

    def GetInputBlueGrayLevel(self, bufferIndex):
        '''float = GetInputBlueGrayLevel(integer bufferIndex)'''
        pass

    def GetInputGrayLevel(self, bufferIndex):
        '''float = GetInputGrayLevel(integer bufferIndex)'''
        pass

    def GetInputGreenGrayLevel(self, bufferIndex):
        '''float = GetInputGreenGrayLevel(integer bufferIndex)'''
        pass

    def GetInputMaxBlueLevel(self, bufferIndex):
        '''float = GetInputMaxBlueLevel(integer bufferIndex)'''
        pass

    def GetInputMaxGreenLevel(self, bufferIndex):
        '''float = GetInputMaxGreenLevel(integer bufferIndex)'''
        pass

    def GetInputMaxRedLevel(self, bufferIndex):
        '''float = GetInputMaxRedLevel(integer bufferIndex)'''
        pass

    def GetInputMinBlueLevel(self, bufferIndex):
        '''float = GetInputMinBlueLevel(integer bufferIndex)'''
        pass

    def GetInputMinGreenLevel(self, bufferIndex):
        '''float = GetInputMinGreenLevel(integer bufferIndex)'''
        pass

    def GetInputMinRedLevel(self, bufferIndex):
        '''float = GetInputMinRedLevel(integer bufferIndex)'''
        pass

    def GetInputRedGrayLevel(self, bufferIndex):
        '''float = GetInputRedGrayLevel(integer bufferIndex)'''
        pass

    def GetInputWhiteLevel(self, bufferIndex):
        '''float = GetInputWhiteLevel(integer bufferIndex)'''
        pass

    def GetInvInputBlueGrayLevel(self, bufferIndex):
        '''float = GetInvInputBlueGrayLevel(integer bufferIndex)'''
        pass

    def GetInvInputGrayLevel(self, bufferIndex):
        '''float = GetInvInputGrayLevel(integer bufferIndex)'''
        pass

    def GetInvInputGreenGrayLevel(self, bufferIndex):
        '''float = GetInvInputGreenGrayLevel(integer bufferIndex)'''
        pass

    def GetInvInputRedGrayLevel(self, bufferIndex):
        '''float = GetInvInputRedGrayLevel(integer bufferIndex)'''
        pass

    def GetOutputBlackLevel(self, bufferIndex):
        '''float = GetOutputBlackLevel(integer bufferIndex)'''
        pass

    def GetOutputColorspace(self):
        '''string = GetOutputColorspace()'''
        pass

    def GetOutputGamma(self, bufferIndex):
        '''float = GetOutputGamma(integer bufferIndex)'''
        pass

    def GetOutputInvGamma(self, bufferIndex):
        '''float = GetOutputInvGamma(integer bufferIndex)'''
        pass

    def GetOutputMaxBlueLevel(self, bufferIndex):
        '''float = GetOutputMaxBlueLevel(integer bufferIndex)'''
        pass

    def GetOutputMaxGreenLevel(self, bufferIndex):
        '''float = GetOutputMaxGreenLevel(integer bufferIndex)'''
        pass

    def GetOutputMaxRedLevel(self, bufferIndex):
        '''float = GetOutputMaxRedLevel(integer bufferIndex)'''
        pass

    def GetOutputMinBlueLevel(self, bufferIndex):
        '''float = GetOutputMinBlueLevel(integer bufferIndex)'''
        pass

    def GetOutputMinGreenLevel(self, bufferIndex):
        '''float = GetOutputMinGreenLevel(integer bufferIndex)'''
        pass

    def GetOutputMinRedLevel(self, bufferIndex):
        '''float = GetOutputMinRedLevel(integer bufferIndex)'''
        pass

    def GetOutputWhiteLevel(self, bufferIndex):
        '''float = GetOutputWhiteLevel(integer bufferIndex)'''
        pass

    def GetRenderPassName(self, name):
        '''GetRenderPassName(byte[] name)'''
        pass

    def GetSaturation(self, bufferIndex):
        '''float = GetSaturation(integer bufferIndex)'''
        pass

    def GetSaveProcessed(self, bufferIndex):
        '''integer = GetSaveProcessed(integer bufferIndex)'''
        pass

    def GetStereoComposite(self):
        '''integer composite = GetStereoComposite()'''
        pass

    def GetStereoEyeDisplay(self):
        '''integer eyeDisplay = GetStereoEyeDisplay()'''
        pass

    def GetTargetColor(self, bufferIndex):
        '''float color = GetTargetColor(integer bufferIndex)'''
        pass

    def GetToneAmt(self, bufferIndex):
        '''float = GetToneAmt(integer bufferIndex)'''
        pass

    def GetToneMap(self, bufferIndex):
        '''integer = GetToneMap(integer bufferIndex)'''
        pass

    def GetVignetteAmount(self, bufferIndex):
        '''float = GetVignetteAmount(integer bufferIndex)'''
        pass

    def IsStereo(self):
        '''integer isStereo = IsStereo()'''
        pass

    def Lookup(self, name, item):
        '''object = Lookup(string name,object item)'''
        pass

    def LookupByIdentity(self, identity):
        '''object = LookupByIdentity(string identity)'''
        pass

    def SetBloomEnabled(self, bufferIndex, enabled):
        '''SetBloomEnabled(integer bufferIndex,integer enabled)'''
        pass

    def SetBloomRadius(self, bufferIndex, radius):
        '''SetBloomRadius(integer bufferIndex,float radius)'''
        pass

    def SetBloomThreshold(self, bufferIndex, threshold):
        '''SetBloomThreshold(integer bufferIndex,float threshold)'''
        pass

    def SetColorization(self, bufferIndex, colorization):
        '''SetColorization(integer bufferIndex,float colorization)'''
        pass

    def SetExpType(self, bufferIndex, expType):
        '''SetExpType(integer bufferIndex,integer expType)'''
        pass

    def SetEyeSide(self, eyeSide):
        '''SetEyeSide(integer eyeSide)'''
        pass

    def SetHueOffset(self, bufferIndex, hueOffset):
        '''SetHueOffset(integer bufferIndex,float hueOffset)'''
        pass

    def SetISO(self, bufferIndex, iso):
        '''SetISO(integer bufferIndex,float iso)'''
        pass

    def SetInputBlackLevel(self, bufferIndex, blackLevel):
        '''SetInputBlackLevel(integer bufferIndex,float blackLevel)'''
        pass

    def SetInputBlueGrayLevel(self, bufferIndex, gamma):
        '''SetInputBlueGrayLevel(integer bufferIndex,float gamma)'''
        pass

    def SetInputGrayLevel(self, bufferIndex, gamma):
        '''SetInputGrayLevel(integer bufferIndex,float gamma)'''
        pass

    def SetInputGreenGrayLevel(self, bufferIndex, gamma):
        '''SetInputGreenGrayLevel(integer bufferIndex,float gamma)'''
        pass

    def SetInputMaxBlueLevel(self, bufferIndex, level):
        '''SetInputMaxBlueLevel(integer bufferIndex,float level)'''
        pass

    def SetInputMaxGreenLevel(self, bufferIndex, level):
        '''SetInputMaxGreenLevel(integer bufferIndex,float level)'''
        pass

    def SetInputMaxRedLevel(self, bufferIndex, level):
        '''SetInputMaxRedLevel(integer bufferIndex,float level)'''
        pass

    def SetInputMinBlueLevel(self, bufferIndex, level):
        '''SetInputMinBlueLevel(integer bufferIndex,float level)'''
        pass

    def SetInputMinGreenLevel(self, bufferIndex, level):
        '''SetInputMinGreenLevel(integer bufferIndex,float level)'''
        pass

    def SetInputMinRedLevel(self, bufferIndex, level):
        '''SetInputMinRedLevel(integer bufferIndex,float level)'''
        pass

    def SetInputRedGrayLevel(self, bufferIndex, gamma):
        '''SetInputRedGrayLevel(integer bufferIndex,float gamma)'''
        pass

    def SetInputWhiteLevel(self, bufferIndex, whiteLevel):
        '''SetInputWhiteLevel(integer bufferIndex,float whiteLevel)'''
        pass

    def SetOutputBlackLevel(self, bufferIndex, blackLevel):
        '''SetOutputBlackLevel(integer bufferIndex,float blackLevel)'''
        pass

    def SetOutputColormapping(self, colormapping):
        '''SetOutputColormapping(object colormapping)'''
        pass

    def SetOutputColorspace(self, colorspace):
        '''SetOutputColorspace(string colorspace)'''
        pass

    def SetOutputGamma(self, bufferIndex, gamma):
        '''SetOutputGamma(integer bufferIndex,float gamma)'''
        pass

    def SetOutputMaxBlueLevel(self, bufferIndex, whiteLevel):
        '''SetOutputMaxBlueLevel(integer bufferIndex,float whiteLevel)'''
        pass

    def SetOutputMaxGreenLevel(self, bufferIndex, whiteLevel):
        '''SetOutputMaxGreenLevel(integer bufferIndex,float whiteLevel)'''
        pass

    def SetOutputMaxRedLevel(self, bufferIndex, whiteLevel):
        '''SetOutputMaxRedLevel(integer bufferIndex,float whiteLevel)'''
        pass

    def SetOutputMinBlueLevel(self, bufferIndex, blackLevel):
        '''SetOutputMinBlueLevel(integer bufferIndex,float blackLevel)'''
        pass

    def SetOutputMinGreenLevel(self, bufferIndex, blackLevel):
        '''SetOutputMinGreenLevel(integer bufferIndex,float blackLevel)'''
        pass

    def SetOutputMinRedLevel(self, bufferIndex, blackLevel):
        '''SetOutputMinRedLevel(integer bufferIndex,float blackLevel)'''
        pass

    def SetOutputWhiteLevel(self, bufferIndex, whiteLevel):
        '''SetOutputWhiteLevel(integer bufferIndex,float whiteLevel)'''
        pass

    def SetRenderPassName(self, name):
        '''SetRenderPassName(string name)'''
        pass

    def SetSaturation(self, bufferIndex, saturation):
        '''SetSaturation(integer bufferIndex,float saturation)'''
        pass

    def SetSaveProcessed(self, bufferIndex, enabled):
        '''SetSaveProcessed(integer bufferIndex,integer enabled)'''
        pass

    def SetStereoComposite(self, composite):
        '''SetStereoComposite(integer composite)'''
        pass

    def SetStereoEyeDisplay(self, eyeDisplay):
        '''SetStereoEyeDisplay(integer eyeDisplay)'''
        pass

    def SetTargetColor(self, bufferIndex, color):
        '''SetTargetColor(integer bufferIndex,double[] color)'''
        pass

    def SetToneAmt(self, bufferIndex, toneAmt):
        '''SetToneAmt(integer bufferIndex,float toneAmt)'''
        pass

    def SetToneMap(self, bufferIndex, toneMap):
        '''SetToneMap(integer bufferIndex,integer toneMap)'''
        pass

    def SetVignetteAmount(self, bufferIndex, radius):
        '''SetVignetteAmount(integer bufferIndex,float radius)'''
        pass

    def Size(self, index):
        '''(integer width,integer height) = Size(integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GLImage:
    def SetImage(self, image):
        '''SetImage(object image)'''
        pass

    def Size(self):
        '''(float w,float h) = Size()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GLMaterial:
    def Alpha(self):
        '''float alpha = Alpha()'''
        pass

    def Color(self):
        '''vector color = Color()'''
        pass

    def DiffuseAmount(self):
        '''float amount = DiffuseAmount()'''
        pass

    def DiffuseColor(self):
        '''vector color = DiffuseColor()'''
        pass

    def Glossiness(self):
        '''float amount = Glossiness()'''
        pass

    def LuminosityColor(self):
        '''vector color = LuminosityColor()'''
        pass

    def ReflectionColor(self):
        '''vector color = ReflectionColor()'''
        pass

    def SpecularAmount(self):
        '''float amount = SpecularAmount()'''
        pass

    def SpecularColor(self):
        '''vector color = SpecularColor()'''
        pass

    def TwoSide(self):
        '''integer value = TwoSide()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GLViewport:
    def Draw(self):
        '''Draw()'''
        pass

    def DropDestination(self, x, y):
        '''Unknown object = DropDestination(integer x,integer y)'''
        pass

    def Initialize(self, client):
        '''Initialize(object client)'''
        pass

    def MouseEvent(self, event):
        '''MouseEvent(integer event)'''
        pass

    def SelectViewport(self):
        '''SelectViewport()'''
        pass

    def SetSize(self, w, h):
        '''SetSize(integer w,integer h)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GLViewportClient:
    def Invalidate(self):
        '''Invalidate()'''
        pass

    def MouseButton(self):
        '''integer button = MouseButton()'''
        pass

    def MouseCount(self):
        '''integer count = MouseCount()'''
        pass

    def MousePosition(self):
        '''(integer x,integer y) = MousePosition()'''
        pass

    def TabletPressure(self):
        '''float press = TabletPressure()'''
        pass

    def TabletTilt(self):
        '''float tilt = TabletTilt()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GeoCacheSegment:
    def GetBBox(self):
        '''bounds bbox = GetBBox()'''
        pass

    def GetPolygonVertexFeature(self, feature, featureData, count, start):
        '''GetPolygonVertexFeature(integer feature,pointer featureData,integer count,integer start)'''
        pass

    def GetPolygonVertexInds(self, count, start):
        '''integer polyVertexInds = GetPolygonVertexInds(integer count,integer start)'''
        pass

    def GetVertexFeature(self, feature, featureData, count, start):
        '''GetVertexFeature(integer feature,pointer featureData,integer count,integer start)'''
        pass

    def PolygonCount(self):
        '''integer count = PolygonCount()'''
        pass

    def VertexCount(self):
        '''integer count = VertexCount()'''
        pass

    def VertexFeatureCount(self, feature):
        '''integer count = VertexFeatureCount(integer feature)'''
        pass

    def VertsPerPoly(self):
        '''integer count = VertsPerPoly()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GeoCacheSurface:
    def GetBBox(self):
        '''bounds bbox = GetBBox()'''
        pass

    def GetXfrm(self, endpoint):
        '''(vector pos,matrix rot,vector scl) = GetXfrm(integer endpoint)'''
        pass

    def ID(self):
        '''integer = ID()'''
        pass

    def InstanceIndex(self):
        '''integer = InstanceIndex()'''
        pass

    def IsInstanced(self):
        '''integer = IsInstanced()'''
        pass

    def IsValid(self):
        '''integer = IsValid()'''
        pass

    def LoadSegments(self):
        '''LoadSegments()'''
        pass

    def MaterialPTag(self):
        '''string = MaterialPTag()'''
        pass

    def PartPTag(self):
        '''string = PartPTag()'''
        pass

    def PickPTag(self):
        '''string = PickPTag()'''
        pass

    def PolygonCount(self):
        '''integer count = PolygonCount()'''
        pass

    def SegmentCount(self):
        '''integer count = SegmentCount()'''
        pass

    def ShaderLayerCount(self):
        '''integer count = ShaderLayerCount()'''
        pass

    def ShaderMaskName(self):
        '''string name = ShaderMaskName()'''
        pass

    def ShaderMaskType(self):
        '''integer = ShaderMaskType()'''
        pass

    def SourceItem(self):
        '''Unknown object = SourceItem()'''
        pass

    def SourceSurface(self):
        '''Unknown object = SourceSurface()'''
        pass

    def UnloadSegments(self):
        '''UnloadSegments()'''
        pass

    def VertexCount(self):
        '''integer count = VertexCount()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GradientFilter:
    def Evaluate(self, time, value):
        '''float = Evaluate(float time,float value)'''
        pass

    def Generate(self, time):
        '''float = Generate(float time)'''
        pass

    def MultiSample(self, time, other):
        '''float = MultiSample(float time,object other)'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GroupDeformer:
    def DeformerByIndex(self, index):
        '''Item object = DeformerByIndex(integer index)'''
        pass

    def DeformerCount(self):
        '''integer = DeformerCount()'''
        pass

    def PointEffect(self, meshIndex, point, deformer, weight, max):
        '''integer count = PointEffect(integer meshIndex,id point,unsigned[] deformer,float[] weight,integer max)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GroupDest:
    def Group(self):
        '''Item object = Group()'''
        pass

    def Location(self):
        '''integer = Location()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GroupEnumerator:
    def Channel(self):
        '''(Item object,integer index) = Channel()'''
        pass

    def Enumerate(self, visitor, mask):
        '''Enumerate(object visitor,integer mask)'''
        pass

    def Item(self):
        '''Item object = Item()'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GroupItem:
    def Enumerator(self):
        '''GroupEnumerator object = Enumerator()'''
        pass

    def SetType(self, type):
        '''SetType(integer type)'''
        pass

    def Type(self):
        '''integer type = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GroupMemberChanDest:
    def Channel(self):
        '''Unknown object = Channel()'''
        pass

    def Group(self):
        '''Unknown object = Group()'''
        pass

    def Location(self):
        '''integer = Location()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class GroupMemberItemDest:
    def Group(self):
        '''Unknown object = Group()'''
        pass

    def Item(self):
        '''Unknown object = Item()'''
        pass

    def Location(self):
        '''integer = Location()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class HandleDraw:
    def AxisHandle(self, pos, mat, axis, part, len, flags):
        '''AxisHandle(vector pos,matrix mat,integer axis,integer part,float len,integer flags)'''
        pass

    def CrossHandle(self, pos, mat, part, flags):
        '''CrossHandle(vector pos,matrix mat,integer part,integer flags)'''
        pass

    def Handle(self, pos, mat, part, flags):
        '''Handle(vector pos,matrix mat,integer part,integer flags)'''
        pass

    def LineHandleHilight(self, pos, dir, part, flags):
        '''LineHandleHilight(vector pos,vector dir,integer part,integer flags)'''
        pass

    def MoveHandle(self, pos, mat, axis, part, flags):
        '''MoveHandle(vector pos,matrix mat,integer axis,integer part,integer flags)'''
        pass

    def PlaneHandle(self, pos, mat, axis, part, flags):
        '''PlaneHandle(vector pos,matrix mat,integer axis,integer part,integer flags)'''
        pass

    def PlaneHandleHilight(self, pos, norm, part, flags):
        '''PlaneHandleHilight(vector pos,vector norm,integer part,integer flags)'''
        pass

    def PointHandle(self, pos, part, flags):
        '''PointHandle(vector pos,integer part,integer flags)'''
        pass

    def RotateHandle(self, pos, mat, axis, part, sAngle, eAngle, facing, flags):
        '''RotateHandle(vector pos,matrix mat,integer axis,integer part,float sAngle,float eAngle,integer facing,integer flags)'''
        pass

    def RotateMouseHandle(self, center, pos, mat, axis, part, flags):
        '''RotateMouseHandle(vector center,vector pos,matrix mat,integer axis,integer part,integer flags)'''
        pass

    def ScaleHandle(self, pos, mat, axis, part, offset, line, flags):
        '''ScaleHandle(vector pos,matrix mat,integer axis,integer part,float offset,integer line,integer flags)'''
        pass

    def XHandle(self, pos, mat, part, flags):
        '''XHandle(vector pos,matrix mat,integer part,integer flags)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Image:
    def Format(self):
        '''integer = Format()'''
        pass

    def GetLine(self, y, type, buf):
        '''data[] = GetLine(integer y,integer type,data[] buf)'''
        pass

    def GetPixel(self, x, y, type, pixel):
        '''GetPixel(integer x,integer y,integer type,data[] pixel)'''
        pass

    def Size(self):
        '''(integer w,integer h) = Size()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ImageFilter:
    def Generate(self, width, height, monitor):
        '''Image object = Generate(integer width,integer height,object monitor)'''
        pass

    def MultiSample(self, monitor, image):
        '''Image object = MultiSample(object monitor,object image)'''
        pass

    def SingleSample(self, src):
        '''vector dest = SingleSample(vector src)'''
        pass

    def SingleSampleN(self, src, num):
        '''float dest = SingleSampleN(float[] src,integer num)'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ImageFilterMetrics:
    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ImageLevelSample:
    def Count(self):
        '''integer = Count()'''
        pass

    def GetLevelSize(self, level):
        '''(integer width,integer height) = GetLevelSize(integer level)'''
        pass

    def GetLine(self, level, y, buf):
        '''float[] = GetLine(integer level,integer y,float[] buf)'''
        pass

    def GetPixel(self, level, x, y, type, pixel):
        '''GetPixel(integer level,integer x,integer y,integer type,data[] pixel)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ImageLoaderTarget:
    def SetColorspace(self, colorspace):
        '''SetColorspace(string colorspace)'''
        pass

    def SetColorspaceDepth(self, depth):
        '''SetColorspaceDepth(integer depth)'''
        pass

    def SetMap(self, ncolor):
        '''SetMap(integer ncolor)'''
        pass

    def SetSize(self, type, width, height):
        '''SetSize(integer type,integer width,integer height)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ImageMonitor:
    def AspectRange(self):
        '''(float minAspect,float maxAspect,float idealAspect) = AspectRange()'''
        pass

    def Draw(self, imageForDrawing):
        '''Draw(object imageForDrawing)'''
        pass

    def Image(self, imageToAnalyze, frameBufferToAnalyze, bufferIndex, x1, y1, x2, y2, imageProcessingRead, processedThumbnail):
        '''Image(object imageToAnalyze,object frameBufferToAnalyze,integer bufferIndex,float x1,float y1,float x2,float y2,object imageProcessingRead,object processedThumbnail)'''
        pass

    def ImageProcChanged(self):
        '''ImageProcChanged()'''
        pass

    def ImageSource(self, source):
        '''ImageSource(string source)'''
        pass

    def MouseDown(self, startx, starty, w, h):
        '''MouseDown(integer startx,integer starty,integer w,integer h)'''
        pass

    def MouseMove(self, startx, starty, cx, cy, w, h):
        '''MouseMove(integer startx,integer starty,integer cx,integer cy,integer w,integer h)'''
        pass

    def MouseTrack(self, cx, cy, w, h):
        '''MouseTrack(integer cx,integer cy,integer w,integer h)'''
        pass

    def MouseTrackEnter(self):
        '''MouseTrackEnter()'''
        pass

    def MouseTrackExit(self):
        '''MouseTrackExit()'''
        pass

    def MouseUp(self, startx, starty, cx, cy, w, h):
        '''MouseUp(integer startx,integer starty,integer cx,integer cy,integer w,integer h)'''
        pass

    def ToolTip(self, cx, cy, w, h):
        '''string = ToolTip(integer cx,integer cy,integer w,integer h)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ImageProcessing:
    def ApplyToFrameBuffer(self, frameBuffer, bufferIndex):
        '''ApplyToFrameBuffer(object frameBuffer,integer bufferIndex)'''
        pass

    def ApplyToFrameBufferOverride(self, frameBuffer, bufferIndex, opOverride):
        '''ApplyToFrameBufferOverride(object frameBuffer,integer bufferIndex,integer opOverride)'''
        pass

    def ApplyToImage(self, srcImage, dstImage):
        '''ApplyToImage(object srcImage,object dstImage)'''
        pass

    def ApplyToImageFromFrameBuffer(self, frameBuffer, bufferIndex, image, xOffset, yOffset, zoom):
        '''ApplyToImageFromFrameBuffer(object frameBuffer,integer bufferIndex,object image,float xOffset,float yOffset,float zoom)'''
        pass

    def ApplyToImageFromFrameBufferOverride(self, frameBuffer, bufferIndex, image, xOffset, yOffset, zoom, opOverride):
        '''ApplyToImageFromFrameBufferOverride(object frameBuffer,integer bufferIndex,object image,float xOffset,float yOffset,float zoom,integer opOverride)'''
        pass

    def ApplyToImageOverride(self, srcImage, dstImage, opOverride):
        '''ApplyToImageOverride(object srcImage,object dstImage,integer opOverride)'''
        pass

    def AreaProcessingActive(self):
        '''integer active = AreaProcessingActive()'''
        pass

    def CopySettingsFromFrameBuffer(self, frameBuffer, bufferIndex):
        '''CopySettingsFromFrameBuffer(object frameBuffer,integer bufferIndex)'''
        pass

    def CopySettingsToFrameBuffer(self, frameBuffer, bufferIndex):
        '''CopySettingsToFrameBuffer(object frameBuffer,integer bufferIndex)'''
        pass

    def GetAsReadOnly(self):
        '''ImageProcessing object = GetAsReadOnly()'''
        pass

    def GetBloomEnabled(self):
        '''integer enabled = GetBloomEnabled()'''
        pass

    def GetBloomRadius(self):
        '''float radius = GetBloomRadius()'''
        pass

    def GetBloomThreshold(self):
        '''float threshold = GetBloomThreshold()'''
        pass

    def GetColorSpaceEmbedding(self):
        '''integer colorSpaceEmbedding = GetColorSpaceEmbedding()'''
        pass

    def GetColorization(self):
        '''float colorization = GetColorization()'''
        pass

    def GetExpType(self):
        '''integer expType = GetExpType()'''
        pass

    def GetHueOffset(self):
        '''float hueOffset = GetHueOffset()'''
        pass

    def GetISO(self):
        '''float iso = GetISO()'''
        pass

    def GetIdentifier(self):
        '''string string = GetIdentifier()'''
        pass

    def GetImageProcessingOperators(self):
        '''integer ops = GetImageProcessingOperators()'''
        pass

    def GetInputBlackLevel(self):
        '''float inputBlackLevel = GetInputBlackLevel()'''
        pass

    def GetInputBlueGrayLevel(self):
        '''float gamma = GetInputBlueGrayLevel()'''
        pass

    def GetInputGrayLevel(self):
        '''float gamma = GetInputGrayLevel()'''
        pass

    def GetInputGreenGrayLevel(self):
        '''float gamma = GetInputGreenGrayLevel()'''
        pass

    def GetInputMaxBlueLevel(self):
        '''float inputLevel = GetInputMaxBlueLevel()'''
        pass

    def GetInputMaxGreenLevel(self):
        '''float inputLevel = GetInputMaxGreenLevel()'''
        pass

    def GetInputMaxRedLevel(self):
        '''float inputLevel = GetInputMaxRedLevel()'''
        pass

    def GetInputMinBlueLevel(self):
        '''float inputLevel = GetInputMinBlueLevel()'''
        pass

    def GetInputMinGreenLevel(self):
        '''float inputLevel = GetInputMinGreenLevel()'''
        pass

    def GetInputMinRedLevel(self):
        '''float inputLevel = GetInputMinRedLevel()'''
        pass

    def GetInputRedGrayLevel(self):
        '''float gamma = GetInputRedGrayLevel()'''
        pass

    def GetInputWhiteLevel(self):
        '''float inputWhiteLevel = GetInputWhiteLevel()'''
        pass

    def GetInvInputBlueGrayLevel(self):
        '''float invGamma = GetInvInputBlueGrayLevel()'''
        pass

    def GetInvInputGrayLevel(self):
        '''float invGamma = GetInvInputGrayLevel()'''
        pass

    def GetInvInputGreenGrayLevel(self):
        '''float invGamma = GetInvInputGreenGrayLevel()'''
        pass

    def GetInvInputRedGrayLevel(self):
        '''float invGamma = GetInvInputRedGrayLevel()'''
        pass

    def GetOutputBlackLevel(self):
        '''float outputBlackLevel = GetOutputBlackLevel()'''
        pass

    def GetOutputColorspace(self):
        '''string = GetOutputColorspace()'''
        pass

    def GetOutputGamma(self):
        '''float outputGamma = GetOutputGamma()'''
        pass

    def GetOutputInvGamma(self):
        '''float outputInvGamma = GetOutputInvGamma()'''
        pass

    def GetOutputMaxBlueLevel(self):
        '''float outputLevel = GetOutputMaxBlueLevel()'''
        pass

    def GetOutputMaxGreenLevel(self):
        '''float outputLevel = GetOutputMaxGreenLevel()'''
        pass

    def GetOutputMaxRedLevel(self):
        '''float outputLevel = GetOutputMaxRedLevel()'''
        pass

    def GetOutputMinBlueLevel(self):
        '''float outputLevel = GetOutputMinBlueLevel()'''
        pass

    def GetOutputMinGreenLevel(self):
        '''float outputLevel = GetOutputMinGreenLevel()'''
        pass

    def GetOutputMinRedLevel(self):
        '''float outputLevel = GetOutputMinRedLevel()'''
        pass

    def GetOutputWhiteLevel(self):
        '''float outputWhiteLevel = GetOutputWhiteLevel()'''
        pass

    def GetSaturation(self):
        '''float saturation = GetSaturation()'''
        pass

    def GetSaveProcessed(self):
        '''integer enabled = GetSaveProcessed()'''
        pass

    def GetSourceImageGamma(self):
        '''float gamma = GetSourceImageGamma()'''
        pass

    def GetSourceImageIsStereoSideBySide(self):
        '''integer isStereo = GetSourceImageIsStereoSideBySide()'''
        pass

    def GetStereoComposite(self):
        '''integer mode = GetStereoComposite()'''
        pass

    def GetStereoEye(self):
        '''integer eye = GetStereoEye()'''
        pass

    def GetTargetColor(self):
        '''float color = GetTargetColor()'''
        pass

    def GetToneAmt(self):
        '''float toneAmt = GetToneAmt()'''
        pass

    def GetToneMap(self):
        '''integer toneMap = GetToneMap()'''
        pass

    def GetVignetteAmount(self):
        '''float amount = GetVignetteAmount()'''
        pass

    def Reset(self):
        '''Reset()'''
        pass

    def SetBloomEnabled(self, enabled):
        '''SetBloomEnabled(integer enabled)'''
        pass

    def SetBloomRadius(self, radius):
        '''SetBloomRadius(float radius)'''
        pass

    def SetBloomThreshold(self, threshold):
        '''SetBloomThreshold(float threshold)'''
        pass

    def SetColorization(self, colorization):
        '''SetColorization(float colorization)'''
        pass

    def SetExpType(self, expType):
        '''SetExpType(integer expType)'''
        pass

    def SetHueOffset(self, hueOffset):
        '''SetHueOffset(float hueOffset)'''
        pass

    def SetISO(self, iso):
        '''SetISO(float iso)'''
        pass

    def SetIdentifier(self, string):
        '''SetIdentifier(string string)'''
        pass

    def SetImageProcessingOperators(self, ops):
        '''SetImageProcessingOperators(integer ops)'''
        pass

    def SetInputBlackLevel(self, blackLevel):
        '''SetInputBlackLevel(float blackLevel)'''
        pass

    def SetInputBlueGrayLevel(self, gamma):
        '''SetInputBlueGrayLevel(float gamma)'''
        pass

    def SetInputGrayLevel(self, gamma):
        '''SetInputGrayLevel(float gamma)'''
        pass

    def SetInputGreenGrayLevel(self, gamma):
        '''SetInputGreenGrayLevel(float gamma)'''
        pass

    def SetInputMaxBlueLevel(self, level):
        '''SetInputMaxBlueLevel(float level)'''
        pass

    def SetInputMaxGreenLevel(self, level):
        '''SetInputMaxGreenLevel(float level)'''
        pass

    def SetInputMaxRedLevel(self, level):
        '''SetInputMaxRedLevel(float level)'''
        pass

    def SetInputMinBlueLevel(self, level):
        '''SetInputMinBlueLevel(float level)'''
        pass

    def SetInputMinGreenLevel(self, level):
        '''SetInputMinGreenLevel(float level)'''
        pass

    def SetInputMinRedLevel(self, level):
        '''SetInputMinRedLevel(float level)'''
        pass

    def SetInputRedGrayLevel(self, gamma):
        '''SetInputRedGrayLevel(float gamma)'''
        pass

    def SetInputWhiteLevel(self, whiteLevel):
        '''SetInputWhiteLevel(float whiteLevel)'''
        pass

    def SetOutputBlackLevel(self, blackLevel):
        '''SetOutputBlackLevel(float blackLevel)'''
        pass

    def SetOutputColormapping(self, colormapping):
        '''SetOutputColormapping(object colormapping)'''
        pass

    def SetOutputColorspace(self, colorspace):
        '''SetOutputColorspace(string colorspace)'''
        pass

    def SetOutputGamma(self, gamma):
        '''SetOutputGamma(float gamma)'''
        pass

    def SetOutputMaxBlueLevel(self, outputLevel):
        '''SetOutputMaxBlueLevel(float outputLevel)'''
        pass

    def SetOutputMaxGreenLevel(self, outputLevel):
        '''SetOutputMaxGreenLevel(float outputLevel)'''
        pass

    def SetOutputMaxRedLevel(self, outputLevel):
        '''SetOutputMaxRedLevel(float outputLevel)'''
        pass

    def SetOutputMinBlueLevel(self, outputLevel):
        '''SetOutputMinBlueLevel(float outputLevel)'''
        pass

    def SetOutputMinGreenLevel(self, outputLevel):
        '''SetOutputMinGreenLevel(float outputLevel)'''
        pass

    def SetOutputMinRedLevel(self, outputLevel):
        '''SetOutputMinRedLevel(float outputLevel)'''
        pass

    def SetOutputWhiteLevel(self, whiteLevel):
        '''SetOutputWhiteLevel(float whiteLevel)'''
        pass

    def SetSaturation(self, saturation):
        '''SetSaturation(float saturation)'''
        pass

    def SetSaveProcessed(self, enabled):
        '''SetSaveProcessed(integer enabled)'''
        pass

    def SetSourceImageGamma(self, gamma):
        '''SetSourceImageGamma(float gamma)'''
        pass

    def SetSourceImageIsStereoSideBySide(self, isStereo):
        '''SetSourceImageIsStereoSideBySide(integer isStereo)'''
        pass

    def SetStereoComposite(self, mode):
        '''SetStereoComposite(integer mode)'''
        pass

    def SetStereoEye(self, eye):
        '''SetStereoEye(integer eye)'''
        pass

    def SetTargetColor(self, color):
        '''SetTargetColor(double[] color)'''
        pass

    def SetToneAmt(self, toneAmt):
        '''SetToneAmt(float toneAmt)'''
        pass

    def SetToneMap(self, toneMap):
        '''SetToneMap(integer toneMap)'''
        pass

    def SetVignetteAmount(self, amount):
        '''SetVignetteAmount(float amount)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ImageProcessingListener:
    def Changed(self, identifier, eventCode):
        '''Changed(string identifier,integer eventCode)'''
        pass

    def Reset(self, identifier):
        '''Reset(string identifier)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ImageProcessingRead:
    def ApplyToFrameBuffer(self, frameBuffer, bufferIndex):
        '''ApplyToFrameBuffer(object frameBuffer,integer bufferIndex)'''
        pass

    def ApplyToFrameBufferOverride(self, frameBuffer, bufferIndex, opOverride):
        '''ApplyToFrameBufferOverride(object frameBuffer,integer bufferIndex,integer opOverride)'''
        pass

    def ApplyToImage(self, srcImage, dstImage):
        '''ApplyToImage(object srcImage,object dstImage)'''
        pass

    def ApplyToImageFromFrameBuffer(self, frameBuffer, bufferIndex, image, xOffset, yOffset, zoom):
        '''ApplyToImageFromFrameBuffer(object frameBuffer,integer bufferIndex,object image,float xOffset,float yOffset,float zoom)'''
        pass

    def ApplyToImageFromFrameBufferOverride(self, frameBuffer, bufferIndex, image, xOffset, yOffset, zoom, opOverride):
        '''ApplyToImageFromFrameBufferOverride(object frameBuffer,integer bufferIndex,object image,float xOffset,float yOffset,float zoom,integer opOverride)'''
        pass

    def ApplyToImageOverride(self, srcImage, dstImage, opOverride):
        '''ApplyToImageOverride(object srcImage,object dstImage,integer opOverride)'''
        pass

    def AreaProcessingActive(self):
        '''integer active = AreaProcessingActive()'''
        pass

    def CopySettingsToFrameBuffer(self, frameBuffer, bufferIndex):
        '''CopySettingsToFrameBuffer(object frameBuffer,integer bufferIndex)'''
        pass

    def GetBloomEnabled(self):
        '''integer enabled = GetBloomEnabled()'''
        pass

    def GetBloomRadius(self):
        '''float radius = GetBloomRadius()'''
        pass

    def GetBloomThreshold(self):
        '''float threshold = GetBloomThreshold()'''
        pass

    def GetColorization(self):
        '''float colorization = GetColorization()'''
        pass

    def GetExpType(self):
        '''integer expType = GetExpType()'''
        pass

    def GetHueOffset(self):
        '''float hueOffset = GetHueOffset()'''
        pass

    def GetISO(self):
        '''float iso = GetISO()'''
        pass

    def GetIdentifier(self):
        '''string string = GetIdentifier()'''
        pass

    def GetImageProcessingOperators(self):
        '''integer ops = GetImageProcessingOperators()'''
        pass

    def GetInputBlackLevel(self):
        '''float inputLevel = GetInputBlackLevel()'''
        pass

    def GetInputBlueGrayLevel(self):
        '''float gamma = GetInputBlueGrayLevel()'''
        pass

    def GetInputGrayLevel(self):
        '''float gamma = GetInputGrayLevel()'''
        pass

    def GetInputGreenGrayLevel(self):
        '''float gamma = GetInputGreenGrayLevel()'''
        pass

    def GetInputMaxBlueLevel(self):
        '''float inputLevel = GetInputMaxBlueLevel()'''
        pass

    def GetInputMaxGreenLevel(self):
        '''float inputLevel = GetInputMaxGreenLevel()'''
        pass

    def GetInputMaxRedLevel(self):
        '''float inputLevel = GetInputMaxRedLevel()'''
        pass

    def GetInputMinBlueLevel(self):
        '''float inputLevel = GetInputMinBlueLevel()'''
        pass

    def GetInputMinGreenLevel(self):
        '''float inputLevel = GetInputMinGreenLevel()'''
        pass

    def GetInputMinRedLevel(self):
        '''float inputLevel = GetInputMinRedLevel()'''
        pass

    def GetInputRedGrayLevel(self):
        '''float gamma = GetInputRedGrayLevel()'''
        pass

    def GetInputWhiteLevel(self):
        '''float inputLevel = GetInputWhiteLevel()'''
        pass

    def GetInvInputBlueGrayLevel(self):
        '''float invGamma = GetInvInputBlueGrayLevel()'''
        pass

    def GetInvInputGrayLevel(self):
        '''float invGamma = GetInvInputGrayLevel()'''
        pass

    def GetInvInputGreenGrayLevel(self):
        '''float invGamma = GetInvInputGreenGrayLevel()'''
        pass

    def GetInvInputRedGrayLevel(self):
        '''float invGamma = GetInvInputRedGrayLevel()'''
        pass

    def GetOutputBlackLevel(self):
        '''float outputLevel = GetOutputBlackLevel()'''
        pass

    def GetOutputColorspace(self):
        '''string = GetOutputColorspace()'''
        pass

    def GetOutputGamma(self):
        '''float outputGamma = GetOutputGamma()'''
        pass

    def GetOutputInvGamma(self):
        '''float outputInvGamma = GetOutputInvGamma()'''
        pass

    def GetOutputMaxBlueLevel(self):
        '''float outputLevel = GetOutputMaxBlueLevel()'''
        pass

    def GetOutputMaxGreenLevel(self):
        '''float outputLevel = GetOutputMaxGreenLevel()'''
        pass

    def GetOutputMaxRedLevel(self):
        '''float outputLevel = GetOutputMaxRedLevel()'''
        pass

    def GetOutputMinBlueLevel(self):
        '''float outputLevel = GetOutputMinBlueLevel()'''
        pass

    def GetOutputMinGreenLevel(self):
        '''float outputLevel = GetOutputMinGreenLevel()'''
        pass

    def GetOutputMinRedLevel(self):
        '''float outputLevel = GetOutputMinRedLevel()'''
        pass

    def GetOutputWhiteLevel(self):
        '''float outputLevel = GetOutputWhiteLevel()'''
        pass

    def GetSaturation(self):
        '''float saturation = GetSaturation()'''
        pass

    def GetSaveProcessed(self):
        '''integer enabled = GetSaveProcessed()'''
        pass

    def GetSourceImageGamma(self):
        '''float gamma = GetSourceImageGamma()'''
        pass

    def GetSourceImageIsStereoSideBySide(self):
        '''integer isStereo = GetSourceImageIsStereoSideBySide()'''
        pass

    def GetStereoComposite(self):
        '''integer mode = GetStereoComposite()'''
        pass

    def GetStereoEye(self):
        '''integer eye = GetStereoEye()'''
        pass

    def GetTargetColor(self):
        '''float color = GetTargetColor()'''
        pass

    def GetToneAmt(self):
        '''float toneAmt = GetToneAmt()'''
        pass

    def GetToneMap(self):
        '''integer toneMap = GetToneMap()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ImageSegment:
    def GetSegment(self, y, left, right, rgba):
        '''GetSegment(integer y,integer left,integer right,float[] rgba)'''
        pass

    def SetSegment(self, y, left, right, type, line):
        '''SetSegment(integer y,integer left,integer right,integer type,data[] line)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ImageWrite:
    def AddAttribute(self, name, type):
        '''integer index = AddAttribute(string name,string type)'''
        pass

    def Format(self):
        '''integer = Format()'''
        pass

    def SetLine(self, y, type, line):
        '''SetLine(integer y,integer type,data[] line)'''
        pass

    def SetPixel(self, x, y, type, pixel):
        '''SetPixel(integer x,integer y,integer type,data[] pixel)'''
        pass

    def Size(self):
        '''(integer w,integer h) = Size()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class IndexImage:
    def Format(self):
        '''integer = Format()'''
        pass

    def GetIndex(self, x, y):
        '''integer index = GetIndex(integer x,integer y)'''
        pass

    def GetMap(self, index, type, pixel):
        '''GetMap(integer index,integer type,data[] pixel)'''
        pass

    def MapSize(self):
        '''integer numColors = MapSize()'''
        pass

    def Size(self):
        '''(integer w,integer h) = Size()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class IndexImageWrite:
    def AddAttribute(self, name, type):
        '''integer index = AddAttribute(string name,string type)'''
        pass

    def Format(self):
        '''integer = Format()'''
        pass

    def SetIndex(self, x, y, index):
        '''SetIndex(integer x,integer y,integer index)'''
        pass

    def SetMap(self, index, type, pixel):
        '''SetMap(integer index,integer type,data[] pixel)'''
        pass

    def Size(self):
        '''(integer w,integer h) = Size()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class InputDeviceInstance:
    def AnalogCount(self):
        '''integer = AnalogCount()'''
        pass

    def AnalogMetrics(self, index):
        '''(integer isAbsolute,integer isDirectional) = AnalogMetrics(integer index)'''
        pass

    def AnalogName(self, index):
        '''string = AnalogName(integer index)'''
        pass

    def AnalogUserName(self, index):
        '''string = AnalogUserName(integer index)'''
        pass

    def AnalogValue(self, index):
        '''float value = AnalogValue(integer index)'''
        pass

    def ButtonCount(self):
        '''integer = ButtonCount()'''
        pass

    def ButtonIsDown(self, index):
        '''boolean = ButtonIsDown(integer index)'''
        pass

    def ButtonName(self, index):
        '''string = ButtonName(integer index)'''
        pass

    def ButtonUserName(self, index):
        '''string = ButtonUserName(integer index)'''
        pass

    def IsConnected(self):
        '''IsConnected()'''
        pass

    def Name(self, name):
        '''Name(string name)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class InputDevices:
    def DeviceCount(self):
        '''integer = DeviceCount()'''
        pass

    def DeviceInstanceByIndex(self, index):
        '''InputDeviceInstance object = DeviceInstanceByIndex(integer index)'''
        pass

    def DeviceNameByIndex(self, index, name):
        '''DeviceNameByIndex(integer index,string name)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class InstanceAssets:
    def Category(self, index):
        '''string = Category(integer index)'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def GetPath(self, ident):
        '''string = GetPath(string ident)'''
        pass

    def IdentByIndex(self, index):
        '''(integer isSeq,string fileType,string) = IdentByIndex(integer index)'''
        pass

    def SetPath(self, ident, newPath):
        '''SetPath(string ident,string newPath)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Instanceable:
    def AddElements(self, tableau, instT0, instT1):
        '''AddElements(object tableau,object instT0,object instT1)'''
        pass

    def Compare(self, other):
        '''integer = Compare(object other)'''
        pass

    def GetSurface(self):
        '''Unknown object = GetSurface()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class IntRange:
    def AllAfter(self):
        '''boolean = AllAfter()'''
        pass

    def AllBefore(self):
        '''boolean = AllBefore()'''
        pass

    def Current(self):
        '''integer current = Current()'''
        pass

    def First(self):
        '''integer first = First()'''
        pass

    def Last(self):
        '''integer last = Last()'''
        pass

    def Max(self):
        '''integer max = Max()'''
        pass

    def Min(self):
        '''integer min = Min()'''
        pass

    def Next(self):
        '''integer i = Next()'''
        pass

    def Prev(self):
        '''integer i = Prev()'''
        pass

    def Test(self, i):
        '''boolean = Test(integer i)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Item:
    def BaseName(self):
        '''string name = BaseName()'''
        pass

    def ChannelAdd(self):
        '''Unknown object = ChannelAdd()'''
        pass

    def ChannelCount(self):
        '''integer count = ChannelCount()'''
        pass

    def ChannelEvalType(self, index):
        '''string type = ChannelEvalType(integer index)'''
        pass

    def ChannelGradient(self, index):
        '''(string input,string output) = ChannelGradient(integer index)'''
        pass

    def ChannelIntHint(self, index):
        '''hints hints = ChannelIntHint(integer index)'''
        pass

    def ChannelIsDriven(self, index):
        '''boolean = ChannelIsDriven(integer index)'''
        pass

    def ChannelLookup(self, name):
        '''integer index = ChannelLookup(string name)'''
        pass

    def ChannelName(self, index):
        '''string name = ChannelName(integer index)'''
        pass

    def ChannelPackage(self, index):
        '''string package = ChannelPackage(integer index)'''
        pass

    def ChannelStorageType(self, index):
        '''string type = ChannelStorageType(integer index)'''
        pass

    def ChannelType(self, index):
        '''integer type = ChannelType(integer index)'''
        pass

    def ChannelVectorMode(self, index):
        '''(integer mode,integer components) = ChannelVectorMode(integer index)'''
        pass

    def Context(self):
        '''Scene object = Context()'''
        pass

    def Delete(self):
        '''Delete()'''
        pass

    def GetTag(self, type):
        '''string = GetTag(integer type)'''
        pass

    def Ident(self):
        '''string ident = Ident()'''
        pass

    def InvalidateName(self):
        '''InvalidateName()'''
        pass

    def IsReferenced(self):
        '''boolean = IsReferenced()'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def PackageAdd(self, package):
        '''PackageAdd(string package)'''
        pass

    def PackageRemove(self, package):
        '''PackageRemove(string package)'''
        pass

    def PackageStartIndex(self, package):
        '''integer index = PackageStartIndex(string package)'''
        pass

    def PackageTest(self, package):
        '''boolean = PackageTest(string package)'''
        pass

    def Parent(self):
        '''Item object = Parent()'''
        pass

    def Reference(self):
        '''Item object = Reference()'''
        pass

    def Root(self):
        '''Item object = Root()'''
        pass

    def SetIdent(self, ident):
        '''SetIdent(string ident)'''
        pass

    def SetName(self, name):
        '''SetName(string name)'''
        pass

    def SetParent(self, parent):
        '''SetParent(object parent)'''
        pass

    def SetParentAndPosition(self, parent, pos):
        '''SetParentAndPosition(object parent,integer pos)'''
        pass

    def SetSource(self, source):
        '''SetSource(object source)'''
        pass

    def SetTag(self, type, tag):
        '''SetTag(integer type,string tag)'''
        pass

    def SetUniqueIndex(self, index):
        '''SetUniqueIndex(integer index)'''
        pass

    def Source(self):
        '''Item object = Source()'''
        pass

    def SubByIndex(self, index):
        '''Item object = SubByIndex(integer index)'''
        pass

    def SubCount(self):
        '''integer count = SubCount()'''
        pass

    def TestType(self, type):
        '''boolean = TestType(integer type)'''
        pass

    def TestTypes(self, types):
        '''boolean = TestTypes(int[] types)'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def UniqueIndex(self):
        '''integer index = UniqueIndex()'''
        pass

    def UniqueName(self):
        '''string name = UniqueName()'''
        pass

    def WasLoaded(self, test):
        '''boolean = WasLoaded(integer test)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ItemChannel:
    def ChannelIndex(self):
        '''integer = ChannelIndex()'''
        pass

    def Item(self):
        '''Item object = Item()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ItemCollection:
    def Add(self, item):
        '''Add(object item)'''
        pass

    def ByIndex(self, type, index):
        '''Item object = ByIndex(integer type,integer index)'''
        pass

    def Count(self, type):
        '''integer count = Count(integer type)'''
        pass

    def Test(self, item):
        '''boolean = Test(object item)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ItemGraph:
    def AddLink(self, from_obj, to_obj):
        '''AddLink(object from_obj,object to_obj)'''
        pass

    def DeleteLink(self, from_obj, to_obj):
        '''DeleteLink(object from_obj,object to_obj)'''
        pass

    def FwdByIndex(self, item, index):
        '''Item object = FwdByIndex(object item,integer index)'''
        pass

    def FwdCount(self, item):
        '''integer count = FwdCount(object item)'''
        pass

    def RevByIndex(self, item, index):
        '''Item object = RevByIndex(object item,integer index)'''
        pass

    def RevCount(self, item):
        '''integer count = RevCount(object item)'''
        pass

    def SetLink(self, from_obj, fromIndex, to_obj, toIndex):
        '''SetLink(object from_obj,integer fromIndex,object to_obj,integer toIndex)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ItemInfluence:
    def AllowTransform(self, index):
        '''integer flags = AllowTransform(integer index)'''
        pass

    def Enumerate(self, visitor):
        '''Enumerate(object visitor)'''
        pass

    def GetItem(self):
        '''Item object = GetItem()'''
        pass

    def HasItems(self):
        '''boolean = HasItems()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ItemListType:
    def GenerateList(self, scene, collection):
        '''GenerateList(object scene,object collection)'''
        pass

    def SetArgument(self, arg):
        '''SetArgument(string arg)'''
        pass

    def SetRootItem(self, item):
        '''SetRootItem(object item)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ItemPacketTranslation:
    def Item(self, packet):
        '''Item object = Item(pointer packet)'''
        pass

    def Packet(self, item):
        '''pointer = Packet(object item)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ItemReplacement:
    def NotifierByIndex(self, itemType, channelName, index):
        '''string = NotifierByIndex(string itemType,string channelName,integer index)'''
        pass

    def NotifierCount(self, itemType, channelName):
        '''integer count = NotifierCount(string itemType,string channelName)'''
        pass

    def ReplaceItems(self, current, replacement, targetType):
        '''ReplaceItems(object current,object replacement,integer targetType)'''
        pass

    def Types(self, curType):
        '''string repTypes = Types(string curType)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ItemTypeDest:
    def Item(self):
        '''Item object = Item()'''
        pass

    def Location(self):
        '''integer = Location()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Keyframe:
    def AddF(self, time, value):
        '''AddF(float time,float value)'''
        pass

    def AddI(self, time, value):
        '''AddI(float time,integer value)'''
        pass

    def Delete(self):
        '''Delete()'''
        pass

    def Find(self, time, side):
        '''Find(float time,integer side)'''
        pass

    def First(self):
        '''First()'''
        pass

    def GetBroken(self):
        '''(integer breaks,integer side) = GetBroken()'''
        pass

    def GetSlope(self, side):
        '''float slope = GetSlope(integer side)'''
        pass

    def GetSlopeType(self, side):
        '''(integer type,integer weighted) = GetSlopeType(integer side)'''
        pass

    def GetTime(self):
        '''float time = GetTime()'''
        pass

    def GetValueF(self, side):
        '''float value = GetValueF(integer side)'''
        pass

    def GetValueI(self, side):
        '''integer value = GetValueI(integer side)'''
        pass

    def GetWeight(self, side):
        '''float weight = GetWeight(integer side)'''
        pass

    def Last(self):
        '''Last()'''
        pass

    def Next(self):
        '''Next()'''
        pass

    def Previous(self):
        '''Previous()'''
        pass

    def SetSlope(self, slope, side):
        '''SetSlope(float slope,integer side)'''
        pass

    def SetSlopeType(self, type, side):
        '''SetSlopeType(integer type,integer side)'''
        pass

    def SetTime(self, time):
        '''SetTime(float time)'''
        pass

    def SetValueF(self, value, side):
        '''SetValueF(float value,integer side)'''
        pass

    def SetValueI(self, value, side):
        '''SetValueI(integer value,integer side)'''
        pass

    def SetWeight(self, weight, reset, side):
        '''SetWeight(float weight,integer reset,integer side)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LayerScan:
    def Apply(self):
        '''Apply()'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def GetState(self, index):
        '''integer state = GetState(integer index)'''
        pass

    def MeshAction(self, index):
        '''ChannelRead object = MeshAction(integer index)'''
        pass

    def MeshBase(self, index):
        '''Mesh object = MeshBase(integer index)'''
        pass

    def MeshEdit(self, index):
        '''Mesh object = MeshEdit(integer index)'''
        pass

    def MeshInstance(self, index):
        '''Mesh object = MeshInstance(integer index)'''
        pass

    def MeshItem(self, index):
        '''Item object = MeshItem(integer index)'''
        pass

    def MeshTransform(self, index):
        '''matrix matrix = MeshTransform(integer index)'''
        pass

    def SetMeshChange(self, index, edits):
        '''SetMeshChange(integer index,integer edits)'''
        pass

    def Update(self):
        '''Update()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LayeredImage:
    def Blend(self, index):
        '''(float opacity,integer mode) = Blend(integer index)'''
        pass

    def ChannelName(self, layerIndex, channelIndex):
        '''string name = ChannelName(integer layerIndex,integer channelIndex)'''
        pass

    def Count(self):
        '''integer = Count()'''
        pass

    def Image(self, index):
        '''Image object = Image(integer index)'''
        pass

    def IsGroup(self, layerIndex):
        '''integer isGroup = IsGroup(integer layerIndex)'''
        pass

    def Name(self, index):
        '''string name = Name(integer index)'''
        pass

    def Offset(self, index):
        '''(integer x,integer y) = Offset(integer index)'''
        pass

    def Parent(self, layerIndex):
        '''integer parentIndex = Parent(integer layerIndex)'''
        pass

    def Size(self):
        '''(integer w,integer h) = Size()'''
        pass

    def Type(self, index):
        '''(integer flags,string type) = Type(integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LayeredImageWrite:
    def AddAttribute(self, name, type):
        '''integer index = AddAttribute(string name,string type)'''
        pass

    def AddLayer(self, image, name):
        '''string channelNames = AddLayer(object image,string name)'''
        pass

    def SetBlending(self, index, blend, mode):
        '''SetBlending(integer index,float blend,string mode)'''
        pass

    def SetOffset(self, index, x, y):
        '''SetOffset(integer index,integer x,integer y)'''
        pass

    def SetType(self, index, flags, type):
        '''SetType(integer index,integer flags,string type)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LightSample:
    def Vertex(self, vertex):
        '''Vertex(float[] vertex)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Lighting:
    def EnvironmentEvaluate(self, vector, samples, flags):
        '''vector lum = EnvironmentEvaluate(object vector,integer samples,integer flags)'''
        pass

    def GIRequired(self, vector):
        '''integer = GIRequired(object vector)'''
        pass

    def LightSourceCount(self, vector):
        '''integer num = LightSourceCount(object vector)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LineExecution:
    def CookedLine(self, text):
        '''CookedLine(string text)'''
        pass

    def Info(self, text):
        '''Info(string text)'''
        pass

    def Message(self, message):
        '''Message(object message)'''
        pass

    def ResultHints(self, hints):
        '''ResultHints(hints hints)'''
        pass

    def Results(self, valArray):
        '''Results(object valArray)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LineInterpreter:
    def Execute(self, line, execFlags, execution):
        '''Execute(string line,integer execFlags,object execution)'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def Prompt(self, type):
        '''string prompt = Prompt(integer type)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LinkPacketTranslation:
    def From(self, packet):
        '''(integer channel,Item object) = From(pointer packet)'''
        pass

    def Packet(self, fromItem, fromChannel, toItem, toChannel):
        '''pointer = Packet(object fromItem,integer fromChannel,object toItem,integer toChannel)'''
        pass

    def To(self, packet):
        '''(integer channel,Item object) = To(pointer packet)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ListenerPort:
    def AddListener(self, object):
        '''AddListener(object object)'''
        pass

    def RemoveListener(self, object):
        '''RemoveListener(object object)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Loader:
    def Cleanup(self):
        '''Cleanup()'''
        pass

    def LoadInstance(self, loadInfo, monitor):
        '''Unknown object = LoadInstance(object loadInfo,object monitor)'''
        pass

    def LoadObject(self, loadInfo, monitor, dest):
        '''LoadObject(object loadInfo,object monitor,object dest)'''
        pass

    def Recognize(self, filename, loadInfo):
        '''Recognize(string filename,object loadInfo)'''
        pass

    def SpawnOptions(self):
        '''Unknown object = SpawnOptions()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LoaderInfo:
    def SetClass(self, clsGUID):
        '''SetClass(string clsGUID)'''
        pass

    def SetFlags(self, flags):
        '''SetFlags(integer flags)'''
        pass

    def SetFormat(self, format):
        '''SetFormat(string format)'''
        pass

    def TestClass(self, clsGUID):
        '''integer priority = TestClass(string clsGUID)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Locator:
    def AddPostTransformItem(self, chanWrite, type, value):
        '''(Item object,integer index) = AddPostTransformItem(object chanWrite,integer type,vector value)'''
        pass

    def AddPreTransformItem(self, chanWrite, type, value):
        '''(Item object,integer index) = AddPreTransformItem(object chanWrite,integer type,vector value)'''
        pass

    def AddTransformItem(self, type):
        '''(Item object,integer index) = AddTransformItem(integer type)'''
        pass

    def AppendTransformItem(self, chanWrite, type, value):
        '''(Item object,integer index) = AppendTransformItem(object chanWrite,integer type,vector value)'''
        pass

    def ExtractLocalPosition(self, chanRead):
        '''vector pos = ExtractLocalPosition(object chanRead)'''
        pass

    def ExtractLocalRotation(self, chanRead):
        '''matrix m3 = ExtractLocalRotation(object chanRead)'''
        pass

    def GetTransformItem(self, type):
        '''Item object = GetTransformItem(integer type)'''
        pass

    def LocalTransform(self, chanRead):
        '''(matrix xfrm,vector pos) = LocalTransform(object chanRead)'''
        pass

    def LocalTransform4(self, chanRead):
        '''matrix xfrm4 = LocalTransform4(object chanRead)'''
        pass

    def PrependTransformItem(self, chanWrite, type, value):
        '''(Item object,integer index) = PrependTransformItem(object chanWrite,integer type,vector value)'''
        pass

    def SetPosition(self, chanRead, chanWrite, pos, type, comp):
        '''SetPosition(object chanRead,object chanWrite,vector pos,integer type,integer comp)'''
        pass

    def SetRotation(self, chanRead, chanWrite, m3, type, comp):
        '''SetRotation(object chanRead,object chanWrite,matrix m3,integer type,integer comp)'''
        pass

    def SetScale(self, chanRead, chanWrite, m4, type, comp):
        '''SetScale(object chanRead,object chanWrite,matrix m4,integer type,integer comp)'''
        pass

    def SetTarget(self, target):
        '''Item object = SetTarget(object target)'''
        pass

    def SetTransformVector(self, chanWrite, type, value):
        '''SetTransformVector(object chanWrite,integer type,vector value)'''
        pass

    def Visible(self, chanRead):
        '''boolean = Visible(object chanRead)'''
        pass

    def WorldInvertTransform(self, chanRead):
        '''(matrix xfrm,vector pos) = WorldInvertTransform(object chanRead)'''
        pass

    def WorldTransform(self, chanRead):
        '''(matrix xfrm,vector pos) = WorldTransform(object chanRead)'''
        pass

    def WorldTransform4(self, chanRead):
        '''matrix xfrm4 = WorldTransform4(object chanRead)'''
        pass

    def ZeroTransform(self, chanRead, chanWrite, type):
        '''ZeroTransform(object chanRead,object chanWrite,integer type)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LocatorDest:
    def Item(self):
        '''Item object = Item()'''
        pass

    def Location(self):
        '''integer = Location()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Log:
    def AddEntry(self, entry):
        '''AddEntry(object entry)'''
        pass

    def ClearAll(self):
        '''ClearAll()'''
        pass

    def EntryByIndex(self, index):
        '''LogEntry object = EntryByIndex(integer index)'''
        pass

    def EntryCount(self):
        '''integer count = EntryCount()'''
        pass

    def GetCurrentEntry(self):
        '''LogEntry object = GetCurrentEntry()'''
        pass

    def GetMaxEntries(self):
        '''integer max = GetMaxEntries()'''
        pass

    def GetRolling(self):
        '''LogEntry object = GetRolling()'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def PeekEntryByIndex(self, index):
        '''object = PeekEntryByIndex(integer index)'''
        pass

    def RollClear(self):
        '''RollClear()'''
        pass

    def RollEntry(self, entry):
        '''RollEntry(object entry)'''
        pass

    def SetMaxEntries(self, max):
        '''SetMaxEntries(integer max)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LogEntry:
    def AddEntry(self, entry):
        '''AddEntry(object entry)'''
        pass

    def AddPair(self, name, value):
        '''AddPair(string name,string value)'''
        pass

    def ChildByIndex(self, index):
        '''LogEntry object = ChildByIndex(integer index)'''
        pass

    def ChildCount(self):
        '''integer count = ChildCount()'''
        pass

    def Class(self):
        '''integer classType = Class()'''
        pass

    def Desc(self):
        '''string desc = Desc()'''
        pass

    def InfoBlock(self):
        '''LogInfoBlock object = InfoBlock()'''
        pass

    def InfoBlockValue(self, name, index):
        '''Unknown object = InfoBlockValue(string name,integer index)'''
        pass

    def Message(self):
        '''string message = Message()'''
        pass

    def PairCount(self):
        '''integer count = PairCount()'''
        pass

    def PairName(self, index):
        '''string name = PairName(integer index)'''
        pass

    def PairValue(self, index):
        '''string value = PairValue(integer index)'''
        pass

    def PeekChildByIndex(self, index):
        '''object = PeekChildByIndex(integer index)'''
        pass

    def SetDesc(self, desc):
        '''SetDesc(string desc)'''
        pass

    def SetTitle(self, title):
        '''SetTitle(string title)'''
        pass

    def SetValue(self, name, index, value):
        '''SetValue(string name,integer index,object value)'''
        pass

    def SubSystemByIndex(self, index):
        '''Unknown object = SubSystemByIndex(integer index)'''
        pass

    def SubSystemCount(self):
        '''integer count = SubSystemCount()'''
        pass

    def TimeString(self):
        '''string string = TimeString()'''
        pass

    def Title(self):
        '''string title = Title()'''
        pass

    def Type(self):
        '''integer type = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LogInfoBlock:
    def FieldCount(self):
        '''integer count = FieldCount()'''
        pass

    def FieldName(self, index):
        '''string name = FieldName(integer index)'''
        pass

    def FieldType(self, index):
        '''string type = FieldType(integer index)'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class LogListener:
    def ChildEntryAdded(self, entry, parentEntry):
        '''ChildEntryAdded(object entry,object parentEntry)'''
        pass

    def EntryAdded(self, system, entry):
        '''EntryAdded(object system,object entry)'''
        pass

    def EntryDropped(self, system, entry):
        '''EntryDropped(object system,object entry)'''
        pass

    def RollingChildEntryAdded(self, entry, parentEntry):
        '''RollingChildEntryAdded(object entry,object parentEntry)'''
        pass

    def RollingEntryAdded(self, system, entry):
        '''RollingEntryAdded(object system,object entry)'''
        pass

    def RollingEntryDropped(self, system, entry):
        '''RollingEntryDropped(object system,object entry)'''
        pass

    def SystemAdded(self, system):
        '''SystemAdded(object system)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Matrix:
    def Get3(self):
        '''matrix mat3 = Get3()'''
        pass

    def Get4(self):
        '''matrix mat4 = Get4()'''
        pass

    def GetOffset(self):
        '''vector offset = GetOffset()'''
        pass

    def Invert(self):
        '''Invert()'''
        pass

    def Multiply3(self, mat3):
        '''Multiply3(matrix mat3)'''
        pass

    def Multiply4(self, mat4):
        '''Multiply4(matrix mat4)'''
        pass

    def MultiplyVector(self, vector):
        '''vector result = MultiplyVector(vector vector)'''
        pass

    def Set3(self, mat3):
        '''Set3(matrix mat3)'''
        pass

    def Set4(self, mat4):
        '''Set4(matrix mat4)'''
        pass

    def SetIdentity(self):
        '''SetIdentity()'''
        pass

    def SetOffset(self, offset):
        '''SetOffset(vector offset)'''
        pass

    def Transpose(self):
        '''Transpose()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MergedDirCacheEntry:
    def EntryByIndex(self, index):
        '''DirCacheEntry object = EntryByIndex(integer index)'''
        pass

    def EntryCount(self):
        '''integer count = EntryCount()'''
        pass

    def Parent(self):
        '''DirCacheEntry object = Parent()'''
        pass

    def Path(self):
        '''string = Path()'''
        pass

    def UserPath(self):
        '''string = UserPath()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MergedFileSysDest:
    def EntryByIndex(self, index):
        '''Unknown object = EntryByIndex(integer index)'''
        pass

    def EntryCount(self):
        '''integer count = EntryCount()'''
        pass

    def MergedEntry(self):
        '''Unknown object = MergedEntry()'''
        pass

    def Path(self):
        '''string = Path()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Mesh:
    def BeginEditBatch(self):
        '''BeginEditBatch()'''
        pass

    def BoundingBox(self, pick):
        '''bounds bbox = BoundingBox(integer pick)'''
        pass

    def ChangeEvent(self, event):
        '''ChangeEvent(integer event)'''
        pass

    def Clear(self):
        '''Clear()'''
        pass

    def EdgeAccessor(self):
        '''Edge object = EdgeAccessor()'''
        pass

    def EdgeCount(self):
        '''integer count = EdgeCount()'''
        pass

    def EndEditBatch(self):
        '''EndEditBatch()'''
        pass

    def MapCount(self):
        '''integer count = MapCount()'''
        pass

    def MaxPointPolygons(self, pick):
        '''integer count = MaxPointPolygons(integer pick)'''
        pass

    def MaxPolygonSize(self, pick):
        '''integer count = MaxPolygonSize(integer pick)'''
        pass

    def Merge(self, other, flags):
        '''Merge(object other,integer flags)'''
        pass

    def MergeWithTransform(self, other, xfrm, flags):
        '''MergeWithTransform(object other,matrix xfrm,integer flags)'''
        pass

    def MeshMapAccessor(self):
        '''MeshMap object = MeshMapAccessor()'''
        pass

    def PSUBDispLayerCurrent(self):
        '''integer index = PSUBDispLayerCurrent()'''
        pass

    def PSUBDispLayerEnable(self, index):
        '''integer enable = PSUBDispLayerEnable(integer index)'''
        pass

    def PSUBDispLayerLookupByName(self, name):
        '''integer index = PSUBDispLayerLookupByName(string name)'''
        pass

    def PSUBDispLayerName(self, index):
        '''string = PSUBDispLayerName(integer index)'''
        pass

    def PSUBDispLayerOpacity(self, index):
        '''float opacity = PSUBDispLayerOpacity(integer index)'''
        pass

    def PSUBDispLayerSetOpacity(self, index, opacity):
        '''PSUBDispLayerSetOpacity(integer index,float opacity)'''
        pass

    def PSUBDispNumLayer(self):
        '''integer num = PSUBDispNumLayer()'''
        pass

    def PSUBGetBoundRule(self):
        '''integer bound = PSUBGetBoundRule()'''
        pass

    def PSUBGetCurrentLevel(self):
        '''integer n = PSUBGetCurrentLevel()'''
        pass

    def PSUBGetLevel(self):
        '''integer n = PSUBGetLevel()'''
        pass

    def PSUBSetBoundRule(self, bound):
        '''PSUBSetBoundRule(integer bound)'''
        pass

    def PSUBSetCurrentLevel(self, n):
        '''PSUBSetCurrentLevel(integer n)'''
        pass

    def PSUBSetLevel(self, n):
        '''PSUBSetLevel(integer n)'''
        pass

    def PSUBSetSubdivObj(self, subObj):
        '''PSUBSetSubdivObj(object subObj)'''
        pass

    def PTagByIndex(self, type, index):
        '''string tag = PTagByIndex(integer type,integer index)'''
        pass

    def PTagCount(self, type):
        '''integer = PTagCount(integer type)'''
        pass

    def PointAccessor(self):
        '''Point object = PointAccessor()'''
        pass

    def PointCount(self):
        '''integer count = PointCount()'''
        pass

    def PolyTagSetDefault(self, type, tag):
        '''PolyTagSetDefault(integer type,string tag)'''
        pass

    def PolygonAccessor(self):
        '''Polygon object = PolygonAccessor()'''
        pass

    def PolygonCount(self):
        '''integer count = PolygonCount()'''
        pass

    def SUBDGetLevel(self):
        '''integer n = SUBDGetLevel()'''
        pass

    def SUBDGetLinearUV(self):
        '''integer isLinear = SUBDGetLinearUV()'''
        pass

    def SUBDSetLevel(self, n):
        '''SUBDSetLevel(integer n)'''
        pass

    def SUBDSetLinearUV(self, isLinear):
        '''SUBDSetLinearUV(integer isLinear)'''
        pass

    def SetMeshEdits(self, edits):
        '''SetMeshEdits(integer edits)'''
        pass

    def TestSameMesh(self, other):
        '''boolean = TestSameMesh(object other)'''
        pass

    def TrackChanges(self):
        '''Unknown object = TrackChanges()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshBlend:
    def BlendMesh(self, t):
        '''Unknown object = BlendMesh(float t)'''
        pass

    def EnumeratePoints(self, source, target, visitor):
        '''EnumeratePoints(object source,object target,object visitor)'''
        pass

    def EnumeratePolygons(self, source, target, visitor):
        '''EnumeratePolygons(object source,object target,object visitor)'''
        pass

    def GetPoint(self, source):
        '''id target = GetPoint(id source)'''
        pass

    def GetPolygon(self, source):
        '''id target = GetPolygon(id source)'''
        pass

    def SetPoint(self, source, target):
        '''SetPoint(id source,id target)'''
        pass

    def SetPolygon(self, source, target):
        '''SetPolygon(id source,id target)'''
        pass

    def SourceMesh(self):
        '''Unknown object = SourceMesh()'''
        pass

    def TargetMesh(self):
        '''Unknown object = TargetMesh()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshDest:
    def HitNormal(self):
        '''vector nrm = HitNormal()'''
        pass

    def HitPosition(self):
        '''vector pos = HitPosition()'''
        pass

    def Item(self):
        '''Item object = Item()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshElementGroup:
    def GroupCount(self):
        '''integer count = GroupCount()'''
        pass

    def GroupName(self, index):
        '''string name = GroupName(integer index)'''
        pass

    def GroupUserName(self, index):
        '''string username = GroupUserName(integer index)'''
        pass

    def TestEdge(self, index, edge):
        '''boolean = TestEdge(integer index,id edge)'''
        pass

    def TestPoint(self, index, point):
        '''boolean = TestPoint(integer index,id point)'''
        pass

    def TestPolygon(self, index, polygon):
        '''boolean = TestPolygon(integer index,id polygon)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshFilter:
    def Evaluate(self, mesh, tracker):
        '''Evaluate(object mesh,object tracker)'''
        pass

    def Generate(self):
        '''Mesh object = Generate()'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshFilterBBox:
    def Evaluate(self):
        '''bounds box = Evaluate()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshFilterBlend:
    def Evaluate(self, other, blend):
        '''Evaluate(object other,object blend)'''
        pass

    def Generate(self, other):
        '''MeshBlend object = Generate(object other)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshFilterIdent:
    def Generate(self, ident):
        '''Mesh object = Generate(string ident)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshInfluence:
    def MeshByIndex(self, index):
        '''Item object = MeshByIndex(integer index)'''
        pass

    def MeshChange(self, index, change):
        '''MeshChange(integer index,integer change)'''
        pass

    def MeshCount(self):
        '''integer = MeshCount()'''
        pass

    def PartitionIndex(self, index):
        '''integer = PartitionIndex(integer index)'''
        pass

    def SetMesh(self, index, mesh, item):
        '''SetMesh(integer index,object mesh,object item)'''
        pass

    def SetTransform(self, index):
        '''matrix xfrm = SetTransform(integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshLayerPreDest:
    def Mesh(self):
        '''Mesh object = Mesh()'''
        pass

    def ShaderDest(self):
        '''ShaderPreDest object = ShaderDest()'''
        pass

    def Transform(self):
        '''matrix xform = Transform()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshMap:
    def Clear(self):
        '''Clear()'''
        pass

    def Dimension(self):
        '''integer dimension = Dimension()'''
        pass

    def Enumerate(self, mode, visitor, monitor):
        '''Enumerate(integer mode,object visitor,object monitor)'''
        pass

    def EnumerateContinuous(self, visitor, point):
        '''EnumerateContinuous(object visitor,object point)'''
        pass

    def EnumerateDiscontinuous(self, visitor, point, poly):
        '''EnumerateDiscontinuous(object visitor,object point,object poly)'''
        pass

    def EnumerateEdges(self, visitor, edge):
        '''EnumerateEdges(object visitor,object edge)'''
        pass

    def EnumerateUVSeamEdges(self, visitor, edge, poly):
        '''EnumerateUVSeamEdges(object visitor,object edge,object poly)'''
        pass

    def FilterByType(self, type):
        '''FilterByType(integer type)'''
        pass

    def ID(self):
        '''id = ID()'''
        pass

    def IsContinuous(self):
        '''boolean = IsContinuous()'''
        pass

    def IsEdgeMap(self):
        '''boolean = IsEdgeMap()'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def New(self, type, name):
        '''id mapID = New(integer type,string name)'''
        pass

    def Remove(self):
        '''Remove()'''
        pass

    def Select(self, map):
        '''Select(id map)'''
        pass

    def SelectByName(self, type, name):
        '''SelectByName(integer type,string name)'''
        pass

    def SetName(self, name):
        '''SetName(string name)'''
        pass

    def Spawn(self):
        '''MeshMap object = Spawn()'''
        pass

    def Type(self):
        '''integer type = Type()'''
        pass

    def UVBoundingBox(self):
        '''bounds bbox = UVBoundingBox()'''
        pass

    def UVSeamOppositeEdge(self, originalEdge, originalPoly):
        '''(id opppositePoly,integer isReverse) = UVSeamOppositeEdge(id originalEdge,id originalPoly)'''
        pass

    def ZeroDefault(self):
        '''boolean = ZeroDefault()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshOpDest:
    def Graph(self):
        '''string = Graph()'''
        pass

    def Item(self):
        '''Item object = Item()'''
        pass

    def ItemDeformer(self):
        '''Item object = ItemDeformer()'''
        pass

    def Location(self):
        '''integer = Location()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshOperation:
    def Blend(self, other, blend):
        '''Blend(object other,object blend)'''
        pass

    def Clone(self, target):
        '''Unknown object = Clone(object target)'''
        pass

    def Compare(self, other):
        '''integer = Compare(object other)'''
        pass

    def Convert(self, other):
        '''Convert(object other)'''
        pass

    def Evaluate(self, mesh, type, mode):
        '''Evaluate(object mesh,integer type,integer mode)'''
        pass

    def ReEvaluate(self, mesh, type):
        '''ReEvaluate(object mesh,integer type)'''
        pass

    def SetTransform(self, matrix):
        '''SetTransform(matrix matrix)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshTracker:
    def Active(self):
        '''Active()'''
        pass

    def AddPoint(self, point, change):
        '''AddPoint(id point,integer change)'''
        pass

    def AddPolygon(self, poly, change):
        '''AddPolygon(id poly,integer change)'''
        pass

    def Changes(self):
        '''integer edit = Changes()'''
        pass

    def EnumeratePoints(self, change, visitor, point):
        '''EnumeratePoints(integer change,object visitor,object point)'''
        pass

    def EnumeratePolygons(self, change, visitor, poly):
        '''EnumeratePolygons(integer change,object visitor,object poly)'''
        pass

    def Filter(self):
        '''integer filter = Filter()'''
        pass

    def Mesh(self):
        '''Unknown object = Mesh()'''
        pass

    def Reset(self):
        '''Reset()'''
        pass

    def SetChange(self, change):
        '''SetChange(integer change)'''
        pass

    def SetFilter(self, filter):
        '''SetFilter(integer filter)'''
        pass

    def Start(self):
        '''Start()'''
        pass

    def Stop(self):
        '''Stop()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class MeshXtraData:
    def ClearPoint(self, point):
        '''ClearPoint(id point)'''
        pass

    def ClearPolygon(self, poly):
        '''ClearPolygon(id poly)'''
        pass

    def GetPointObject(self, point):
        '''Unknown object = GetPointObject(id point)'''
        pass

    def GetPolygonObject(self, poly):
        '''Unknown object = GetPolygonObject(id poly)'''
        pass

    def SetPointData(self, point, data):
        '''SetPointData(id point,pointer data)'''
        pass

    def SetPointObject(self, point, obj):
        '''SetPointObject(id point,object obj)'''
        pass

    def SetPolygonData(self, poly, data):
        '''SetPolygonData(id poly,pointer data)'''
        pass

    def SetPolygonObject(self, poly, obj):
        '''SetPolygonObject(id poly,object obj)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Message:
    def Code(self):
        '''Code()'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def Reset(self):
        '''Reset()'''
        pass

    def SetArgumentFloat(self, arg, value):
        '''SetArgumentFloat(integer arg,float value)'''
        pass

    def SetArgumentInt(self, arg, value):
        '''SetArgumentInt(integer arg,integer value)'''
        pass

    def SetArgumentObject(self, arg, object):
        '''SetArgumentObject(integer arg,object object)'''
        pass

    def SetArgumentString(self, arg, string):
        '''SetArgumentString(integer arg,string string)'''
        pass

    def SetCode(self, code):
        '''SetCode(integer code)'''
        pass

    def SetMessage(self, table, name, id):
        '''SetMessage(string table,string name,integer id)'''
        pass

    def SetMessageResult(self, id):
        '''SetMessageResult(integer id)'''
        pass

    def Table(self):
        '''string table = Table()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Modifier:
    def Evaluate(self):
        '''Evaluate()'''
        pass

    def Free(self, cache):
        '''Free(pointer cache)'''
        pass

    def Invalidate(self, item, index):
        '''boolean = Invalidate(object item,integer index)'''
        pass

    def Required(self, index):
        '''(integer attr,Item object) = Required(integer index)'''
        pass

    def RequiredCount(self):
        '''integer = RequiredCount()'''
        pass

    def Test(self, item, index):
        '''boolean = Test(object item,integer index)'''
        pass

    def Validate(self, item, index, rc):
        '''Validate(object item,integer index,integer rc)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Module:
    def Generate(self, name, iid):
        '''Unknown object = Generate(string name,string iid)'''
        pass

    def GetTags(self, name, iid):
        '''StringTag object = GetTags(string name,string iid)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Monitor:
    def Increment(self, count):
        '''Increment(integer count)'''
        pass

    def Initialize(self, count):
        '''Initialize(integer count)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class NavigationListener:
    def Delta(self, view, item, hot, pos, rot, zoom):
        '''Delta(object view,object item,integer hot,vector pos,matrix rot,float zoom)'''
        pass

    def Down(self, view, item):
        '''Down(object view,object item)'''
        pass

    def HotSyncPost(self, view, item):
        '''HotSyncPost(object view,object item)'''
        pass

    def HotSyncPre(self, view, item):
        '''HotSyncPre(object view,object item)'''
        pass

    def Move(self, view, item, hot, pos, rot, zoom):
        '''Move(object view,object item,integer hot,vector pos,matrix rot,float zoom)'''
        pass

    def Up(self, view, item):
        '''Up(object view,object item)'''
        pass

    def Wheel(self, view, item):
        '''Wheel(object view,object item)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class NeedContext:
    def SetContext(self, app):
        '''SetContext(object app)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class NodePacketTranslation:
    def Node(self, packet):
        '''Node object = Node(pointer packet)'''
        pass

    def Packet(self, node):
        '''pointer = Packet(object node)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Notifier:
    def AddClient(self, object):
        '''AddClient(object object)'''
        pass

    def Args(self):
        '''string args = Args()'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def RemoveClient(self, object):
        '''RemoveClient(object object)'''
        pass

    def SetArgs(self, args):
        '''SetArgs(string args)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Object:
    def AddObserver(self, visitor):
        '''AddObserver(object visitor)'''
        pass

    def Identifier(self):
        '''string id = Identifier()'''
        pass

    def InterfaceByIndex(self, index):
        '''string guid = InterfaceByIndex(integer index)'''
        pass

    def InterfaceCount(self):
        '''integer count = InterfaceCount()'''
        pass

    def RemoveObserver(self, visitor):
        '''RemoveObserver(object visitor)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Package:
    def Attach(self):
        '''Unknown object = Attach()'''
        pass

    def CollectItems(self, collection, mode):
        '''CollectItems(object collection,integer mode)'''
        pass

    def PostLoad(self, scene):
        '''PostLoad(object scene)'''
        pass

    def SetupChannels(self, addChan):
        '''SetupChannels(object addChan)'''
        pass

    def TestInterface(self, guid):
        '''boolean = TestInterface(string guid)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PackageInstance:
    def Add(self):
        '''Add()'''
        pass

    def AfterLoad(self):
        '''AfterLoad()'''
        pass

    def Cleanup(self):
        '''Cleanup()'''
        pass

    def Doomed(self):
        '''Doomed()'''
        pass

    def DupType(self):
        '''integer = DupType()'''
        pass

    def Initialize(self, item, super):
        '''Initialize(object item,object super)'''
        pass

    def Loading(self):
        '''Loading()'''
        pass

    def Newborn(self, original, flags):
        '''Newborn(object original,integer flags)'''
        pass

    def Remove(self):
        '''Remove()'''
        pass

    def SynthName(self):
        '''string = SynthName()'''
        pass

    def TestParent(self, item):
        '''boolean = TestParent(object item)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PacketEffect:
    def ByIndex(self, index):
        '''(string name,string typeName,integer type) = ByIndex(integer index)'''
        pass

    def Count(self):
        '''integer = Count()'''
        pass

    def Get(self, index, packet, item):
        '''float val = Get(integer index,pointer packet,pointer item)'''
        pass

    def Packet(self):
        '''string packet = Packet()'''
        pass

    def Set(self, index, packet, val, item):
        '''Set(integer index,pointer packet,float[] val,pointer item)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PaintBrushPacket:
    def BBox(self, toolVector, center, size):
        '''(integer,bounds bbox) = BBox(object toolVector,vector center,float size)'''
        pass

    def Eval3D(self, toolVector, center, wpos, bpos, rad):
        '''(float,float rgba) = Eval3D(object toolVector,vector center,vector wpos,vector bpos,float rad)'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def Size(self):
        '''float = Size()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PaintInkPacket:
    def Color(self, toolVector, flags):
        '''(integer,vector rgba) = Color(object toolVector,integer flags)'''
        pass

    def Flags(self, toolVector):
        '''integer = Flags(object toolVector)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PaintNozzlePacket:
    def Jitter(self, toolVector, brushSize):
        '''(integer,integer xj,integer yj) = Jitter(object toolVector,float brushSize)'''
        pass

    def Nozzle(self, toolVector):
        '''(integer,float strength,float size,float rotation) = Nozzle(object toolVector)'''
        pass

    def Paint(self, toolVector, brushSize):
        '''integer = Paint(object toolVector,float brushSize)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ParticleCoOperator:
    def Cleanup(self):
        '''Cleanup()'''
        pass

    def Initialize(self, eval):
        '''Initialize(object eval)'''
        pass

    def Particle(self):
        '''Particle()'''
        pass

    def Step(self, dT):
        '''Step(float dT)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ParticleEvalFrame:
    def AddParticle(self, state):
        '''integer index = AddParticle(float[] state)'''
        pass

    def AliveCount(self):
        '''integer = AliveCount()'''
        pass

    def GetVector(self, index):
        '''float vector = GetVector(integer index)'''
        pass

    def IsAlive(self, index):
        '''integer = IsAlive(integer index)'''
        pass

    def KillParticle(self, index):
        '''KillParticle(integer index)'''
        pass

    def MaxCount(self):
        '''integer = MaxCount()'''
        pass

    def Neighbors(self, maxDist, maxCount):
        '''(vector pos,integer index,float dist,integer count) = Neighbors(float maxDist,integer maxCount)'''
        pass

    def SetVector(self, index, vector):
        '''SetVector(integer index,float[] vector)'''
        pass

    def VertexDescription(self):
        '''object = VertexDescription()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ParticleFilter:
    def Cleanup(self):
        '''Cleanup()'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def Frame(self, stage):
        '''Frame(integer stage)'''
        pass

    def Initialize(self, vertex, frame, time):
        '''Initialize(object vertex,object frame,float time)'''
        pass

    def Particle(self, stage, vertex):
        '''Particle(integer stage,float[] vertex)'''
        pass

    def Step(self, other, dt):
        '''Step(object other,float dt)'''
        pass

    def Vertex(self, full):
        '''object = Vertex(object full)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ParticleGeneratorPacket:
    def Count(self, vts):
        '''integer = Count(object vts)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ParticleItem:
    def Evaluate(self, attr, index):
        '''Unknown object = Evaluate(object attr,integer index)'''
        pass

    def Prepare(self, eval):
        '''integer index = Prepare(object eval)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PathGeneratorPacket:
    def Bank(self, vts, t):
        '''float = Bank(object vts,float t)'''
        pass

    def Count(self, vts):
        '''integer = Count(object vts)'''
        pass

    def Current(self, vts):
        '''integer = Current(object vts)'''
        pass

    def KnotDataSet(self, gen):
        '''KnotDataSet(object gen)'''
        pass

    def Length(self, vts, t0, t1):
        '''float = Length(object vts,float t0,float t1)'''
        pass

    def Tangent(self, vts, t):
        '''float tan = Tangent(object vts,float t)'''
        pass

    def Value(self, vts, t):
        '''vector pos = Value(object vts,float t)'''
        pass

    def Walk(self, vts, pathStep, angle, ti, tf):
        '''integer = Walk(object vts,object pathStep,float angle,float ti,float tf)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PathStep:
    def CleanUp(self):
        '''CleanUp()'''
        pass

    def Setup(self):
        '''Setup()'''
        pass

    def Step(self, t):
        '''(integer,vector pos) = Step(float t)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Pattern:
    def GenerateSequenceString(self, start, end):
        '''string = GenerateSequenceString(integer start,integer end)'''
        pass

    def Test(self, index, offset):
        '''boolean = Test(integer index,integer offset)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PersistenceClient:
    def Setup(self):
        '''Setup()'''
        pass

    def SyncRead(self):
        '''SyncRead()'''
        pass

    def SyncWrite(self):
        '''SyncWrite()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PersistentEntry:
    def Append(self):
        '''Append()'''
        pass

    def Clear(self):
        '''Clear()'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def Delete(self):
        '''Delete()'''
        pass

    def Hash(self):
        '''string key = Hash()'''
        pass

    def Insert(self, key):
        '''Insert(string key)'''
        pass

    def Lookup(self, key):
        '''Lookup(string key)'''
        pass

    def Select(self, index):
        '''Select(integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PivotPacketTranslation:
    def Item(self, packet):
        '''Item object = Item(pointer packet)'''
        pass

    def Packet(self, item, type):
        '''pointer = Packet(object item,integer type)'''
        pass

    def Type(self, packet):
        '''integer = Type(pointer packet)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Point:
    def ClearMapValue(self, map):
        '''ClearMapValue(id map)'''
        pass

    def Copy(self):
        '''id pointID = Copy()'''
        pass

    def Corner(self):
        '''vector pos = Corner()'''
        pass

    def EdgeByIndex(self, index):
        '''id edgeID = EdgeByIndex(integer index)'''
        pass

    def EdgeCount(self):
        '''integer count = EdgeCount()'''
        pass

    def Enumerate(self, mode, visitor, monitor):
        '''Enumerate(integer mode,object visitor,object monitor)'''
        pass

    def ID(self):
        '''id = ID()'''
        pass

    def Index(self):
        '''integer index = Index()'''
        pass

    def MapEvaluate(self, map, value):
        '''boolean = MapEvaluate(id map,float[] value)'''
        pass

    def MapValue(self, map, value):
        '''boolean = MapValue(id map,float[] value)'''
        pass

    def Mesh(self):
        '''Unknown object = Mesh()'''
        pass

    def New(self, pos):
        '''id pointID = New(vector pos)'''
        pass

    def Normal(self, pol):
        '''vector normal = Normal(id pol)'''
        pass

    def OnSymmetryCenter(self):
        '''OnSymmetryCenter()'''
        pass

    def Part(self):
        '''integer part = Part()'''
        pass

    def PointByIndex(self, index):
        '''id pointID = PointByIndex(integer index)'''
        pass

    def PointCount(self):
        '''integer count = PointCount()'''
        pass

    def PolygonByIndex(self, index):
        '''id polygonID = PolygonByIndex(integer index)'''
        pass

    def PolygonCount(self):
        '''integer count = PolygonCount()'''
        pass

    def Pos(self):
        '''vector pos = Pos()'''
        pass

    def Remove(self):
        '''Remove()'''
        pass

    def Select(self, point):
        '''Select(id point)'''
        pass

    def SelectByIndex(self, index):
        '''SelectByIndex(integer index)'''
        pass

    def SelectPolygonVertex(self, polygon, index):
        '''SelectPolygonVertex(id polygon,integer index)'''
        pass

    def SetMapValue(self, map, value):
        '''SetMapValue(id map,float[] value)'''
        pass

    def SetMarks(self, set):
        '''SetMarks(integer set)'''
        pass

    def SetPos(self, pos):
        '''SetPos(vector pos)'''
        pass

    def Spawn(self):
        '''Point object = Spawn()'''
        pass

    def Symmetry(self):
        '''id pointID = Symmetry()'''
        pass

    def TestMarks(self, mode):
        '''boolean = TestMarks(integer mode)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PointCacheItem:
    def Cleanup(self):
        '''Cleanup()'''
        pass

    def Initialize(self, vdesc, attr, index, time, sample):
        '''Initialize(object vdesc,object attr,integer index,float time,float sample)'''
        pass

    def Prepare(self, eval):
        '''integer index = Prepare(object eval)'''
        pass

    def SaveFrame(self, pobj, time):
        '''SaveFrame(object pobj,float time)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Polygon:
    def AddContourEdge(self, startPt, endPt):
        '''AddContourEdge(id startPt,id endPt)'''
        pass

    def Area(self):
        '''float area = Area()'''
        pass

    def ClearMapValue(self, point, map):
        '''ClearMapValue(id point,id map)'''
        pass

    def ClearTriangles(self):
        '''ClearTriangles()'''
        pass

    def Closest(self, maxDist, pos):
        '''(boolean,vector hitPos,vector hitNorm,float hitDist) = Closest(float maxDist,vector pos)'''
        pass

    def EdgeIndex(self, edgeID):
        '''integer index = EdgeIndex(id edgeID)'''
        pass

    def Enumerate(self, mode, visitor, monitor):
        '''Enumerate(integer mode,object visitor,object monitor)'''
        pass

    def EnumerateBBox(self, mode, visitor, min, max):
        '''EnumerateBBox(integer mode,object visitor,vector min,vector max)'''
        pass

    def EnumerateBin(self, mode, visitor, bin):
        '''EnumerateBin(integer mode,object visitor,object bin)'''
        pass

    def EnumerateByPTag(self, mode, type, tag, visitor):
        '''EnumerateByPTag(integer mode,integer type,string tag,object visitor)'''
        pass

    def EnumerateByUV(self, mode, vMapName, quality, uv, visitor):
        '''EnumerateByUV(integer mode,string vMapName,integer quality,vector uv,object visitor)'''
        pass

    def EnumerateLine(self, mode, visitor, org, dir):
        '''EnumerateLine(integer mode,object visitor,vector org,vector dir)'''
        pass

    def EnumerateRay(self, mode, visitor, org, ray):
        '''EnumerateRay(integer mode,object visitor,vector org,vector ray)'''
        pass

    def FirstIsControlEndpoint(self):
        '''boolean = FirstIsControlEndpoint()'''
        pass

    def GenerateContour(self, type):
        '''id polygonID = GenerateContour(integer type)'''
        pass

    def GenerateContourProto(self):
        '''id polygonID = GenerateContourProto()'''
        pass

    def GenerateTriangles(self):
        '''integer count = GenerateTriangles()'''
        pass

    def GoodPoint(self, points, nPoints):
        '''integer index = GoodPoint(id[] points,integer nPoints)'''
        pass

    def ID(self):
        '''id = ID()'''
        pass

    def Index(self):
        '''integer index = Index()'''
        pass

    def IntersectRay(self, pos, dir):
        '''(boolean,vector hitNorm,float hitDist) = IntersectRay(vector pos,vector dir)'''
        pass

    def IsBorder(self):
        '''boolean = IsBorder()'''
        pass

    def LastIsControlEndpoint(self):
        '''boolean = LastIsControlEndpoint()'''
        pass

    def MapEvaluate(self, map, point, value):
        '''boolean = MapEvaluate(id map,id point,float[] value)'''
        pass

    def MapValue(self, map, point, value):
        '''boolean = MapValue(id map,id point,float[] value)'''
        pass

    def Mesh(self):
        '''Unknown object = Mesh()'''
        pass

    def New(self, type, vertices, numVert, rev):
        '''id polygonID = New(integer type,id[] vertices,integer numVert,integer rev)'''
        pass

    def NewCurveFill(self, polygons, numPols):
        '''id polygonID = NewCurveFill(id[] polygons,integer numPols)'''
        pass

    def NewProto(self, type, vertices, numVert, rev):
        '''id polygonID = NewProto(integer type,id[] vertices,integer numVert,integer rev)'''
        pass

    def Normal(self):
        '''vector normal = Normal()'''
        pass

    def Part(self):
        '''integer part = Part()'''
        pass

    def PointIndex(self, pointID):
        '''integer index = PointIndex(id pointID)'''
        pass

    def Remove(self):
        '''Remove()'''
        pass

    def RepresentativePosition(self):
        '''vector pos = RepresentativePosition()'''
        pass

    def Select(self, polygon):
        '''Select(id polygon)'''
        pass

    def SelectByIndex(self, index):
        '''SelectByIndex(integer index)'''
        pass

    def SetFirstIsControlEndpoint(self, state):
        '''SetFirstIsControlEndpoint(integer state)'''
        pass

    def SetLastIsControlEndpoint(self, state):
        '''SetLastIsControlEndpoint(integer state)'''
        pass

    def SetMapValue(self, point, map, value):
        '''SetMapValue(id point,id map,float[] value)'''
        pass

    def SetMarks(self, set):
        '''SetMarks(integer set)'''
        pass

    def SetVertexList(self, vertices, numVert, rev):
        '''SetVertexList(id[] vertices,integer numVert,integer rev)'''
        pass

    def SharedEdge(self, polygonID):
        '''id edgeID = SharedEdge(id polygonID)'''
        pass

    def Spawn(self):
        '''Polygon object = Spawn()'''
        pass

    def StartContour(self):
        '''StartContour()'''
        pass

    def Symmetry(self):
        '''id polygonID = Symmetry()'''
        pass

    def TestMarks(self, mode):
        '''boolean = TestMarks(integer mode)'''
        pass

    def TriangleByIndex(self, index):
        '''(id point0,id point1,id point2) = TriangleByIndex(integer index)'''
        pass

    def Type(self):
        '''integer type = Type()'''
        pass

    def UVLookup(self, vMapName, uv):
        '''(vector surfacePosition,vector surfaceNormal,vector surfaceDPDU,vector surfaceDPDV) = UVLookup(string vMapName,vector uv)'''
        pass

    def UVPart(self, map):
        '''integer part = UVPart(id map)'''
        pass

    def VertexByIndex(self, index):
        '''id point = VertexByIndex(integer index)'''
        pass

    def VertexCount(self):
        '''integer count = VertexCount()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PolygonPacketTranslation:
    def Item(self, packet):
        '''Item object = Item(pointer packet)'''
        pass

    def Mesh(self, packet):
        '''Mesh object = Mesh(pointer packet)'''
        pass

    def Packet(self, polygon, mesh):
        '''pointer = Packet(id polygon,object mesh)'''
        pass

    def Polygon(self, packet):
        '''id polygon = Polygon(pointer packet)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PolygonSlice:
    def ByLine(self, pos0, pos1):
        '''ByLine(vector pos0,vector pos1)'''
        pass

    def Done(self):
        '''integer = Done()'''
        pass

    def SetAxis(self, axis):
        '''SetAxis(integer axis)'''
        pass

    def SetAxisByVector(self, axis):
        '''SetAxisByVector(vector axis)'''
        pass

    def Start(self, meshObj, pol, setAxis):
        '''Start(object meshObj,id pol,integer setAxis)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PoseItem:
    def Create(self):
        '''Create()'''
        pass

    def GetFloat(self, item, channelIndex):
        '''float value = GetFloat(object item,integer channelIndex)'''
        pass

    def GetInt(self, item, channelIndex):
        '''integer value = GetInt(object item,integer channelIndex)'''
        pass

    def SetFloat(self, item, channelIndex, value):
        '''SetFloat(object item,integer channelIndex,float value)'''
        pass

    def SetInt(self, item, channelIndex, value):
        '''SetInt(object item,integer channelIndex,integer value)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PresetBrowserSource:
    def ViewportHash(self):
        '''string = ViewportHash()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PresetDo:
    def Do(self, path):
        '''Do(string path)'''
        pass

    def Test(self, path):
        '''Test(string path)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PresetLoaderTarget:
    def CategoryByIndex(self, index):
        '''string category = CategoryByIndex(integer index)'''
        pass

    def CategoryCount(self):
        '''integer count = CategoryCount()'''
        pass

    def ServerName(self):
        '''string = ServerName()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PresetMetrics:
    def Flags(self):
        '''integer flags = Flags()'''
        pass

    def Markup(self):
        '''Attributes object = Markup()'''
        pass

    def Metadata(self):
        '''Attributes object = Metadata()'''
        pass

    def ThumbnailIdealSize(self):
        '''(integer idealW,integer idealH) = ThumbnailIdealSize()'''
        pass

    def ThumbnailImage(self):
        '''Image object = ThumbnailImage()'''
        pass

    def ThumbnailResource(self):
        '''string resourceName = ThumbnailResource()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PresetPathPacketTranslation:
    def Identifier(self, packet):
        '''string identifier = Identifier(pointer packet)'''
        pass

    def Packet(self, path, identifier):
        '''pointer = Packet(string path,string identifier)'''
        pass

    def Path(self, packet):
        '''string path = Path(pointer packet)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PresetType:
    def Apply(self, path, destination):
        '''Apply(string path,object destination)'''
        pass

    def BaseAspect(self):
        '''float aspect = BaseAspect()'''
        pass

    def DefaultThumbnail(self, path):
        '''DefaultThumbnail(string path)'''
        pass

    def Do(self, path):
        '''Do(string path)'''
        pass

    def DoCommandFlags(self, path):
        '''integer flags = DoCommandFlags(string path)'''
        pass

    def GenericThumbnailResource(self, path):
        '''string resourceName = GenericThumbnailResource(string path)'''
        pass

    def Metrics(self, path, flags, w, h, prevMetrics):
        '''PresetMetrics object = Metrics(string path,integer flags,integer w,integer h,object prevMetrics)'''
        pass

    def Recognize(self, path):
        '''string category = Recognize(string path)'''
        pass

    def StoreMarkup(self, path, attr):
        '''StoreMarkup(string path,object attr)'''
        pass

    def StoreThumbnail(self, path, image):
        '''StoreThumbnail(string path,object image)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Preview:
    def GetBuffer(self):
        '''Image object = GetBuffer()'''
        pass

    def GetCurrentTime(self):
        '''float = GetCurrentTime()'''
        pass

    def GetResHeight(self):
        '''integer = GetResHeight()'''
        pass

    def GetResWidth(self):
        '''integer = GetResWidth()'''
        pass

    def IsComplete(self):
        '''boolean = IsComplete()'''
        pass

    def Pause(self):
        '''Pause()'''
        pass

    def Reset(self):
        '''Reset()'''
        pass

    def SetAlpha(self, enable):
        '''SetAlpha(integer enable)'''
        pass

    def SetCameraOverrideApertureX(self, apertureX):
        '''SetCameraOverrideApertureX(float apertureX)'''
        pass

    def SetCameraOverrideApertureY(self, apertureY):
        '''SetCameraOverrideApertureY(float apertureY)'''
        pass

    def SetCameraOverrideFocalLength(self, focalLength):
        '''SetCameraOverrideFocalLength(float focalLength)'''
        pass

    def SetCameraOverrideProjectionType(self, projectionType):
        '''SetCameraOverrideProjectionType(integer projectionType)'''
        pass

    def SetCameraOverrideTransform(self, transform):
        '''SetCameraOverrideTransform(matrix transform)'''
        pass

    def SetMotionBlur(self, enable):
        '''SetMotionBlur(integer enable)'''
        pass

    def SetNotifier(self, notifier):
        '''SetNotifier(object notifier)'''
        pass

    def SetQuality(self, quality, samples):
        '''SetQuality(integer quality,integer samples)'''
        pass

    def SetRenderAllOutputs(self, enable):
        '''SetRenderAllOutputs(integer enable)'''
        pass

    def SetRenderTime(self, time):
        '''SetRenderTime(float time)'''
        pass

    def SetRes(self, width, height):
        '''SetRes(integer width,integer height)'''
        pass

    def SetStereo(self, enable, eye):
        '''SetStereo(integer enable,integer eye)'''
        pass

    def SetUseAllThreads(self, enable):
        '''SetUseAllThreads(integer enable)'''
        pass

    def Start(self):
        '''Start()'''
        pass

    def Stop(self):
        '''Stop()'''
        pass

    def UseCameraOverride(self, useCameraOverride):
        '''UseCameraOverride(integer useCameraOverride)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class PreviewNotifier:
    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Profile1DPreDest:
    def Box(self):
        '''bounds box = Box()'''
        pass

    def Count(self):
        '''integer = Count()'''
        pass

    def CurveTo(self, x0, y0, x1, y1, x2, y2):
        '''CurveTo(float x0,float y0,float x1,float y1,float x2,float y2)'''
        pass

    def Evaluate(self, t, flags, axis):
        '''float = Evaluate(float t,integer flags,integer axis)'''
        pass

    def LineTo(self, x, y):
        '''LineTo(float x,float y)'''
        pass

    def MoveTo(self, x, y):
        '''MoveTo(float x,float y)'''
        pass

    def PathSteps(self, tol, flags, x, y, nstep):
        '''integer = PathSteps(float tol,integer flags,double[] x,double[] y,integer nstep)'''
        pass

    def SelectByIndex(self, index):
        '''SelectByIndex(integer index)'''
        pass

    def SelectByParameter(self, t):
        '''SelectByParameter(float t)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Profile2DPreDest:
    def Box(self):
        '''bounds box = Box()'''
        pass

    def Closed(self, closed):
        '''Closed(integer closed)'''
        pass

    def Count(self):
        '''integer = Count()'''
        pass

    def CurveTo(self, x0, y0, x1, y1, x2, y2):
        '''CurveTo(float x0,float y0,float x1,float y1,float x2,float y2)'''
        pass

    def LineTo(self, x, y):
        '''LineTo(float x,float y)'''
        pass

    def MoveTo(self, x, y):
        '''MoveTo(float x,float y)'''
        pass

    def NewPath(self):
        '''NewPath()'''
        pass

    def SelectByIndex(self, index):
        '''SelectByIndex(integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ProjDirOverride:
    def OverrideWith(self, originalPath):
        '''string = OverrideWith(string originalPath)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ProxyOptions:
    def AddItem(self, type, internal_name, user_name):
        '''AddItem(integer type,string internal_name,string user_name)'''
        pass

    def LoadList(self):
        '''LoadList()'''
        pass

    def LoadNone(self):
        '''LoadNone()'''
        pass

    def SetFlags(self, flags):
        '''SetFlags(integer flags)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Quaternion:
    def GetAngleAxis(self):
        '''(float ang,vector axis) = GetAngleAxis()'''
        pass

    def GetMatrix(self):
        '''matrix mat3 = GetMatrix()'''
        pass

    def GetQuaternion(self):
        '''quaternion q = GetQuaternion()'''
        pass

    def SetAngleAxis(self, ang, axis):
        '''SetAngleAxis(float ang,vector axis)'''
        pass

    def SetMatrix(self, mat3):
        '''SetMatrix(matrix mat3)'''
        pass

    def SetQuaternion(self, q):
        '''SetQuaternion(quaternion q)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Raycast:
    def GetSurfaceType(self, vector):
        '''integer = GetSurfaceType(object vector)'''
        pass

    def InternalShade(self, vector):
        '''InternalShade(object vector)'''
        pass

    def RayPop(self, vector):
        '''RayPop(object vector)'''
        pass

    def Raycast(self, vector, pos, dir):
        '''float = Raycast(object vector,vector pos,vector dir)'''
        pass

    def Raytrace(self, vector, pos, dir, flags):
        '''float = Raytrace(object vector,vector pos,vector dir,integer flags)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class RaycastPacket:
    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Raymarch:
    def GetOpacity(self, vector, dist):
        '''float opa = GetOpacity(object vector,float dist)'''
        pass

    def Jitter1D(self, vector):
        '''float offset = Jitter1D(object vector)'''
        pass

    def ShaderEvaluate(self, vector, shader):
        '''ShaderEvaluate(object vector,object shader)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class RenderBucket:
    def GetGIBounce(self):
        '''integer = GetGIBounce()'''
        pass

    def GetPixel(self):
        '''(integer x,integer y) = GetPixel()'''
        pass

    def GetSubPixel(self):
        '''(float x,float y) = GetSubPixel()'''
        pass

    def GetTimeOffset(self):
        '''float = GetTimeOffset()'''
        pass

    def PopRay(self):
        '''PopRay()'''
        pass

    def PushRay(self):
        '''PushRay()'''
        pass

    def SampleVec(self):
        '''Unknown object = SampleVec()'''
        pass

    def Thread(self):
        '''integer = Thread()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class RenderCache:
    def Clear(self):
        '''Clear()'''
        pass

    def GeoSurfaceCount(self):
        '''integer count = GeoSurfaceCount()'''
        pass

    def Time(self):
        '''(float time,float timeOffsets) = Time()'''
        pass

    def Update(self, time, force):
        '''Update(float time,integer force)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class RenderJob:
    def ActionName(self):
        '''string action = ActionName()'''
        pass

    def FrameBufferRegionBackgroundSlot(self):
        '''(integer slotIndex,integer passIndex) = FrameBufferRegionBackgroundSlot()'''
        pass

    def FrameBufferSlot(self):
        '''integer index = FrameBufferSlot()'''
        pass

    def GroupName(self):
        '''string group = GroupName()'''
        pass

    def Options(self):
        '''integer options = Options()'''
        pass

    def OutputFilename(self):
        '''string filename = OutputFilename()'''
        pass

    def OutputFormat(self):
        '''string format = OutputFormat()'''
        pass

    def ProgressAborted(self):
        '''ProgressAborted()'''
        pass

    def ProgressBegin(self, renderStats):
        '''ProgressBegin(object renderStats)'''
        pass

    def ProgressBucketBegin(self, row, col):
        '''ProgressBucketBegin(integer row,integer col)'''
        pass

    def ProgressBucketEnd(self, row, col, code):
        '''ProgressBucketEnd(integer row,integer col,integer code)'''
        pass

    def ProgressEnd(self, finalFrameBuffer, finalStats):
        '''ProgressEnd(object finalFrameBuffer,object finalStats)'''
        pass

    def ProgressFrameBegin(self, frame, w, h):
        '''ProgressFrameBegin(integer frame,integer w,integer h)'''
        pass

    def ProgressFrameEnd(self, frame, stats):
        '''ProgressFrameEnd(integer frame,object stats)'''
        pass

    def ProgressFramePassBegin(self, frame, renderPass, eye, pass_int):
        '''ProgressFramePassBegin(integer frame,integer renderPass,integer eye,integer pass_int)'''
        pass

    def ProgressFramePassEnd(self, frame, renderPass, eye, pass_int):
        '''ProgressFramePassEnd(integer frame,integer renderPass,integer eye,integer pass_int)'''
        pass

    def ProgressImage(self, img):
        '''ProgressImage(object img)'''
        pass

    def ProgressImageMetrics(self, resX, resH):
        '''(integer w,integer h,float zoom,integer panX,integer panY,integer output) = ProgressImageMetrics(integer resX,integer resH)'''
        pass

    def ProgressImageUpdated(self):
        '''ProgressImageUpdated()'''
        pass

    def ProgressPercentDone(self, progressScene, progressFrame, progressRenderPass):
        '''ProgressPercentDone(float progressScene,float progressFrame,float progressRenderPass)'''
        pass

    def ProgressRenderPassBegin(self, frameIndex, renderPassIndex, renderPassName, eye):
        '''ProgressRenderPassBegin(integer frameIndex,integer renderPassIndex,string renderPassName,integer eye)'''
        pass

    def ProgressRenderPassEnd(self, frame, renderPassIndex, renderPassName, eye, frameBuffer, stats):
        '''ProgressRenderPassEnd(integer frame,integer renderPassIndex,string renderPassName,integer eye,object frameBuffer,object stats)'''
        pass

    def ProgressString(self, infoString, userString):
        '''ProgressString(string infoString,string userString)'''
        pass

    def ProgressTickle(self):
        '''ProgressTickle()'''
        pass

    def RenderAs(self):
        '''integer mode = RenderAs()'''
        pass

    def RenderAtTime(self):
        '''float time = RenderAtTime()'''
        pass

    def RenderBakeCageVMap(self):
        '''string vmap = RenderBakeCageVMap()'''
        pass

    def RenderBakeEffect(self):
        '''string effect = RenderBakeEffect()'''
        pass

    def RenderBakeFromRGBA(self):
        '''integer mode = RenderBakeFromRGBA()'''
        pass

    def RenderBakeImage(self):
        '''Image object = RenderBakeImage()'''
        pass

    def RenderBakeLookDistance(self):
        '''float distance = RenderBakeLookDistance()'''
        pass

    def RenderBakeToRGBA(self):
        '''integer mode = RenderBakeToRGBA()'''
        pass

    def RenderBakeVMap(self):
        '''string vmap = RenderBakeVMap()'''
        pass

    def RenderItem(self):
        '''Item object = RenderItem()'''
        pass

    def RenderTurntableFPS(self):
        '''integer fps = RenderTurntableFPS()'''
        pass

    def RenderTurntableNumFrames(self):
        '''integer numFrames = RenderTurntableNumFrames()'''
        pass

    def TestItem(self, item, eval):
        '''TestItem(object item,object eval)'''
        pass

    def UDIM(self):
        '''integer udim = UDIM()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class RenderProgressListener:
    def Begin(self):
        '''Begin()'''
        pass

    def End(self, stats):
        '''End(object stats)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class RenderStats:
    def GetFrameStats(self, frameIndex):
        '''Unknown object = GetFrameStats(integer frameIndex)'''
        pass

    def GetPassStats(self, frameIndex, passIndex):
        '''Unknown object = GetPassStats(integer frameIndex,integer passIndex)'''
        pass

    def GetSceneStats(self):
        '''Unknown object = GetSceneStats()'''
        pass

    def NumFrames(self):
        '''integer count = NumFrames()'''
        pass

    def NumPasses(self, frameIndex):
        '''integer count = NumPasses(integer frameIndex)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ReplicatorEnumerator:
    def Dissolve(self):
        '''float = Dissolve()'''
        pass

    def Enumerate(self, visitor, chan, localXform):
        '''Enumerate(object visitor,object chan,integer localXform)'''
        pass

    def Geometry(self):
        '''Unknown object = Geometry()'''
        pass

    def GroupId(self):
        '''float = GroupId()'''
        pass

    def Id(self):
        '''float = Id()'''
        pass

    def Item(self):
        '''Item object = Item()'''
        pass

    def Orientation(self):
        '''matrix mx = Orientation()'''
        pass

    def Position(self):
        '''vector pos = Position()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Saver:
    def Save(self, source, filename, monitor):
        '''Save(object source,string filename,object monitor)'''
        pass

    def Verify(self, source, message):
        '''Verify(object source,object message)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Scene:
    def AllocAssets(self):
        '''SceneAssets object = AllocAssets()'''
        pass

    def AnyItemOfType(self, type):
        '''Item object = AnyItemOfType(integer type)'''
        pass

    def BatchCopyAbort(self):
        '''BatchCopyAbort()'''
        pass

    def BatchCopyBegin(self, destination):
        '''BatchCopyBegin(object destination)'''
        pass

    def BatchCopyEnd(self):
        '''BatchCopyEnd()'''
        pass

    def BatchCreateAbort(self):
        '''BatchCreateAbort()'''
        pass

    def BatchCreateBegin(self):
        '''BatchCreateBegin()'''
        pass

    def BatchCreateEnd(self):
        '''BatchCreateEnd()'''
        pass

    def Changed(self, changed):
        '''Changed(integer changed)'''
        pass

    def Channels(self, name, time):
        '''ChannelRead object = Channels(string name,float time)'''
        pass

    def CustomLoad(self, visitor):
        '''CustomLoad(object visitor)'''
        pass

    def DeleteCollection(self, collection, closeMode):
        '''DeleteCollection(object collection,integer closeMode)'''
        pass

    def EvalModInvalidate(self, modName):
        '''EvalModInvalidate(string modName)'''
        pass

    def EvalModReset(self, modName):
        '''EvalModReset(string modName)'''
        pass

    def FileFormat(self):
        '''string format = FileFormat()'''
        pass

    def Filename(self):
        '''string filename = Filename()'''
        pass

    def FriendlyFilename(self, flags):
        '''string filename = FriendlyFilename(integer flags)'''
        pass

    def GeneralCollection(self, typeName, arg, rootItem):
        '''Unknown object = GeneralCollection(string typeName,string arg,object rootItem)'''
        pass

    def GeneralCollectionRaw(self, typeName, arg, rootItem):
        '''Unknown object = GeneralCollectionRaw(string typeName,string arg,object rootItem)'''
        pass

    def GraphByIndex(self, index):
        '''SceneGraph object = GraphByIndex(integer index)'''
        pass

    def GraphCount(self):
        '''integer count = GraphCount()'''
        pass

    def GraphLookup(self, name):
        '''SceneGraph object = GraphLookup(string name)'''
        pass

    def HasChanged(self):
        '''integer numChanges = HasChanged()'''
        pass

    def Import(self, path, monitor):
        '''Import(string path,object monitor)'''
        pass

    def ItemAdd(self, type):
        '''Item object = ItemAdd(integer type)'''
        pass

    def ItemAddReference(self, item):
        '''Item object = ItemAddReference(object item)'''
        pass

    def ItemByIndex(self, type, index):
        '''Item object = ItemByIndex(integer type,integer index)'''
        pass

    def ItemByIndexByTypes(self, types, index):
        '''Item object = ItemByIndexByTypes(int[] types,integer index)'''
        pass

    def ItemCopy(self, item):
        '''Item object = ItemCopy(object item)'''
        pass

    def ItemCount(self, type):
        '''integer count = ItemCount(integer type)'''
        pass

    def ItemCountByTypes(self, types):
        '''integer count = ItemCountByTypes(int[] types)'''
        pass

    def ItemInstance(self, item):
        '''Item object = ItemInstance(object item)'''
        pass

    def ItemLocalize(self, item):
        '''Item object = ItemLocalize(object item)'''
        pass

    def ItemLookup(self, id):
        '''Item object = ItemLookup(string id)'''
        pass

    def ItemLookupIdent(self, id):
        '''Item object = ItemLookupIdent(string id)'''
        pass

    def ItemLookupImported(self, id):
        '''Item object = ItemLookupImported(string id)'''
        pass

    def ItemRemove(self, item):
        '''ItemRemove(object item)'''
        pass

    def ItemReplace(self, item, type):
        '''Item object = ItemReplace(object item,integer type)'''
        pass

    def ItemRootType(self):
        '''integer = ItemRootType()'''
        pass

    def LoadFlags(self):
        '''integer = LoadFlags()'''
        pass

    def Parent(self):
        '''Item object = Parent()'''
        pass

    def RenderCameraByIndex(self, index):
        '''Item object = RenderCameraByIndex(integer index)'''
        pass

    def RenderCameraCount(self):
        '''integer count = RenderCameraCount()'''
        pass

    def RenderCameraIndex(self, eval):
        '''integer index = RenderCameraIndex(object eval)'''
        pass

    def SetupChannels(self):
        '''ChannelRead object = SetupChannels()'''
        pass

    def SetupMode(self):
        '''boolean = SetupMode()'''
        pass

    def SubSceneByIndex(self, type, index):
        '''Scene object = SubSceneByIndex(integer type,integer index)'''
        pass

    def SubSceneCount(self, type):
        '''integer count = SubSceneCount(integer type)'''
        pass

    def TextureCopy(self, item):
        '''Item object = TextureCopy(object item)'''
        pass

    def WorkPlanePosition(self, chanRead):
        '''vector pos = WorkPlanePosition(object chanRead)'''
        pass

    def WorkPlaneRotation(self, chanRead):
        '''matrix m3 = WorkPlaneRotation(object chanRead)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SceneAssets:
    def Category(self, index):
        '''string category = Category(integer index)'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def FileType(self, index):
        '''string type = FileType(integer index)'''
        pass

    def GetPath(self, item, ident):
        '''string = GetPath(object item,string ident)'''
        pass

    def Ident(self, index):
        '''string ident = Ident(integer index)'''
        pass

    def IsSequence(self, index):
        '''boolean = IsSequence(integer index)'''
        pass

    def Item(self, index):
        '''Item object = Item(integer index)'''
        pass

    def SetPath(self, item, ident, newPath):
        '''SetPath(object item,string ident,string newPath)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SceneContents:
    def AddLink(self, type, internal_name, user_name):
        '''AddLink(integer type,string internal_name,string user_name)'''
        pass

    def BBox(self, index):
        '''bounds box = BBox(integer index)'''
        pass

    def ByInternalName(self, internal_name):
        '''integer index = ByInternalName(string internal_name)'''
        pass

    def ByUserName(self, user_name):
        '''integer index = ByUserName(string user_name)'''
        pass

    def Count(self):
        '''integer = Count()'''
        pass

    def InternalName(self, index):
        '''string = InternalName(integer index)'''
        pass

    def Item(self, type, internal_name, user_name):
        '''Item(integer type,string internal_name,string user_name)'''
        pass

    def LinkCount(self, index):
        '''integer = LinkCount(integer index)'''
        pass

    def Reset(self):
        '''Reset()'''
        pass

    def SetBBox(self, min_X, min_Y, min_Z, max_X, max_Y, max_Z):
        '''SetBBox(float min_X,float min_Y,float min_Z,float max_X,float max_Y,float max_Z)'''
        pass

    def Type(self, index):
        '''integer type = Type(integer index)'''
        pass

    def UserName(self, index):
        '''string = UserName(integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SceneEvalListener:
    def ChannelPostValue(self):
        '''ChannelPostValue()'''
        pass

    def ChannelPreValue(self):
        '''ChannelPreValue()'''
        pass

    def ChannelValue(self, item, index):
        '''ChannelValue(object item,integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SceneGraph:
    def Context(self):
        '''Scene object = Context()'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def RootByIndex(self, index):
        '''Item object = RootByIndex(integer index)'''
        pass

    def RootCount(self):
        '''integer count = RootCount()'''
        pass

    def RootFirst(self):
        '''Item object = RootFirst()'''
        pass

    def RootNext(self):
        '''Item object = RootNext()'''
        pass

    def RootRemove(self, item):
        '''RootRemove(object item)'''
        pass

    def RootSetPos(self, item, pos):
        '''RootSetPos(object item,integer pos)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SceneItemListener:
    def ChanLinkAdd(self, graph, itemFrom, chanFrom, itemTo, chanTo):
        '''ChanLinkAdd(string graph,object itemFrom,integer chanFrom,object itemTo,integer chanTo)'''
        pass

    def ChanLinkRemAfter(self, graph, itemFrom, chanFrom, itemTo, chanTo):
        '''ChanLinkRemAfter(string graph,object itemFrom,integer chanFrom,object itemTo,integer chanTo)'''
        pass

    def ChanLinkRemBefore(self, graph, itemFrom, chanFrom, itemTo, chanTo):
        '''ChanLinkRemBefore(string graph,object itemFrom,integer chanFrom,object itemTo,integer chanTo)'''
        pass

    def ChanLinkSet(self, graph, itemFrom, chanFrom, itemTo, chanTo):
        '''ChanLinkSet(string graph,object itemFrom,integer chanFrom,object itemTo,integer chanTo)'''
        pass

    def ChannelValue(self, action, item, index):
        '''ChannelValue(string action,object item,integer index)'''
        pass

    def ItemAdd(self, item):
        '''ItemAdd(object item)'''
        pass

    def ItemAddChannel(self, item):
        '''ItemAddChannel(object item)'''
        pass

    def ItemChannelDefault(self, item, index):
        '''ItemChannelDefault(object item,integer index)'''
        pass

    def ItemChannelMinMax(self, item, index):
        '''ItemChannelMinMax(object item,integer index)'''
        pass

    def ItemChannelName(self, item, index):
        '''ItemChannelName(object item,integer index)'''
        pass

    def ItemChannelType(self, item, index):
        '''ItemChannelType(object item,integer index)'''
        pass

    def ItemChild(self, item):
        '''ItemChild(object item)'''
        pass

    def ItemLocal(self, item):
        '''ItemLocal(object item)'''
        pass

    def ItemName(self, item):
        '''ItemName(object item)'''
        pass

    def ItemPackage(self, item):
        '''ItemPackage(object item)'''
        pass

    def ItemParent(self, item):
        '''ItemParent(object item)'''
        pass

    def ItemPostDelete(self, scene):
        '''ItemPostDelete(object scene)'''
        pass

    def ItemPreChange(self, scene):
        '''ItemPreChange(object scene)'''
        pass

    def ItemRemove(self, item):
        '''ItemRemove(object item)'''
        pass

    def ItemRemoveChannel(self, item):
        '''ItemRemoveChannel(object item)'''
        pass

    def ItemSource(self, item):
        '''ItemSource(object item)'''
        pass

    def ItemTag(self, item):
        '''ItemTag(object item)'''
        pass

    def LinkAdd(self, graph, itemFrom, itemTo):
        '''LinkAdd(string graph,object itemFrom,object itemTo)'''
        pass

    def LinkRemAfter(self, graph, itemFrom, itemTo):
        '''LinkRemAfter(string graph,object itemFrom,object itemTo)'''
        pass

    def LinkRemBefore(self, graph, itemFrom, itemTo):
        '''LinkRemBefore(string graph,object itemFrom,object itemTo)'''
        pass

    def LinkSet(self, graph, itemFrom, itemTo):
        '''LinkSet(string graph,object itemFrom,object itemTo)'''
        pass

    def SceneClear(self, scene):
        '''SceneClear(object scene)'''
        pass

    def SceneCreate(self, scene):
        '''SceneCreate(object scene)'''
        pass

    def SceneDestroy(self, scene):
        '''SceneDestroy(object scene)'''
        pass

    def SceneFilename(self, scene, filename):
        '''SceneFilename(object scene,string filename)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SceneItemPreDest:
    def ContainerItem(self):
        '''Item object = ContainerItem()'''
        pass

    def Item(self):
        '''(integer mode,Item object) = Item()'''
        pass

    def Orientation(self):
        '''matrix xfrm = Orientation()'''
        pass

    def Position(self):
        '''vector pos = Position()'''
        pass

    def Scene(self):
        '''Scene object = Scene()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SceneLoaderTarget:
    def ClearFlags(self, flags):
        '''ClearFlags(integer flags)'''
        pass

    def SetFlags(self, flags):
        '''SetFlags(integer flags)'''
        pass

    def SetRootType(self, typeName):
        '''SetRootType(string typeName)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ScenePacketTranslation:
    def Packet(self, scene):
        '''pointer = Packet(object scene)'''
        pass

    def Scene(self, packet):
        '''Scene object = Scene(pointer packet)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SceneSubset:
    def GetCollection(self):
        '''ItemCollection object = GetCollection()'''
        pass

    def GetScene(self):
        '''Scene object = GetScene()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SchemaDest:
    def Channel(self):
        '''Unknown object = Channel()'''
        pass

    def Graph(self):
        '''Unknown object = Graph()'''
        pass

    def Group(self):
        '''Item object = Group()'''
        pass

    def Item(self):
        '''Item object = Item()'''
        pass

    def Link(self):
        '''Unknown object = Link()'''
        pass

    def Node(self):
        '''Item object = Node()'''
        pass

    def Position(self):
        '''vector pos = Position()'''
        pass

    def ViewType(self):
        '''integer = ViewType()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SchematicConnection:
    def AllowConnect(self, from_obj, to_obj):
        '''boolean = AllowConnect(object from_obj,object to_obj)'''
        pass

    def AllowConnectType(self, to_obj, type):
        '''boolean = AllowConnectType(object to_obj,integer type)'''
        pass

    def BaseFlags(self):
        '''integer = BaseFlags()'''
        pass

    def ByIndex(self, item, index):
        '''Item object = ByIndex(object item,integer index)'''
        pass

    def ChannelAllowConnect(self, from_obj, fromIndex, to_obj, toIndex):
        '''boolean = ChannelAllowConnect(object from_obj,integer fromIndex,object to_obj,integer toIndex)'''
        pass

    def ChannelByIndex(self, xItem, fromIndex, index):
        '''(Item object,integer toIndex) = ChannelByIndex(object xItem,integer fromIndex,integer index)'''
        pass

    def ChannelConnect(self, from_obj, fromIndex, to_obj, toIndex):
        '''ChannelConnect(object from_obj,integer fromIndex,object to_obj,integer toIndex)'''
        pass

    def ChannelCount(self, xItem, fromIndex):
        '''integer count = ChannelCount(object xItem,integer fromIndex)'''
        pass

    def ChannelDisconnect(self, from_obj, fromIndex, to_obj, toIndex):
        '''ChannelDisconnect(object from_obj,integer fromIndex,object to_obj,integer toIndex)'''
        pass

    def ChannelIOType(self):
        '''integer ioType = ChannelIOType()'''
        pass

    def Connect(self, from_obj, to_obj, toIndex):
        '''Connect(object from_obj,object to_obj,integer toIndex)'''
        pass

    def Count(self, item):
        '''integer count = Count(object item)'''
        pass

    def Disconnect(self, from_obj, to_obj):
        '''Disconnect(object from_obj,object to_obj)'''
        pass

    def GraphName(self):
        '''string name = GraphName()'''
        pass

    def ItemFlags(self, item):
        '''integer flags = ItemFlags(object item)'''
        pass

    def ItemFlagsValid(self):
        '''integer = ItemFlagsValid()'''
        pass

    def PerItemFlags(self, item):
        '''integer flags = PerItemFlags(object item)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SchematicGroup:
    def AddItem(self, item):
        '''SchematicNode object = AddItem(object item)'''
        pass

    def Group(self):
        '''Item object = Group()'''
        pass

    def InputNode(self):
        '''SchematicNode object = InputNode()'''
        pass

    def IsWorkspace(self):
        '''boolean = IsWorkspace()'''
        pass

    def NodeByIndex(self, index):
        '''SchematicNode object = NodeByIndex(integer index)'''
        pass

    def NodeCount(self):
        '''integer count = NodeCount()'''
        pass

    def OutputNode(self):
        '''SchematicNode object = OutputNode()'''
        pass

    def RemoveItem(self, item):
        '''RemoveItem(object item)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SchematicNode:
    def AbsoluteSize(self):
        '''(float width,float height) = AbsoluteSize()'''
        pass

    def AddChannel(self, index):
        '''AddChannel(integer index)'''
        pass

    def ChannelByIndex(self, index, type):
        '''SchematicNodeChannel object = ChannelByIndex(integer index,integer type)'''
        pass

    def ChannelCount(self):
        '''integer count = ChannelCount()'''
        pass

    def ConnectionByIndex(self, index, type):
        '''SchematicNodeConnection object = ConnectionByIndex(integer index,integer type)'''
        pass

    def ConnectionCount(self):
        '''integer count = ConnectionCount()'''
        pass

    def Expanded(self):
        '''boolean = Expanded()'''
        pass

    def Group(self):
        '''Item object = Group()'''
        pass

    def IsRoot(self):
        '''boolean = IsRoot()'''
        pass

    def Item(self):
        '''Item object = Item()'''
        pass

    def Position(self):
        '''(float x,float y) = Position()'''
        pass

    def RemoveChannel(self, index):
        '''RemoveChannel(integer index)'''
        pass

    def RootNode(self):
        '''SchematicNode object = RootNode()'''
        pass

    def SetPosition(self, x, y):
        '''SetPosition(float x,float y)'''
        pass

    def Size(self):
        '''(float width,float height) = Size()'''
        pass

    def SubNodeByIndex(self, index):
        '''SchematicNode object = SubNodeByIndex(integer index)'''
        pass

    def SubNodeCount(self):
        '''integer count = SubNodeCount()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SchematicNodeChannel:
    def ByIndex(self, index):
        '''SchematicNodeChannel object = ByIndex(integer index)'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def Flags(self):
        '''integer flags = Flags()'''
        pass

    def Index(self):
        '''integer index = Index()'''
        pass

    def Node(self):
        '''SchematicNode object = Node()'''
        pass

    def Position(self):
        '''(float x,float y) = Position()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SchematicNodeConnection:
    def ByIndex(self, index):
        '''SchematicNodeConnection object = ByIndex(integer index)'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def Flags(self):
        '''integer flags = Flags()'''
        pass

    def Node(self):
        '''SchematicNode object = Node()'''
        pass

    def Position(self, index):
        '''(float x,float y) = Position(integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Script:
    def Desc(self):
        '''string desc = Desc()'''
        pass

    def GetBuffer(self):
        '''(string buffer,integer bufferLength) = GetBuffer()'''
        pass

    def Hash(self):
        '''string hash = Hash()'''
        pass

    def HelpKey(self, args):
        '''string key = HelpKey(string args)'''
        pass

    def Icon(self):
        '''string icon = Icon()'''
        pass

    def Manager(self):
        '''Unknown object = Manager()'''
        pass

    def SetBuffer(self, buffer, bufferLength):
        '''SetBuffer(string buffer,integer bufferLength)'''
        pass

    def SetDesc(self, desc):
        '''SetDesc(string desc)'''
        pass

    def SetUserName(self, userName):
        '''SetUserName(string userName)'''
        pass

    def UserName(self):
        '''string userName = UserName()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ScriptLineEvent:
    def Index(self):
        '''integer index = Index()'''
        pass

    def Script(self):
        '''Script object = Script()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ScriptManager:
    def ByIndex(self, index, write):
        '''Unknown object = ByIndex(integer index,integer write)'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def Flags(self):
        '''integer flags = Flags()'''
        pass

    def Lookup(self, hash, write, tryAsUserName):
        '''Unknown object = Lookup(string hash,integer write,integer tryAsUserName)'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def New(self, name):
        '''Unknown object = New(string name)'''
        pass

    def ReadWrite(self, hash, index):
        '''ReadWrite(string hash,integer index)'''
        pass

    def Remove(self, script):
        '''Remove(object script)'''
        pass

    def Run(self, script, execFlags, args, msg):
        '''Run(object script,integer execFlags,string args,object msg)'''
        pass

    def Validate(self, script, msg):
        '''Validate(object script,object msg)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ScriptQuery:
    def Query(self, attribute, query):
        '''Query(string attribute,object query)'''
        pass

    def Select(self, attribute, which):
        '''Select(string attribute,string which)'''
        pass

    def Type(self, attribute):
        '''integer type = Type(string attribute)'''
        pass

    def TypeName(self, attribute):
        '''string type = TypeName(string attribute)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SelectionListener:
    def Add(self, type, subtType):
        '''Add(integer type,integer subtType)'''
        pass

    def Current(self, type):
        '''Current(integer type)'''
        pass

    def Remove(self, type, subtType):
        '''Remove(integer type,integer subtType)'''
        pass

    def Time(self, time):
        '''Time(float time)'''
        pass

    def TimeRange(self, type):
        '''TimeRange(integer type)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SelectionOperation:
    def Evaluate(self, type, state):
        '''Evaluate(integer type,object state)'''
        pass

    def SetMesh(self, mesh):
        '''SetMesh(object mesh)'''
        pass

    def SetTransform(self):
        '''matrix xfrm = SetTransform()'''
        pass

    def TestEdge(self, edge):
        '''boolean = TestEdge(id edge)'''
        pass

    def TestPoint(self, point):
        '''boolean = TestPoint(id point)'''
        pass

    def TestPolygon(self, polygon):
        '''boolean = TestPolygon(id polygon)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SelectionState:
    def SetEdge(self, edge, state):
        '''SetEdge(id edge,integer state)'''
        pass

    def SetPoint(self, point, state):
        '''SetPoint(id point,integer state)'''
        pass

    def SetPolygon(self, polygon, state):
        '''SetPolygon(id polygon,integer state)'''
        pass

    def TestEdge(self, edge):
        '''boolean = TestEdge(id edge)'''
        pass

    def TestPoint(self, point):
        '''boolean = TestPoint(id point)'''
        pass

    def TestPolygon(self, polygon):
        '''boolean = TestPolygon(id polygon)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SelectionType:
    def Compare(self, pkey, pelt):
        '''integer = Compare(pointer pkey,pointer pelt)'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def MessageTable(self):
        '''string = MessageTable()'''
        pass

    def Size(self):
        '''integer = Size()'''
        pass

    def SubType(self, pkt):
        '''integer = SubType(pointer pkt)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SessionListener:
    def BeforeStartupCommands(self):
        '''BeforeStartupCommands()'''
        pass

    def CheckQuitUI(self, quitWasAborted):
        '''boolean = CheckQuitUI(integer quitWasAborted)'''
        pass

    def FirstWindowOpening(self):
        '''FirstWindowOpening()'''
        pass

    def LastWindowClosed(self):
        '''LastWindowClosed()'''
        pass

    def QuittingUI(self):
        '''QuittingUI()'''
        pass

    def ShuttingDown(self):
        '''ShuttingDown()'''
        pass

    def SystemReady(self):
        '''SystemReady()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Shader:
    def Enumerate(self, visitor):
        '''Enumerate(object visitor)'''
        pass

    def ShaderItemGet(self):
        '''Item object = ShaderItemGet()'''
        pass

    def Spawn(self):
        '''Shader object = Spawn()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ShaderDest:
    def Item(self):
        '''Unknown object = Item()'''
        pass

    def Location(self):
        '''integer = Location()'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ShaderPreDest:
    def ContainerItem(self):
        '''Item object = ContainerItem()'''
        pass

    def GetTag(self, type):
        '''string tag = GetTag(integer type)'''
        pass

    def HitItem(self):
        '''Item object = HitItem()'''
        pass

    def Item(self):
        '''(integer mode,Item object) = Item()'''
        pass

    def Mode(self):
        '''integer mode = Mode()'''
        pass

    def Scene(self):
        '''Scene object = Scene()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ShaderSlice:
    def Evaluate(self, vecstack):
        '''Evaluate(object vecstack)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ShapeDraw:
    def Arc(self, col, alpha, pos, rad, start, end, axis, flags):
        '''Arc(vector col,float alpha,vector pos,float rad,float start,float end,integer axis,integer flags)'''
        pass

    def Arrow(self, col, pos, size, axis, flags):
        '''Arrow(vector col,vector pos,float size,integer axis,integer flags)'''
        pass

    def Axis(self, col, pos, size, flags):
        '''Axis(vector col,vector pos,vector size,integer flags)'''
        pass

    def BBox(self, col, size, flags):
        '''BBox(vector col,float size,integer flags)'''
        pass

    def Bone(self, col, rlen, active):
        '''Bone(vector col,float rlen,integer active)'''
        pass

    def BoxShape(self, colW, colF, pos, size, flags):
        '''BoxShape(vector colW,vector colF,vector pos,vector size,integer flags)'''
        pass

    def CSeg(self, cen, offset, screen, col, flags):
        '''CSeg(vector cen,vector offset,float screen,vector col,integer flags)'''
        pass

    def Circle(self, col, alpha, pos, rad, axis, flags):
        '''Circle(vector col,float alpha,vector pos,float rad,integer axis,integer flags)'''
        pass

    def CircleShape(self, colW, colF, pos, radius, axis, flags):
        '''CircleShape(vector colW,vector colF,vector pos,float radius,integer axis,integer flags)'''
        pass

    def Cone(self, col, pos, rad, height, axis, flags):
        '''Cone(vector col,vector pos,float rad,float height,integer axis,integer flags)'''
        pass

    def ConeShape(self, colW, colF, pos, radius, height, axis, flags):
        '''ConeShape(vector colW,vector colF,vector pos,float radius,float height,integer axis,integer flags)'''
        pass

    def Cross(self, col, pos, rad, flags):
        '''Cross(vector col,vector pos,vector rad,integer flags)'''
        pass

    def CrossHair(self, col, alpha, pos, flags):
        '''CrossHair(vector col,float alpha,vector pos,integer flags)'''
        pass

    def Cube(self, col, pos, size, flags):
        '''Cube(vector col,vector pos,vector size,integer flags)'''
        pass

    def CubeFill(self, col, alpha, pos, size, flags):
        '''CubeFill(vector col,float alpha,vector pos,vector size,integer flags)'''
        pass

    def Cylinder(self, col, pos, rad, height, axis, flags):
        '''Cylinder(vector col,vector pos,float rad,float height,integer axis,integer flags)'''
        pass

    def CylinderShape(self, colW, colF, pos, radius, height, axis, flags):
        '''CylinderShape(vector colW,vector colF,vector pos,float radius,float height,integer axis,integer flags)'''
        pass

    def Dimension(self, col, A, B, format, top, flags):
        '''Dimension(vector col,vector A,vector B,string format,integer top,integer flags)'''
        pass

    def Distance(self, col, pos, dist, axis, flags):
        '''Distance(vector col,vector pos,float dist,integer axis,integer flags)'''
        pass

    def Ellipse(self, col, alpha, pos, rad, axis, flags):
        '''Ellipse(vector col,float alpha,vector pos,vector rad,integer axis,integer flags)'''
        pass

    def Ellipsoid(self, col, alpha, pos, rad, flags):
        '''Ellipsoid(vector col,float alpha,vector pos,vector rad,integer flags)'''
        pass

    def Grid(self, col, pos, siz, divX, divY, divZ, axis, flags):
        '''Grid(vector col,vector pos,vector siz,integer divX,integer divY,integer divZ,integer axis,integer flags)'''
        pass

    def Line(self, v0, v1, col, alpha, flags):
        '''Line(vector v0,vector v1,vector col,float alpha,integer flags)'''
        pass

    def Link(self, col, posS, posE, solid, flags):
        '''Link(vector col,vector posS,vector posE,integer solid,integer flags)'''
        pass

    def Pill(self, col, alpha, pos, width, height, rad, axis, flags):
        '''Pill(vector col,float alpha,vector pos,float width,float height,float rad,integer axis,integer flags)'''
        pass

    def Plane(self, col, pos, size, axis, flags):
        '''Plane(vector col,vector pos,vector size,integer axis,integer flags)'''
        pass

    def PlaneIndicator(self, col, alpha, pos, rad, axis, flags):
        '''PlaneIndicator(vector col,float alpha,vector pos,float rad,integer axis,integer flags)'''
        pass

    def PlaneShape(self, colW, colF, pos, size, axis, flags):
        '''PlaneShape(vector colW,vector colF,vector pos,vector size,integer axis,integer flags)'''
        pass

    def PreciseHandle(self, col, alpha, pos, size, flags):
        '''PreciseHandle(vector col,float alpha,vector pos,vector size,integer flags)'''
        pass

    def Pyramid(self, col, pos, size, axis, flags):
        '''Pyramid(vector col,vector pos,vector size,integer axis,integer flags)'''
        pass

    def PyramidShape(self, colW, colF, pos, size, axis, flags):
        '''PyramidShape(vector colW,vector colF,vector pos,vector size,integer axis,integer flags)'''
        pass

    def RadialMap(self, image, col, cen, size, sel, flags):
        '''RadialMap(object image,vector col,vector cen,float size,integer sel,integer flags)'''
        pass

    def RadialRays(self, image, col, cen, size, sel, flags):
        '''RadialRays(object image,vector col,vector cen,float size,integer sel,integer flags)'''
        pass

    def Rhombus(self, col, pos, size, axis, flags):
        '''Rhombus(vector col,vector pos,vector size,integer axis,integer flags)'''
        pass

    def RhombusShape(self, colW, colF, pos, size, axis, flags):
        '''RhombusShape(vector colW,vector colF,vector pos,vector size,integer axis,integer flags)'''
        pass

    def Ruler(self, col, pos, xfrm, len, axis, flags):
        '''Ruler(vector col,vector pos,matrix xfrm,float len,integer axis,integer flags)'''
        pass

    def SphereShape(self, colW, colF, pos, radius, axis, flags):
        '''SphereShape(vector colW,vector colF,vector pos,float radius,integer axis,integer flags)'''
        pass

    def Star(self, col, pos, rad, flags):
        '''Star(vector col,vector pos,vector rad,integer flags)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SharedWork:
    def Evaluate(self):
        '''Evaluate()'''
        pass

    def Share(self, other, split):
        '''Share(object other,integer split)'''
        pass

    def Spawn(self):
        '''SharedWork object = Spawn()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SimulationListener:
    def End(self):
        '''End()'''
        pass

    def Invalidate(self):
        '''Invalidate()'''
        pass

    def Start(self, channels):
        '''Start(object channels)'''
        pass

    def Time(self, time):
        '''Time(float time)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SimulationModifier:
    def Bake(self, time):
        '''Bake(float time)'''
        pass

    def Cleanup(self):
        '''Cleanup()'''
        pass

    def Enabled(self, chanRead):
        '''boolean = Enabled(object chanRead)'''
        pass

    def Initialize(self, time, sample):
        '''Initialize(float time,float sample)'''
        pass

    def Step(self, dt):
        '''Step(float dt)'''
        pass

    def StepSize(self):
        '''float stepSize = StepSize()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SolidDrill:
    def AddMesh(self, meshObj, xfrm):
        '''AddMesh(object meshObj,matrix xfrm)'''
        pass

    def Clear(self):
        '''Clear()'''
        pass

    def Execute(self, meshObj, xfrm, pick, mode, sten, monitor):
        '''Execute(object meshObj,matrix xfrm,integer pick,integer mode,string sten,object monitor)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class StackFilter:
    def Compare(self, other):
        '''integer = Compare(object other)'''
        pass

    def Convert(self, other):
        '''Convert(object other)'''
        pass

    def Identifier(self):
        '''string identifier = Identifier()'''
        pass

    def Type(self):
        '''string = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class StreamIO:
    def Read(self, stream):
        '''Read(object stream)'''
        pass

    def Write(self, stream):
        '''Write(object stream)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class StringConversion:
    def Decode(self, buf):
        '''Decode(string buf)'''
        pass

    def Encode(self):
        '''string = Encode()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class StringConversionNice:
    def Decode(self, buf):
        '''Decode(string buf)'''
        pass

    def Encode(self):
        '''string = Encode()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class StringTag:
    def ByIndex(self, index):
        '''(integer type,string tag) = ByIndex(integer index)'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def Get(self, type):
        '''string tag = Get(integer type)'''
        pass

    def Set(self, type, tag):
        '''Set(integer type,string tag)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class StrokeDraw:
    def Begin(self, type, color, alpha):
        '''Begin(integer type,vector color,float alpha)'''
        pass

    def BeginI(self, texture, type, color, alpha):
        '''BeginI(object texture,integer type,vector color,float alpha)'''
        pass

    def BeginPoints(self, size, color, alpha):
        '''BeginPoints(float size,vector color,float alpha)'''
        pass

    def BeginPolygons(self, type, color, alpha, stip, offsetX, offsetY, fill, cull):
        '''BeginPolygons(integer type,vector color,float alpha,float stip,float offsetX,float offsetY,integer fill,integer cull)'''
        pass

    def BeginW(self, type, color, alpha, width):
        '''BeginW(integer type,vector color,float alpha,float width)'''
        pass

    def BeginWD(self, type, color, alpha, width, dashPattern):
        '''BeginWD(integer type,vector color,float alpha,float width,integer dashPattern)'''
        pass

    def Image(self, texID, just):
        '''Image(integer texID,integer just)'''
        pass

    def PopTransform(self):
        '''PopTransform()'''
        pass

    def PushTransform(self, v, m):
        '''PushTransform(vector v,matrix m)'''
        pass

    def SetPart(self, part):
        '''SetPart(integer part)'''
        pass

    def Text(self, text, just):
        '''Text(string text,integer just)'''
        pass

    def TextureUV(self, u, v):
        '''TextureUV(float u,float v)'''
        pass

    def Vertex(self, pos, flags):
        '''Vertex(vector pos,integer flags)'''
        pass

    def Vertex3(self, x, y, z, flags):
        '''Vertex3(float x,float y,float z,integer flags)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Subdivision:
    def Adaptive(self):
        '''integer = Adaptive()'''
        pass

    def AddUVMap(self, name):
        '''integer = AddUVMap(string name)'''
        pass

    def Backend(self):
        '''integer = Backend()'''
        pass

    def BoundaryRule(self):
        '''integer = BoundaryRule()'''
        pass

    def ChildFace(self, faceIndex, vertOfFace):
        '''integer = ChildFace(integer faceIndex,integer vertOfFace)'''
        pass

    def FaceDepth(self, faceIndex):
        '''integer = FaceDepth(integer faceIndex)'''
        pass

    def FirstFaceOffset(self, level):
        '''integer = FirstFaceOffset(integer level)'''
        pass

    def FirstVertexOffset(self, level):
        '''integer = FirstVertexOffset(integer level)'''
        pass

    def GetUV(self, mapIndex, faceIndex, vertOfFace):
        '''float[] = GetUV(integer mapIndex,integer faceIndex,integer vertOfFace)'''
        pass

    def InvalidatePosition(self):
        '''InvalidatePosition()'''
        pass

    def InvalidateTopology(self):
        '''InvalidateTopology()'''
        pass

    def LookupUVMap(self, name):
        '''integer = LookupUVMap(string name)'''
        pass

    def MaxLevel(self):
        '''integer = MaxLevel()'''
        pass

    def NumFaces(self):
        '''integer = NumFaces()'''
        pass

    def NumLevelFaces(self, level):
        '''integer = NumLevelFaces(integer level)'''
        pass

    def NumLevelVertices(self, level):
        '''integer = NumLevelVertices(integer level)'''
        pass

    def NumUVMap(self):
        '''integer = NumUVMap()'''
        pass

    def NumVertices(self):
        '''integer = NumVertices()'''
        pass

    def NumVerticesOfFace(self, faceIndex):
        '''integer = NumVerticesOfFace(integer faceIndex)'''
        pass

    def ParentFace(self, faceIndex):
        '''integer = ParentFace(integer faceIndex)'''
        pass

    def ParentVertex(self, vertIndex):
        '''integer = ParentVertex(integer vertIndex)'''
        pass

    def Refine(self, mesh):
        '''Refine(object mesh)'''
        pass

    def Scheme(self):
        '''integer = Scheme()'''
        pass

    def SetAdaptive(self, adaptive):
        '''integer = SetAdaptive(integer adaptive)'''
        pass

    def SetBackend(self, backend):
        '''integer = SetBackend(integer backend)'''
        pass

    def SetBoundaryRule(self, bound):
        '''integer = SetBoundaryRule(integer bound)'''
        pass

    def SetMaxLevel(self, level):
        '''integer = SetMaxLevel(integer level)'''
        pass

    def SetScheme(self, scheme):
        '''integer = SetScheme(integer scheme)'''
        pass

    def SetUVBoundaryRule(self, bound):
        '''integer = SetUVBoundaryRule(integer bound)'''
        pass

    def Status(self):
        '''integer = Status()'''
        pass

    def UVBoundaryRule(self):
        '''integer = UVBoundaryRule()'''
        pass

    def UVMapName(self, mapIndex):
        '''string = UVMapName(integer mapIndex)'''
        pass

    def Validate(self, mesh):
        '''Validate(object mesh)'''
        pass

    def VertexNormal(self, vertIndex):
        '''float[] = VertexNormal(integer vertIndex)'''
        pass

    def VertexOfFace(self, faceIndex, vertofface):
        '''integer = VertexOfFace(integer faceIndex,integer vertofface)'''
        pass

    def VertexPosition(self, vertIndex):
        '''float[] = VertexPosition(integer vertIndex)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Subject2Packet:
    def ScanAllocate(self, flags):
        '''LayerScan object = ScanAllocate(integer flags)'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Surface:
    def BinByIndex(self, index):
        '''SurfaceBin object = BinByIndex(integer index)'''
        pass

    def BinCount(self):
        '''integer count = BinCount()'''
        pass

    def FrontBBox(self, pos, dir):
        '''bounds bbox = FrontBBox(vector pos,vector dir)'''
        pass

    def GLCount(self):
        '''integer count = GLCount()'''
        pass

    def GetBBox(self):
        '''bounds bbox = GetBBox()'''
        pass

    def TagByIndex(self, type, index):
        '''string stag = TagByIndex(integer type,integer index)'''
        pass

    def TagCount(self, type):
        '''integer count = TagCount(integer type)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SurfaceBin:
    def FrontBBox(self, pos, dir):
        '''bounds bbox = FrontBBox(vector pos,vector dir)'''
        pass

    def GetBBox(self):
        '''bounds bbox = GetBBox()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SurfaceItem:
    def Evaluate(self, attr, index):
        '''Surface object = Evaluate(object attr,integer index)'''
        pass

    def GetSurface(self, chanRead, morph):
        '''Surface object = GetSurface(object chanRead,integer morph)'''
        pass

    def Prepare(self, eval):
        '''integer index = Prepare(object eval)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class SymmetryPacket:
    def Active(self):
        '''integer = Active()'''
        pass

    def Axis(self):
        '''(integer,vector axvec,float offset) = Axis()'''
        pass

    def BaseSide(self):
        '''integer = BaseSide()'''
        pass

    def Position(self, pos):
        '''(integer,vector sv) = Position(vector pos)'''
        pass

    def SetBase(self, pos):
        '''SetBase(vector pos)'''
        pass

    def TestSide(self, pos, useBase):
        '''integer = TestSide(vector pos,integer useBase)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Tableau:
    def AddElement(self, element, shader):
        '''AddElement(object element,object shader)'''
        pass

    def AddInstance(self, inst, element, shader):
        '''AddInstance(object inst,object element,object shader)'''
        pass

    def AddInstanceItem(self, instItem, fromItem, inst, vdesc, vertex):
        '''AddInstanceItem(object instItem,object fromItem,object inst,object vdesc,float[] vertex)'''
        pass

    def AddInstanceableElement(self, elt, tags):
        '''AddInstanceableElement(object elt,object tags)'''
        pass

    def Channels(self, type):
        '''ChannelRead object = Channels(integer type)'''
        pass

    def EltNotify(self, element, event):
        '''EltNotify(object element,integer event)'''
        pass

    def FindShader(self, item, tags):
        '''TableauShader object = FindShader(object item,object tags)'''
        pass

    def InstNotify(self, instance, event):
        '''InstNotify(object instance,integer event)'''
        pass

    def InstanceItem(self):
        '''object = InstanceItem()'''
        pass

    def Time(self):
        '''(float t0,float interval) = Time()'''
        pass

    def Update(self, visitor, immediate):
        '''Update(object visitor,integer immediate)'''
        pass

    def UpdateAll(self):
        '''UpdateAll()'''
        pass

    def Visible(self, item):
        '''boolean = Visible(object item)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TableauElement:
    def Bound(self):
        '''bounds bbox = Bound()'''
        pass

    def FeatureByIndex(self, type, index):
        '''string name = FeatureByIndex(integer type,integer index)'''
        pass

    def FeatureCount(self, type):
        '''integer = FeatureCount(integer type)'''
        pass

    def SetVertex(self, vdesc):
        '''SetVertex(object vdesc)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TableauInstance:
    def GetDissolve(self):
        '''float dissolve = GetDissolve()'''
        pass

    def GetTransform(self, endPoint):
        '''(vector offset,matrix xfrm) = GetTransform(integer endPoint)'''
        pass

    def ParticleArray(self):
        '''float vector = ParticleArray()'''
        pass

    def ParticleDescription(self):
        '''Unknown object = ParticleDescription()'''
        pass

    def Properties(self, vecstack):
        '''Properties(object vecstack)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TableauLight:
    def Bound(self):
        '''bounds bbox = Bound()'''
        pass

    def FeatureByIndex(self, type, index):
        '''string name = FeatureByIndex(integer type,integer index)'''
        pass

    def FeatureCount(self, type):
        '''integer = FeatureCount(integer type)'''
        pass

    def Geometry(self, gc):
        '''integer = Geometry(pointer gc)'''
        pass

    def Sample(self, u, v, dir, t):
        '''(vector wPos,vector oPos,vector norm) = Sample(float u,float v,vector dir,float t)'''
        pass

    def SetVertex(self, vdesc):
        '''SetVertex(object vdesc)'''
        pass

    def ShadowMap(self):
        '''(integer,Unknown object) = ShadowMap()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TableauProxy:
    def Bound(self):
        '''bounds bbox = Bound()'''
        pass

    def FeatureByIndex(self, type, index):
        '''string name = FeatureByIndex(integer type,integer index)'''
        pass

    def FeatureCount(self, type):
        '''integer = FeatureCount(integer type)'''
        pass

    def Sample(self, bbox, tableau):
        '''Sample(bounds bbox,object tableau)'''
        pass

    def SetVertex(self, vdesc):
        '''SetVertex(object vdesc)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TableauShader:
    def Select(self, teElt, tvDesc):
        '''Select(object teElt,object tvDesc)'''
        pass

    def Slice(self, vtOutput, tvDesc):
        '''ShaderSlice object = Slice(object vtOutput,object tvDesc)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TableauSource:
    def ElementType(self, type):
        '''integer supported = ElementType(integer type)'''
        pass

    def Elements(self, tableau):
        '''Elements(object tableau)'''
        pass

    def GetCurves(self, tableau, tags):
        '''Unknown object = GetCurves(object tableau,object tags)'''
        pass

    def Instance(self, tableau, instance):
        '''Instance(object tableau,object instance)'''
        pass

    def Preview(self, tableau):
        '''Preview(object tableau)'''
        pass

    def PreviewUpdate(self, chanIndex):
        '''integer update = PreviewUpdate(integer chanIndex)'''
        pass

    def SubShader(self, tableau):
        '''Unknown object = SubShader(object tableau)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TableauSurface:
    def Bound(self):
        '''bounds bbox = Bound()'''
        pass

    def FeatureByIndex(self, type, index):
        '''string name = FeatureByIndex(integer type,integer index)'''
        pass

    def FeatureCount(self, type):
        '''integer = FeatureCount(integer type)'''
        pass

    def Padding(self):
        '''float dist = Padding()'''
        pass

    def Sample(self, bbox, scale, trisoup):
        '''Sample(bounds bbox,float scale,object trisoup)'''
        pass

    def SegmentBox(self, segID):
        '''bounds bbox = SegmentBox(integer segID)'''
        pass

    def SetVertex(self, vdesc):
        '''SetVertex(object vdesc)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TableauVertex:
    def AddFeature(self, type, name):
        '''integer index = AddFeature(integer type,string name)'''
        pass

    def ByIndex(self, index):
        '''(integer type,string name,integer offset) = ByIndex(integer index)'''
        pass

    def Count(self):
        '''integer = Count()'''
        pass

    def Lookup(self, type, name):
        '''integer offset = Lookup(integer type,string name)'''
        pass

    def Size(self):
        '''integer = Size()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TableauVolume:
    def Bound(self):
        '''bounds bbox = Bound()'''
        pass

    def Density(self, densitySlice, sv, raycastObj, pos, worldPos):
        '''float dens = Density(object densitySlice,object sv,object raycastObj,vector pos,integer worldPos)'''
        pass

    def FeatureByIndex(self, type, index):
        '''string name = FeatureByIndex(integer type,integer index)'''
        pass

    def FeatureCount(self, type):
        '''integer = FeatureCount(integer type)'''
        pass

    def RayCast(self, densitySlice, sv, raycastObj):
        '''(float dist,integer localShader) = RayCast(object densitySlice,object sv,object raycastObj)'''
        pass

    def RaySample(self, densitySlice, shadingSlice, sv, raycastObj, raymarchObj):
        '''RaySample(object densitySlice,object shadingSlice,object sv,object raycastObj,object raymarchObj)'''
        pass

    def RenderInit(self, sv):
        '''RenderInit(object sv)'''
        pass

    def SetVertex(self, vdesc):
        '''SetVertex(object vdesc)'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TagDescription:
    def Count(self):
        '''integer = Count()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TextEncoding:
    def Convert(self, src, buf, max):
        '''Convert(string src,byte[] buf,integer max)'''
        pass

    def Default(self):
        '''integer = Default()'''
        pass

    def NumChar(self, string, target):
        '''integer = NumChar(string string,integer target)'''
        pass

    def PullChar(self, string, target):
        '''(string,integer code,integer len) = PullChar(string string,integer target)'''
        pass

    def SetSource(self, encoding):
        '''SetSource(integer encoding)'''
        pass

    def SetTarget(self, encoding):
        '''SetTarget(integer encoding)'''
        pass

    def Source(self):
        '''integer = Source()'''
        pass

    def Target(self):
        '''integer = Target()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TextScriptInterpreter:
    def Run(self, script, execFlags, args, msg):
        '''Run(object script,integer execFlags,string args,object msg)'''
        pass

    def Validate(self, script, msg):
        '''boolean = Validate(object script,object msg)'''
        pass

    def ValidateFileType(self, script, firstLine):
        '''boolean = ValidateFileType(object script,string firstLine)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Texture:
    def Effect(self):
        '''string = Effect()'''
        pass

    def EvalImage(self, scene):
        '''Image object = EvalImage(object scene)'''
        pass

    def Image(self):
        '''Item object = Image()'''
        pass

    def ImageName(self):
        '''string = ImageName()'''
        pass

    def Locator(self):
        '''Item object = Locator()'''
        pass

    def LocatorProjectionAxis(self, time):
        '''integer = LocatorProjectionAxis(float time)'''
        pass

    def LocatorProjectionMode(self, time):
        '''integer = LocatorProjectionMode(float time)'''
        pass

    def SetEffect(self, effect):
        '''SetEffect(string effect)'''
        pass

    def SetImage(self, img):
        '''SetImage(object img)'''
        pass

    def SetLocator(self, tloc):
        '''SetLocator(object tloc)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TextureEffect:
    def Get(self, sv, item):
        '''float val = Get(object sv,pointer item)'''
        pass

    def Set(self, sv, val, item):
        '''Set(object sv,float[] val,pointer item)'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def TypeName(self):
        '''string = TypeName()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TexturePacket:
    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ThreadGroup:
    def AddJob(self, job):
        '''AddJob(object job)'''
        pass

    def Clear(self):
        '''Clear()'''
        pass

    def Execute(self):
        '''Execute()'''
        pass

    def Kill(self):
        '''Kill()'''
        pass

    def NumJobs(self):
        '''integer = NumJobs()'''
        pass

    def Running(self):
        '''boolean = Running()'''
        pass

    def Wait(self):
        '''Wait()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ThreadJob:
    def Execute(self):
        '''Execute()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ThreadMutex:
    def Enter(self):
        '''Enter()'''
        pass

    def Leave(self):
        '''Leave()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ThreadRangeWorker:
    def Execute(self, index, sharedData):
        '''Execute(integer index,pointer sharedData)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ThreadSlot:
    def Clear(self):
        '''Clear()'''
        pass

    def Set(self, value):
        '''Set(pointer value)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ThreadSlotClient:
    def Free(self, value):
        '''Free(pointer value)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TileImage:
    def DeterminePixel(self, level, x, y):
        '''(integer adjX,integer adjY) = DeterminePixel(integer level,integer x,integer y)'''
        pass

    def DetermineTile(self, level, x, y):
        '''(integer tileX,integer tileY) = DetermineTile(integer level,integer x,integer y)'''
        pass

    def GetLevelSize(self, level):
        '''(integer width,integer height,integer tilesWidth,integer tilesHeight) = GetLevelSize(integer level)'''
        pass

    def GetTile(self, level, tileX, tileY):
        '''Image object = GetTile(integer level,integer tileX,integer tileY)'''
        pass

    def GetTileSize(self, level, tileX, tileY):
        '''(integer width,integer height) = GetTileSize(integer level,integer tileX,integer tileY)'''
        pass

    def LevelCount(self):
        '''integer = LevelCount()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Tool:
    def CompareOp(self, vts, toolop):
        '''integer = CompareOp(object vts,object toolop)'''
        pass

    def Evaluate(self, vts):
        '''Evaluate(object vts)'''
        pass

    def GetOp(self, flags):
        '''Unknown object = GetOp(integer flags)'''
        pass

    def Order(self):
        '''string = Order()'''
        pass

    def Reset(self):
        '''Reset()'''
        pass

    def Sequence(self, seq):
        '''Sequence(object seq)'''
        pass

    def ShouldBeAttribute(self, task):
        '''integer = ShouldBeAttribute(integer task)'''
        pass

    def Task(self):
        '''integer = Task()'''
        pass

    def UpdateOp(self, toolop):
        '''UpdateOp(object toolop)'''
        pass

    def VectorType(self):
        '''object = VectorType()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ToolModel:
    def Down(self, vts, adjust):
        '''Down(object vts,object adjust)'''
        pass

    def Draw(self, vts, stroke, flags):
        '''Draw(object vts,object stroke,integer flags)'''
        pass

    def Drop(self):
        '''Drop()'''
        pass

    def Enable(self, msg):
        '''Enable(object msg)'''
        pass

    def Filter(self, vts, adjust):
        '''Filter(object vts,object adjust)'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def Haul(self, index):
        '''string = Haul(integer index)'''
        pass

    def Help(self, vts):
        '''string = Help(object vts)'''
        pass

    def Initialize(self, vts, adjust, flags):
        '''Initialize(object vts,object adjust,integer flags)'''
        pass

    def Move(self, vts, adjust):
        '''Move(object vts,object adjust)'''
        pass

    def Post(self, vts):
        '''Post(object vts)'''
        pass

    def Test(self, vts, stroke, flags):
        '''Test(object vts,object stroke,integer flags)'''
        pass

    def TestType(self, type):
        '''TestType(integer type)'''
        pass

    def Tooltip(self, vts, part):
        '''string = Tooltip(object vts,integer part)'''
        pass

    def Track(self, vts, eventType):
        '''Track(object vts,integer eventType)'''
        pass

    def TrackFlags(self):
        '''integer flags = TrackFlags()'''
        pass

    def Up(self, vts, adjust):
        '''Up(object vts,object adjust)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ToolOperation:
    def Blend(self, other, blend):
        '''Blend(object other,object blend)'''
        pass

    def Evaluate(self, vts):
        '''Evaluate(object vts)'''
        pass

    def ReEvaluate(self, vts):
        '''ReEvaluate(object vts)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TransformScan:
    def AlternateAxis(self):
        '''(matrix matrix,matrix inverse) = AlternateAxis()'''
        pass

    def AlternateCenter(self):
        '''vector center = AlternateCenter()'''
        pass

    def Enumerate(self, visitor):
        '''Enumerate(object visitor)'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def Position(self):
        '''float[] = Position()'''
        pass

    def SetPosition(self):
        '''vector pos = SetPosition()'''
        pass

    def Weight(self):
        '''float = Weight()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Tree:
    def ChildIsLeaf(self):
        '''boolean = ChildIsLeaf()'''
        pass

    def Count(self):
        '''integer count = Count()'''
        pass

    def Current(self):
        '''integer index = Current()'''
        pass

    def IsRoot(self):
        '''boolean = IsRoot()'''
        pass

    def ItemState(self, guid):
        '''integer state = ItemState(string guid)'''
        pass

    def SetCurrent(self, index):
        '''SetCurrent(integer index)'''
        pass

    def SetItemState(self, guid, state):
        '''SetItemState(string guid,integer state)'''
        pass

    def Spawn(self, mode):
        '''Tree object = Spawn(integer mode)'''
        pass

    def ToChild(self):
        '''ToChild()'''
        pass

    def ToParent(self):
        '''ToParent()'''
        pass

    def ToRoot(self):
        '''ToRoot()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TreeListener:
    def ClearAllCachedThumbnails(self):
        '''ClearAllCachedThumbnails()'''
        pass

    def ClearCachedThumbnail(self, ident):
        '''ClearCachedThumbnail(string ident)'''
        pass

    def NewAttributes(self):
        '''NewAttributes()'''
        pass

    def NewShape(self):
        '''NewShape()'''
        pass

    def NewShowDescriptionText(self):
        '''NewShowDescriptionText()'''
        pass

    def NewSpaceForThumbnails(self):
        '''NewSpaceForThumbnails()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TreeView:
    def BadgeDetail(self, columnIndex, badgeIndex, badgeDetail):
        '''string = BadgeDetail(integer columnIndex,integer badgeIndex,integer badgeDetail)'''
        pass

    def BadgeType(self, columnIndex, badgeIndex):
        '''integer badgeType = BadgeType(integer columnIndex,integer badgeIndex)'''
        pass

    def BadgeType2(self, columnIndex, badgeIndex):
        '''integer badgeType = BadgeType2(integer columnIndex,integer badgeIndex)'''
        pass

    def BatchCommand(self, columnIndex):
        '''string = BatchCommand(integer columnIndex)'''
        pass

    def CanFilter(self):
        '''boolean = CanFilter()'''
        pass

    def CellCommand(self, columnIndex):
        '''string = CellCommand(integer columnIndex)'''
        pass

    def ColumnByIndex(self, columnIndex):
        '''(string,integer columnWidth) = ColumnByIndex(integer columnIndex)'''
        pass

    def ColumnCount(self):
        '''integer colCount = ColumnCount()'''
        pass

    def ColumnIconResource(self, columnIndex):
        '''string = ColumnIconResource(integer columnIndex)'''
        pass

    def ColumnInternalName(self, columnIndex):
        '''string = ColumnInternalName(integer columnIndex)'''
        pass

    def ColumnJustification(self, columnIndex):
        '''integer justification = ColumnJustification(integer columnIndex)'''
        pass

    def DescriptionText(self, columnIndex):
        '''string = DescriptionText(integer columnIndex)'''
        pass

    def Filter(self):
        '''integer flags = Filter()'''
        pass

    def GetDragDropDestinationObject(self, columnIndex, location):
        '''Unknown object = GetDragDropDestinationObject(integer columnIndex,integer location)'''
        pass

    def GetDragDropSourceObject(self, columnIndex, type):
        '''Unknown object = GetDragDropSourceObject(integer columnIndex,string type)'''
        pass

    def IconResource(self, columnIndex, width, height):
        '''string = IconResource(integer columnIndex,integer width,integer height)'''
        pass

    def IsDescendantSelected(self):
        '''boolean = IsDescendantSelected()'''
        pass

    def IsInputRegion(self, columnIndex, regionID):
        '''boolean = IsInputRegion(integer columnIndex,integer regionID)'''
        pass

    def IsSelected(self):
        '''boolean = IsSelected()'''
        pass

    def PrimaryColumnPosition(self):
        '''integer index = PrimaryColumnPosition()'''
        pass

    def ReservedSpaceForIcons(self):
        '''(integer columnIndex,integer width,integer height,integer iconAsValue) = ReservedSpaceForIcons()'''
        pass

    def ReservedSpaceForThumbnails(self):
        '''(integer columnIndex,integer width,integer height) = ReservedSpaceForThumbnails()'''
        pass

    def RestoreState(self, uid):
        '''RestoreState(string uid)'''
        pass

    def Select(self, mode):
        '''Select(integer mode)'''
        pass

    def ShowDescriptionText(self):
        '''ShowDescriptionText()'''
        pass

    def StoreState(self, uid):
        '''StoreState(string uid)'''
        pass

    def StyleHints(self):
        '''integer flags = StyleHints()'''
        pass

    def SupportedDragDropSourceTypes(self, columnIndex):
        '''string = SupportedDragDropSourceTypes(integer columnIndex)'''
        pass

    def Thumbnail(self, columnIndex, width, height):
        '''(Image object,string) = Thumbnail(integer columnIndex,integer width,integer height)'''
        pass

    def ToPrimary(self):
        '''boolean = ToPrimary()'''
        pass

    def ToolTip(self, columnIndex):
        '''string = ToolTip(integer columnIndex)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TriangleGroup:
    def AddSurface(self):
        '''TriangleSurface object = AddSurface()'''
        pass

    def Cleanup(self):
        '''Cleanup()'''
        pass

    def GetSurface(self, index):
        '''TriangleSurface object = GetSurface(integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TriangleSoup:
    def Connect(self, type):
        '''Connect(integer type)'''
        pass

    def Polygon(self, v0, v1, v2):
        '''Polygon(integer v0,integer v1,integer v2)'''
        pass

    def Segment(self, segID, type):
        '''Segment(integer segID,integer type)'''
        pass

    def TestBox(self, bbox):
        '''integer = TestBox(bounds bbox)'''
        pass

    def Vertex(self, vertex):
        '''integer index = Vertex(float[] vertex)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class TriangleSurface:
    def AddVector(self, type, name):
        '''integer index = AddVector(integer type,string name)'''
        pass

    def FixNormals(self):
        '''unsigned[] = FixNormals()'''
        pass

    def GetSize(self):
        '''(integer nvrt,integer ntri) = GetSize()'''
        pass

    def SetEdge(self, edge):
        '''unsigned[] = SetEdge(integer edge)'''
        pass

    def SetEdgeCount(self, nedge):
        '''SetEdgeCount(integer nedge)'''
        pass

    def SetSize(self, nvrt, ntri):
        '''SetSize(integer nvrt,integer ntri)'''
        pass

    def SetTriangle(self, tri):
        '''unsigned[] = SetTriangle(integer tri)'''
        pass

    def SetVector(self, index, vrt):
        '''float[] = SetVector(integer index,integer vrt)'''
        pass

    def Triangles(self):
        '''unsigned[] = Triangles()'''
        pass

    def Vector(self, index):
        '''float[] = Vector(integer index)'''
        pass

    def VectorInfo(self, index):
        '''(integer type,string name,integer dim) = VectorInfo(integer index)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class UIHints:
    def BooleanStyle(self, style):
        '''BooleanStyle(integer style)'''
        pass

    def ButtonHasPopoverDecoration(self, state):
        '''ButtonHasPopoverDecoration(integer state)'''
        pass

    def ChannelFlags(self, flags):
        '''ChannelFlags(integer flags)'''
        pass

    def Class(self, c):
        '''Class(string c)'''
        pass

    def ClipChoiceSupportsGroups(self, flags):
        '''ClipChoiceSupportsGroups(integer flags)'''
        pass

    def ForceUpdate(self):
        '''ForceUpdate()'''
        pass

    def FormFilterPriority(self, priority):
        '''FormFilterPriority(integer priority)'''
        pass

    def InfoTextUseSmallFont(self, state):
        '''InfoTextUseSmallFont(integer state)'''
        pass

    def Label(self, label):
        '''Label(string label)'''
        pass

    def MaxFloat(self, max):
        '''MaxFloat(float max)'''
        pass

    def MaxInt(self, max):
        '''MaxInt(integer max)'''
        pass

    def MinFloat(self, min):
        '''MinFloat(float min)'''
        pass

    def MinInt(self, min):
        '''MinInt(integer min)'''
        pass

    def StepFloat(self, step):
        '''StepFloat(float step)'''
        pass

    def StepInt(self, step):
        '''StepInt(integer step)'''
        pass

    def StringList(self):
        '''string strings = StringList()'''
        pass

    def TextFixedWidthFont(self, state):
        '''TextFixedWidthFont(integer state)'''
        pass

    def TextLines(self, lines):
        '''TextLines(integer lines)'''
        pass

    def TextPasswordMode(self, state):
        '''TextPasswordMode(integer state)'''
        pass

    def Track(self, state):
        '''Track(integer state)'''
        pass

    def ValuePresetCookie(self, cookie):
        '''ValuePresetCookie(string cookie)'''
        pass

    def VertmapAllowNone(self, state):
        '''VertmapAllowNone(integer state)'''
        pass

    def VertmapItemMode(self, state):
        '''VertmapItemMode(integer state)'''
        pass

    def VertmapType(self, type):
        '''VertmapType(integer type)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class UIHintsRead:
    def BooleanStyle(self):
        '''integer style = BooleanStyle()'''
        pass

    def ButtonHasPopoverDecoration(self):
        '''integer state = ButtonHasPopoverDecoration()'''
        pass

    def ChannelFlags(self):
        '''integer flags = ChannelFlags()'''
        pass

    def Class(self):
        '''string = Class()'''
        pass

    def ClipChoiceSupportsGroups(self):
        '''integer flags = ClipChoiceSupportsGroups()'''
        pass

    def ForceUpdate(self):
        '''integer state = ForceUpdate()'''
        pass

    def FormFilterPriority(self):
        '''integer priority = FormFilterPriority()'''
        pass

    def InfoTextUseSmallFont(self):
        '''integer state = InfoTextUseSmallFont()'''
        pass

    def Label(self):
        '''string = Label()'''
        pass

    def MaxFloat(self):
        '''float max = MaxFloat()'''
        pass

    def MaxInt(self):
        '''integer max = MaxInt()'''
        pass

    def MinFloat(self):
        '''float min = MinFloat()'''
        pass

    def MinInt(self):
        '''integer min = MinInt()'''
        pass

    def StepFloat(self):
        '''float step = StepFloat()'''
        pass

    def StepInt(self):
        '''integer step = StepInt()'''
        pass

    def StringListByIndex(self, index):
        '''string = StringListByIndex(integer index)'''
        pass

    def StringListCount(self):
        '''integer count = StringListCount()'''
        pass

    def TextFixedWidthFont(self):
        '''integer state = TextFixedWidthFont()'''
        pass

    def TextLines(self):
        '''integer lines = TextLines()'''
        pass

    def TextPasswordMode(self):
        '''integer state = TextPasswordMode()'''
        pass

    def Track(self):
        '''integer state = Track()'''
        pass

    def ValuePresetCookie(self):
        '''string = ValuePresetCookie()'''
        pass

    def VertmapAllowNone(self):
        '''integer state = VertmapAllowNone()'''
        pass

    def VertmapItemMode(self):
        '''integer state = VertmapItemMode()'''
        pass

    def VertmapType(self):
        '''integer type = VertmapType()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class UIValueHints:
    def ColorPickerCommands(self, rgb, alpha, rgbAlt, alphaAlt, useAlt, bufLens):
        '''ColorPickerCommands(byte[] rgb,byte[] alpha,byte[] rgbAlt,byte[] alphaAlt,byte[] useAlt,integer bufLens)'''
        pass

    def CueText(self):
        '''string = CueText()'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def FormCommandListByIndex(self, index):
        '''string command = FormCommandListByIndex(integer index)'''
        pass

    def FormCommandListCount(self):
        '''integer count = FormCommandListCount()'''
        pass

    def ItemTest(self, item):
        '''boolean = ItemTest(object item)'''
        pass

    def NotifierByIndex(self, index):
        '''(string name,string args) = NotifierByIndex(integer index)'''
        pass

    def NotifierCount(self):
        '''integer count = NotifierCount()'''
        pass

    def PopCategory(self):
        '''string category = PopCategory()'''
        pass

    def PopCount(self):
        '''integer = PopCount()'''
        pass

    def PopFlags(self, index):
        '''integer flags = PopFlags(integer index)'''
        pass

    def PopIconImage(self, index):
        '''Image object = PopIconImage(integer index)'''
        pass

    def PopIconResource(self, index):
        '''string iconResource = PopIconResource(integer index)'''
        pass

    def PopIconSize(self):
        '''(integer,integer w,integer h) = PopIconSize()'''
        pass

    def PopInternalName(self, index):
        '''string = PopInternalName(integer index)'''
        pass

    def PopToolTip(self, index):
        '''string = PopToolTip(integer index)'''
        pass

    def PopUserName(self, index):
        '''string = PopUserName(integer index)'''
        pass

    def TextValidate(self, value):
        '''string = TextValidate(string value)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Undo:
    def Forward(self):
        '''Forward()'''
        pass

    def Reverse(self):
        '''Reverse()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Unknown:
    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class UserValue:
    def Action(self):
        '''string action = Action()'''
        pass

    def ArgType(self):
        '''string argType = ArgType()'''
        pass

    def AsUI(self):
        '''boolean = AsUI()'''
        pass

    def DefaultValue(self):
        '''Unknown object = DefaultValue()'''
        pass

    def DeferAction(self):
        '''boolean = DeferAction()'''
        pass

    def DialogUserName(self):
        '''string username = DialogUserName()'''
        pass

    def EnableCommand(self):
        '''string command = EnableCommand()'''
        pass

    def FloatRange(self):
        '''(integer hasMin,float min,integer hasMax,float max) = FloatRange()'''
        pass

    def GetFlt(self):
        '''float val = GetFlt()'''
        pass

    def GetInt(self):
        '''integer val = GetInt()'''
        pass

    def GetString(self):
        '''string = GetString()'''
        pass

    def IntRange(self):
        '''(integer hasMin,integer min,integer hasMax,integer max) = IntRange()'''
        pass

    def InvertEnableCommandTest(self):
        '''boolean = InvertEnableCommandTest()'''
        pass

    def IsTransient(self):
        '''(boolean,integer isTransient) = IsTransient()'''
        pass

    def Lifespan(self):
        '''integer life = Lifespan()'''
        pass

    def List(self):
        '''string list = List()'''
        pass

    def ListNames(self):
        '''string listNames = ListNames()'''
        pass

    def Name(self):
        '''string name = Name()'''
        pass

    def Notifier(self):
        '''string notifier = Notifier()'''
        pass

    def Type(self):
        '''integer type = Type()'''
        pass

    def TypeName(self):
        '''string tname = TypeName()'''
        pass

    def UIMode(self):
        '''integer uiMode = UIMode()'''
        pass

    def UserName(self):
        '''string username = UserName()'''
        pass

    def ValuePresetCookie(self):
        '''string cookie = ValuePresetCookie()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class UserValueListener:
    def Added(self, userValue):
        '''Added(object userValue)'''
        pass

    def DefChanged(self, userValue):
        '''DefChanged(object userValue)'''
        pass

    def Deleted(self, name):
        '''Deleted(string name)'''
        pass

    def ValueChanged(self, userValue):
        '''ValueChanged(object userValue)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VMapPacketTranslation:
    def Name(self, packet):
        '''string name = Name(pointer packet)'''
        pass

    def Packet(self, type, name):
        '''pointer = Packet(integer type,string name)'''
        pass

    def Type(self, packet):
        '''integer type = Type(pointer packet)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Value:
    def Clone(self):
        '''Value object = Clone()'''
        pass

    def Compare(self, other):
        '''integer diff = Compare(object other)'''
        pass

    def Copy(self, from_obj):
        '''Copy(object from_obj)'''
        pass

    def GetFlt(self):
        '''float val = GetFlt()'''
        pass

    def GetInt(self):
        '''integer val = GetInt()'''
        pass

    def GetString(self):
        '''string = GetString()'''
        pass

    def Intrinsic(self):
        '''pointer = Intrinsic()'''
        pass

    def SetFlt(self, val):
        '''SetFlt(float val)'''
        pass

    def SetInt(self, val):
        '''SetInt(integer val)'''
        pass

    def SetString(self, val):
        '''SetString(string val)'''
        pass

    def SubTypeName(self):
        '''string name = SubTypeName()'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def TypeName(self):
        '''string name = TypeName()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ValueArray:
    def AddEmptyValue(self):
        '''Value object = AddEmptyValue()'''
        pass

    def AddFloat(self, value):
        '''AddFloat(float value)'''
        pass

    def AddInt(self, value):
        '''AddInt(integer value)'''
        pass

    def AddString(self, value):
        '''AddString(string value)'''
        pass

    def AddValue(self, value):
        '''AddValue(object value)'''
        pass

    def Count(self):
        '''integer = Count()'''
        pass

    def FirstUnique(self):
        '''integer uniqueIndex = FirstUnique()'''
        pass

    def GetFloat(self, index):
        '''float value = GetFloat(integer index)'''
        pass

    def GetInt(self, index):
        '''integer value = GetInt(integer index)'''
        pass

    def GetString(self, index):
        '''string = GetString(integer index)'''
        pass

    def GetValue(self, index):
        '''Value object = GetValue(integer index)'''
        pass

    def Remove(self, index):
        '''Remove(integer index)'''
        pass

    def Reset(self):
        '''Reset()'''
        pass

    def SetFloat(self, index, value):
        '''SetFloat(integer index,float value)'''
        pass

    def SetInt(self, index, value):
        '''SetInt(integer index,integer value)'''
        pass

    def SetString(self, index, value):
        '''SetString(integer index,string value)'''
        pass

    def SetValue(self, index, value):
        '''SetValue(integer index,object value)'''
        pass

    def Type(self):
        '''integer type = Type()'''
        pass

    def TypeName(self):
        '''string name = TypeName()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ValueConversion:
    def Convert(self, from_obj, fromType, to_obj, toType):
        '''Convert(object from_obj,string fromType,object to_obj,string toType)'''
        pass

    def Test(self, fromType, toType):
        '''Test(string fromType,string toType)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ValueMath:
    def Add(self, delta):
        '''Add(float delta)'''
        pass

    def Blend(self, other, blend):
        '''Blend(object other,float blend)'''
        pass

    def Detent(self):
        '''integer = Detent()'''
        pass

    def Multiply(self, factor):
        '''Multiply(float factor)'''
        pass

    def Step(self, direction):
        '''Step(integer direction)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ValueReference:
    def GetObject(self):
        '''Unknown object = GetObject()'''
        pass

    def IsSet(self):
        '''boolean = IsSet()'''
        pass

    def SetObject(self, obj):
        '''SetObject(object obj)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ValueTexture:
    def Cleanup(self, data):
        '''Cleanup(pointer data)'''
        pass

    def IsSampleDriven(self):
        '''(integer,integer idx) = IsSampleDriven()'''
        pass

    def LinkChannels(self, eval, item):
        '''LinkChannels(object eval,object item)'''
        pass

    def LinkSampleChannels(self, nodalEtor, item):
        '''integer idx = LinkSampleChannels(object nodalEtor,object item)'''
        pass

    def Setup(self, data):
        '''Setup(pointer data)'''
        pass

    def SetupChannels(self, addChan):
        '''SetupChannels(object addChan)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ValueTextureCustom:
    def AddFeature(self, type, name):
        '''AddFeature(integer type,string name)'''
        pass

    def AddPacket(self, name):
        '''AddPacket(string name)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Variation:
    def Do(self, x, y):
        '''Do(float x,float y)'''
        pass

    def Initialize(self, item, chanRead):
        '''(float x,float y) = Initialize(object item,object chanRead)'''
        pass

    def RangeX(self):
        '''(float min,float max) = RangeX()'''
        pass

    def RangeY(self):
        '''(float min,float max) = RangeY()'''
        pass

    def TestItem(self, item, chanRead):
        '''boolean = TestItem(object item,object chanRead)'''
        pass

    def Thumb(self, x, y, size, chanRead):
        '''Unknown object = Thumb(float x,float y,integer size,object chanRead)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VectorCanvas:
    def BeginEditBatch(self):
        '''BeginEditBatch()'''
        pass

    def EndEditBatch(self):
        '''EndEditBatch()'''
        pass

    def GetItem(self):
        '''Item object = GetItem()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VectorKnotPacketTranslation:
    def Canvas(self, packet):
        '''VectorCanvas object = Canvas(pointer packet)'''
        pass

    def Item(self, packet):
        '''Item object = Item(pointer packet)'''
        pass

    def Path(self, packet):
        '''VectorPath object = Path(pointer packet)'''
        pass

    def Shape(self, packet):
        '''VectorShape object = Shape(pointer packet)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VectorList:
    def Append(self):
        '''integer index = Append()'''
        pass

    def Clear(self):
        '''Clear()'''
        pass

    def Count(self):
        '''integer = Count()'''
        pass

    def Current(self):
        '''integer = Current()'''
        pass

    def Optional(self, offset):
        '''pointer = Optional(integer offset)'''
        pass

    def SetCurrent(self, index):
        '''SetCurrent(integer index)'''
        pass

    def SetPacket(self, offset, pdat):
        '''SetPacket(integer offset,pointer pdat)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VectorListener:
    def Destroy(self):
        '''Destroy()'''
        pass

    def KnotPosition(self, shape, path):
        '''KnotPosition(object shape,object path)'''
        pass

    def PathAdd(self, shape, path):
        '''PathAdd(object shape,object path)'''
        pass

    def PathRemove(self, shape, path):
        '''PathRemove(object shape,object path)'''
        pass

    def ShapeAdd(self, shape):
        '''ShapeAdd(object shape)'''
        pass

    def ShapeRemove(self, shape):
        '''ShapeRemove(object shape)'''
        pass

    def ShapeStyle(self, shape, name):
        '''ShapeStyle(object shape,string name)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VectorPath:
    def ID(self):
        '''id = ID()'''
        pass

    def IsPathClosed(self):
        '''boolean = IsPathClosed()'''
        pass

    def KnotCount(self):
        '''integer count = KnotCount()'''
        pass

    def KnotEnumerate(self, visitor):
        '''KnotEnumerate(object visitor)'''
        pass

    def Pos(self):
        '''(float x,float y) = Pos()'''
        pass

    def SelectKnot(self, knot):
        '''SelectKnot(id knot)'''
        pass

    def SelectKnotByIndex(self, index):
        '''SelectKnotByIndex(integer index)'''
        pass

    def SetPathClosed(self, closed):
        '''SetPathClosed(integer closed)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VectorPathPacketTranslation:
    def Canvas(self, packet):
        '''VectorCanvas object = Canvas(pointer packet)'''
        pass

    def Item(self, packet):
        '''Item object = Item(pointer packet)'''
        pass

    def Packet(self, path):
        '''pointer = Packet(object path)'''
        pass

    def Path(self, packet):
        '''VectorPath object = Path(pointer packet)'''
        pass

    def Shape(self, packet):
        '''VectorShape object = Shape(pointer packet)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VectorShape:
    def Parent(self):
        '''VectorShape object = Parent()'''
        pass

    def PathByIndex(self, index):
        '''VectorPath object = PathByIndex(integer index)'''
        pass

    def PathCount(self):
        '''integer count = PathCount()'''
        pass

    def ShapeByIndex(self, index):
        '''VectorShape object = ShapeByIndex(integer index)'''
        pass

    def ShapeCount(self):
        '''integer count = ShapeCount()'''
        pass

    def Transform(self, matrix):
        '''Transform(matrix matrix)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VectorShapePacketTranslation:
    def Canvas(self, packet):
        '''VectorCanvas object = Canvas(pointer packet)'''
        pass

    def Item(self, packet):
        '''Item object = Item(pointer packet)'''
        pass

    def Packet(self, shape):
        '''pointer = Packet(object shape)'''
        pass

    def Shape(self, packet):
        '''VectorShape object = Shape(pointer packet)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VectorStack:
    def Optional(self, offset):
        '''pointer = Optional(integer offset)'''
        pass

    def Pop(self):
        '''Pop()'''
        pass

    def Push(self):
        '''Push()'''
        pass

    def SetPacket(self, offset, pdat):
        '''SetPacket(integer offset,pointer pdat)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VectorType:
    def ByIndex(self, type, index):
        '''(integer,integer flags) = ByIndex(integer type,integer index)'''
        pass

    def Category(self):
        '''string = Category()'''
        pass

    def Count(self, type):
        '''integer = Count(integer type)'''
        pass

    def Test(self, offset):
        '''integer = Test(integer offset)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VertexPacketTranslation:
    def Item(self, packet):
        '''Item object = Item(pointer packet)'''
        pass

    def Mesh(self, packet):
        '''Mesh object = Mesh(pointer packet)'''
        pass

    def Packet(self, vertex, polygon, mesh):
        '''pointer = Packet(id vertex,id polygon,object mesh)'''
        pass

    def Polygon(self, packet):
        '''id polygon = Polygon(pointer packet)'''
        pass

    def Vertex(self, packet):
        '''id vertex = Vertex(pointer packet)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VideoClipItem:
    def AllocFilter(self, attr, cache):
        '''ImageFilter object = AllocFilter(object attr,pointer cache)'''
        pass

    def Cleanup(self, cache):
        '''Cleanup(pointer cache)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class View:
    def Aspect(self):
        '''float = Aspect()'''
        pass

    def Axis(self):
        '''integer = Axis()'''
        pass

    def Center(self):
        '''vector center = Center()'''
        pass

    def Dimensions(self):
        '''(integer w,integer h) = Dimensions()'''
        pass

    def EyeVector(self, pos):
        '''(float,vector eye) = EyeVector(vector pos)'''
        pass

    def Focal(self):
        '''(float flen,float fdist) = Focal()'''
        pass

    def GridSize(self):
        '''float = GridSize()'''
        pass

    def GridSnap(self):
        '''float = GridSnap()'''
        pass

    def InvMatrix(self):
        '''matrix xfrm = InvMatrix()'''
        pass

    def Matrix(self):
        '''matrix xfrm = Matrix()'''
        pass

    def Ortho(self):
        '''(integer index,integer spin) = Ortho()'''
        pass

    def PixelScale(self):
        '''float = PixelScale()'''
        pass

    def Scale(self):
        '''float = Scale()'''
        pass

    def ScreenNormals(self, pos):
        '''(vector ax,vector ay,vector az) = ScreenNormals(vector pos)'''
        pass

    def ToModel(self, x, y, snap):
        '''vector pos = ToModel(integer x,integer y,integer snap)'''
        pass

    def ToScreen(self, pos):
        '''(integer,float x,float y) = ToScreen(vector pos)'''
        pass

    def ToScreen3(self, pos):
        '''(integer,vector vp) = ToScreen3(vector pos)'''
        pass

    def Type(self):
        '''integer = Type()'''
        pass

    def WorkPlane(self):
        '''(integer,vector center) = WorkPlane()'''
        pass

    def Zoom(self):
        '''float = Zoom()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class View3D:
    def Angles(self):
        '''vector hpb = Angles()'''
        pass

    def Axis(self):
        '''(integer,integer cam,vector axis) = Axis()'''
        pass

    def BackdropAspect(self):
        '''(integer,float asp) = BackdropAspect()'''
        pass

    def BackdropLook(self):
        '''(integer,float brit,float cont,float trns) = BackdropLook()'''
        pass

    def BackdropName(self):
        '''string = BackdropName()'''
        pass

    def BackdropOrient(self):
        '''(integer,float ang) = BackdropOrient()'''
        pass

    def BackdropPlace(self):
        '''(float cx,float cy,float w,float h) = BackdropPlace()'''
        pass

    def BackdropRender(self):
        '''(integer,integer resolution,integer blend) = BackdropRender()'''
        pass

    def Bounds(self):
        '''(integer x,integer y,integer w,integer h) = Bounds()'''
        pass

    def Center(self):
        '''vector center = Center()'''
        pass

    def Deformers(self):
        '''Deformers()'''
        pass

    def EyeVector(self):
        '''(float,vector pos,vector dir) = EyeVector()'''
        pass

    def FrameRate(self):
        '''float = FrameRate()'''
        pass

    def GridSize(self):
        '''float = GridSize()'''
        pass

    def ItemIsVisible(self, item):
        '''ItemIsVisible(object item)'''
        pass

    def ItemShade(self, item):
        '''integer shade = ItemShade(object item)'''
        pass

    def Matrix(self, inverse):
        '''matrix mat = Matrix(integer inverse)'''
        pass

    def PixelSize(self):
        '''float = PixelSize()'''
        pass

    def SetCenter(self, vec):
        '''SetCenter(vector vec)'''
        pass

    def SetMatrix(self, mat):
        '''SetMatrix(matrix mat)'''
        pass

    def SetScale(self, scl):
        '''SetScale(float scl)'''
        pass

    def Space(self):
        '''integer = Space()'''
        pass

    def Style(self, option):
        '''integer = Style(integer option)'''
        pass

    def To3D(self, x, y, flags):
        '''vector pos = To3D(float x,float y,integer flags)'''
        pass

    def To3DHit(self, x, y):
        '''(vector pos,vector nrm) = To3DHit(float x,float y)'''
        pass

    def ToUVHit(self, name, x, y, layer):
        '''(float u,float v) = ToUVHit(string name,float x,float y,integer layer)'''
        pass

    def WorkPlane(self):
        '''(integer,vector center) = WorkPlane()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ViewItem3D:
    def Draw(self, chanRead, strokeDraw, selectionFlags, itemColor):
        '''Draw(object chanRead,object strokeDraw,integer selectionFlags,vector itemColor)'''
        pass

    def DrawBackground(self, chanRead, strokeDraw, itemColor):
        '''DrawBackground(object chanRead,object strokeDraw,vector itemColor)'''
        pass

    def HandleChannel(self, handleIndex):
        '''integer chanIndex = HandleChannel(integer handleIndex)'''
        pass

    def HandleCount(self):
        '''integer count = HandleCount()'''
        pass

    def HandleMotion(self, handleIndex):
        '''(integer handleFlags,float min,float max,vector plane,vector offset) = HandleMotion(integer handleIndex)'''
        pass

    def HandlePositionToValue(self, handleIndex, position):
        '''float chanValue = HandlePositionToValue(integer handleIndex,vector position)'''
        pass

    def HandleValueToPosition(self, handleIndex, chanValue):
        '''vector position = HandleValueToPosition(integer handleIndex,double[] chanValue)'''
        pass

    def Test(self, chanRead, strokeDraw, selectionFlags, itemColor):
        '''Test(object chanRead,object strokeDraw,integer selectionFlags,vector itemColor)'''
        pass

    def WorldSpace(self):
        '''boolean = WorldSpace()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class ViewObject:
    def ByIndex(self, type, index):
        '''ViewObject object = ByIndex(integer type,integer index)'''
        pass

    def ByView(self, view):
        '''ViewObject object = ByView(object view)'''
        pass

    def Count(self, type):
        '''integer = Count(integer type)'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def Generate(self, type):
        '''Generate(integer type)'''
        pass

    def TestMode(self, type):
        '''TestMode(integer type)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VirtualDevice:
    def Date(self):
        '''string = Date()'''
        pass

    def Extract(self, dest):
        '''Extract(string dest)'''
        pass

    def Initialize(self, path):
        '''Initialize(string path)'''
        pass

    def Name(self):
        '''string = Name()'''
        pass

    def Scan(self, visitor):
        '''Scan(object visitor)'''
        pass

    def Select(self, sub):
        '''Select(string sub)'''
        pass

    def Size(self):
        '''float bytes = Size()'''
        pass

    def Type(self):
        '''integer type = Type()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class VirtualModel:
    def Down(self, vts):
        '''Down(object vts)'''
        pass

    def Draw(self, stroke):
        '''Draw(object stroke)'''
        pass

    def Flags(self):
        '''integer = Flags()'''
        pass

    def Move(self, vts):
        '''Move(object vts)'''
        pass

    def Test(self, stroke):
        '''Test(object stroke)'''
        pass

    def Tooltip(self, part):
        '''string = Tooltip(integer part)'''
        pass

    def Track(self, part):
        '''Track(integer part)'''
        pass

    def Up(self, vts):
        '''Up(object vts)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Visitor:
    def Evaluate(self):
        '''Evaluate()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Voxel:
    def BBox(self):
        '''bounds bbox = BBox()'''
        pass

    def FeatureByIndex(self, index):
        '''string name = FeatureByIndex(integer index)'''
        pass

    def FeatureCount(self):
        '''integer num = FeatureCount()'''
        pass

    def NextPos(self, currentPos, currentSegment, stride):
        '''(float segmentList,integer nextSegment,float nextPos) = NextPos(float currentPos,integer currentSegment,float stride)'''
        pass

    def Sample(self, pos, index):
        '''float val = Sample(vector pos,integer index)'''
        pass

    def VDBData(self):
        '''Unknown object = VDBData()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class Waterfall:
    def Advance(self):
        '''Advance()'''
        pass

    def GetWork(self):
        '''GetWork()'''
        pass

    def ProcessWork(self):
        '''ProcessWork()'''
        pass

    def Spawn(self):
        '''Waterfall object = Spawn()'''
        pass

    def State(self):
        '''integer = State()'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class WeightMapDeformerItem:
    def GetColor(self, chanRead):
        '''vector col = GetColor(object chanRead)'''
        pass

    def GetMapName(self, chanRead):
        '''string = GetMapName(object chanRead)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class WorkList:
    def Clear(self):
        '''Clear()'''
        pass

    def IsEmpty(self):
        '''boolean = IsEmpty()'''
        pass

    def Next(self):
        '''pointer = Next()'''
        pass

    def Split(self, mode):
        '''WorkList object = Split(integer mode)'''
        pass

    def set(self, source):
        '''bool = set(object source)'''
        pass

    def test(self):
        '''bool = test()'''
        pass



class storage:
    def get(self):
        '''Read out the contents of the buffer as a tuple, either the full length or the specified length'''
        pass

    def offset(self):
        '''Set or read the offset in the buffer'''
        pass

    def set(self):
        '''Assign a tuple to fill the buffer'''
        pass

    def setSize(self):
        '''Set the number of elements in the buffer'''
        pass

    def setType(self):
        '''Set the element type for buffer: float, double, int, byte, unsigned, pointer'''
        pass

    def size(self):
        '''Return the size of the buffer'''
        pass

    def string(self):
        '''Read out the contents of the buffer as a string'''
        pass



